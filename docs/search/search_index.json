{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Leaderboard Leaderboard: General Purpose Algorithms on matbench_v0.1 Find more information about this benchmark on the benchmark info page Task name Samples Algorithm Verified MAE (unit) or ROCAUC Notes matbench_steels 312 AMMExpress v2020 97.4929 (MPa) matbench_jdft2d 636 AMMExpress v2020 39.8497 (meV/atom) matbench_phonons 1,265 CrabNet 55.1114 (cm^-1) matbench_expt_gap 4,604 CrabNet 0.3463 (eV) matbench_dielectric 4,764 AMMExpress v2020 0.3150 (unitless) matbench_expt_is_metal 4,921 AMMExpress v2020 0.9209 matbench_glass 5,680 AMMExpress v2020 0.8607 matbench_log_gvrh 10,987 AMMExpress v2020 0.0874 (log10(GPa)) matbench_log_kvrh 10,987 AMMExpress v2020 0.0647 (log10(GPa)) matbench_perovskites 18,928 CGCNN v2019 0.0452 (eV/unit cell) structure required matbench_mp_gap 106,113 CrabNet 0.2655 (eV) matbench_mp_is_metal 106,113 CGCNN v2019 0.9520 structure required matbench_mp_e_form 132,752 CGCNN v2019 0.0337 (eV/atom) structure required Overview Matbench is an ImageNet for materials science ; a curated set of 13 supervised, pre-cleaned, ready-to-use ML tasks for benchmarking and fair comparison. The tasks span a wide domain of inorganic materials science applications including electronic, thermodynamic, mechanical, and thermal properties among crystals, 2D materials, disordered metals, and more. The Matbench python package provides everything needed to use Matbench with your ML algorithm in ~10 lines of code or less. What can Matbench offer? This website Leaderboard of results for state-of-the-art materials ML algorithms on standardized test problems Interactively explore and download the tasks on MPContribs-ML , a platform hosted by The Materials Project . See Benchmark Info for links to each dataset. Each and every result is backed by a peer-reviewed publication and a jupyter notebook (similar to Papers With Code) - i.e., how were these results were obtained? Glossary of all algorithms' results on the Matbench problems The Matbench Python package Probe ML algorithms strengths and weaknesses across a wide range of materials property prediction tasks Run a full benchmark in ~10 lines of code Submit results as a PR to the Matbench repo to compare with other algorithms and appear on the leaderboard Benchmark both general purpose ML models as well as algorithms specialized for particular domains Summary of Matbench's Tasks Matbench's 13 tasks can be broken down into various categories; it includes both the small - less than 10,000 samples - datasets that characterize experimental materials data as well as larger datasets from computer modelling methods like density functional theory (DFT). Each task in Matbench consists of a three things: A set of inputs: crystal structures or chemical compositions. A set of outputs: target properties, such as formation energy. A test procedure: a way to get a score for your algorithm The Matbench Python package provides functions for getting the first two (packaged together for each task as a dataset ) as well as running the test procedure. See the How to use documentation page to get started. Citing Matbench You can find details and results on the benchmark in our paper Benchmarking materials property prediction methods: the Matbench test set and Automatminer reference . Please consider citing this paper if you use Matbench v0.1 for benchmarking, comparison, or prototyping. You can cite Matbench using this reference: Dunn, A., Wang, Q., Ganose, A., Dopp, D., Jain, A. Benchmarking Materials Property Prediction Methods: The Matbench Test Set and Automatminer Reference Algorithm. npj Computational Materials 6, 138 (2020). https://doi.org/10.1038/s41524-020-00406-3","title":"Leaderboard"},{"location":"#leaderboard","text":"","title":"Leaderboard"},{"location":"#leaderboard-general-purpose-algorithms-on-matbench_v01","text":"Find more information about this benchmark on the benchmark info page Task name Samples Algorithm Verified MAE (unit) or ROCAUC Notes matbench_steels 312 AMMExpress v2020 97.4929 (MPa) matbench_jdft2d 636 AMMExpress v2020 39.8497 (meV/atom) matbench_phonons 1,265 CrabNet 55.1114 (cm^-1) matbench_expt_gap 4,604 CrabNet 0.3463 (eV) matbench_dielectric 4,764 AMMExpress v2020 0.3150 (unitless) matbench_expt_is_metal 4,921 AMMExpress v2020 0.9209 matbench_glass 5,680 AMMExpress v2020 0.8607 matbench_log_gvrh 10,987 AMMExpress v2020 0.0874 (log10(GPa)) matbench_log_kvrh 10,987 AMMExpress v2020 0.0647 (log10(GPa)) matbench_perovskites 18,928 CGCNN v2019 0.0452 (eV/unit cell) structure required matbench_mp_gap 106,113 CrabNet 0.2655 (eV) matbench_mp_is_metal 106,113 CGCNN v2019 0.9520 structure required matbench_mp_e_form 132,752 CGCNN v2019 0.0337 (eV/atom) structure required","title":"Leaderboard: General Purpose Algorithms on matbench_v0.1"},{"location":"#overview","text":"Matbench is an ImageNet for materials science ; a curated set of 13 supervised, pre-cleaned, ready-to-use ML tasks for benchmarking and fair comparison. The tasks span a wide domain of inorganic materials science applications including electronic, thermodynamic, mechanical, and thermal properties among crystals, 2D materials, disordered metals, and more. The Matbench python package provides everything needed to use Matbench with your ML algorithm in ~10 lines of code or less.","title":"Overview"},{"location":"#what-can-matbench-offer","text":"","title":"What can Matbench offer?"},{"location":"#this-website","text":"Leaderboard of results for state-of-the-art materials ML algorithms on standardized test problems Interactively explore and download the tasks on MPContribs-ML , a platform hosted by The Materials Project . See Benchmark Info for links to each dataset. Each and every result is backed by a peer-reviewed publication and a jupyter notebook (similar to Papers With Code) - i.e., how were these results were obtained? Glossary of all algorithms' results on the Matbench problems","title":"This website"},{"location":"#the-matbench-python-package","text":"Probe ML algorithms strengths and weaknesses across a wide range of materials property prediction tasks Run a full benchmark in ~10 lines of code Submit results as a PR to the Matbench repo to compare with other algorithms and appear on the leaderboard Benchmark both general purpose ML models as well as algorithms specialized for particular domains","title":"The Matbench Python package"},{"location":"#summary-of-matbenchs-tasks","text":"Matbench's 13 tasks can be broken down into various categories; it includes both the small - less than 10,000 samples - datasets that characterize experimental materials data as well as larger datasets from computer modelling methods like density functional theory (DFT). Each task in Matbench consists of a three things: A set of inputs: crystal structures or chemical compositions. A set of outputs: target properties, such as formation energy. A test procedure: a way to get a score for your algorithm The Matbench Python package provides functions for getting the first two (packaged together for each task as a dataset ) as well as running the test procedure. See the How to use documentation page to get started.","title":"Summary of Matbench's Tasks"},{"location":"#citing-matbench","text":"You can find details and results on the benchmark in our paper Benchmarking materials property prediction methods: the Matbench test set and Automatminer reference . Please consider citing this paper if you use Matbench v0.1 for benchmarking, comparison, or prototyping. You can cite Matbench using this reference: Dunn, A., Wang, Q., Ganose, A., Dopp, D., Jain, A. Benchmarking Materials Property Prediction Methods: The Matbench Test Set and Automatminer Reference Algorithm. npj Computational Materials 6, 138 (2020). https://doi.org/10.1038/s41524-020-00406-3","title":"Citing Matbench"},{"location":"Benchmark%20Info/matbench_v0.1/","text":"Benchmark info for matbench_v0.1 The matbench_v0.1 benchmark contains 13 tasks: Task name Task type Target column (unit) Input type Samples MAD (regression) or Fraction True (classification) Links Submissions matbench_steels regression yield strength (MPa) composition 312 229.3743 download , interactive 5 matbench_jdft2d regression exfoliation_en (meV/atom) structure 636 67.2020 download , interactive 6 matbench_phonons regression last phdos peak (cm^-1) structure 1,265 323.7870 download , interactive 6 matbench_expt_gap regression gap expt (eV) composition 4,604 1.1432 download , interactive 5 matbench_dielectric regression n (unitless) structure 4,764 0.8085 download , interactive 6 matbench_expt_is_metal classification is_metal composition 4,921 0.4981 download , interactive 3 matbench_glass classification gfa composition 5,680 0.7104 download , interactive 3 matbench_log_gvrh regression log10(G_VRH) (log10(GPa)) structure 10,987 0.2931 download , interactive 6 matbench_log_kvrh regression log10(K_VRH) (log10(GPa)) structure 10,987 0.2897 download , interactive 6 matbench_perovskites regression e_form (eV/unit cell) structure 18,928 0.5660 download , interactive 5 matbench_mp_gap regression gap pbe (eV) structure 106,113 1.3271 download , interactive 5 matbench_mp_is_metal classification is_metal structure 106,113 0.4349 download , interactive 4 matbench_mp_e_form regression e_form (eV/atom) structure 132,752 1.0059 download , interactive 5","title":"Benchmark info for `matbench_v0.1`"},{"location":"Benchmark%20Info/matbench_v0.1/#benchmark-info-for-matbench_v01","text":"The matbench_v0.1 benchmark contains 13 tasks: Task name Task type Target column (unit) Input type Samples MAD (regression) or Fraction True (classification) Links Submissions matbench_steels regression yield strength (MPa) composition 312 229.3743 download , interactive 5 matbench_jdft2d regression exfoliation_en (meV/atom) structure 636 67.2020 download , interactive 6 matbench_phonons regression last phdos peak (cm^-1) structure 1,265 323.7870 download , interactive 6 matbench_expt_gap regression gap expt (eV) composition 4,604 1.1432 download , interactive 5 matbench_dielectric regression n (unitless) structure 4,764 0.8085 download , interactive 6 matbench_expt_is_metal classification is_metal composition 4,921 0.4981 download , interactive 3 matbench_glass classification gfa composition 5,680 0.7104 download , interactive 3 matbench_log_gvrh regression log10(G_VRH) (log10(GPa)) structure 10,987 0.2931 download , interactive 6 matbench_log_kvrh regression log10(K_VRH) (log10(GPa)) structure 10,987 0.2897 download , interactive 6 matbench_perovskites regression e_form (eV/unit cell) structure 18,928 0.5660 download , interactive 5 matbench_mp_gap regression gap pbe (eV) structure 106,113 1.3271 download , interactive 5 matbench_mp_is_metal classification is_metal structure 106,113 0.4349 download , interactive 4 matbench_mp_e_form regression e_form (eV/atom) structure 132,752 1.0059 download , interactive 5","title":"Benchmark info for matbench_v0.1"},{"location":"Benchmark%20Info/notes/","text":"Notes on Benchmarking General-purpose vs Task-specific algorithms \"General purpose\" algorithms are treated differently from task-specific algorithms in Matbench for the purposes of ranking. We make this distinction because some algorithms can be trained and used - in theory - for predicting any property of a material as long as they are trained on sufficient data. Others are specialized for particular domains and need a separate comparison for fair analysis. General purpose algorithms General purpose algorithms are valid for all the tasks in a benchmark using the same human-chosen configuration . Beyond defining a single configuration before beginning a benchmark, a human should not be hand-tuning or informing the algorithm about architecture, parameters, or hyperparameters. However, general purpose algorithms can automatically determine hyperparameters and parameters as part of their fitting processes in each fold. We include algorithms as \"general purpose\" to include on the general purpose leaderboard if any one of the following criteria is met for Matbench v0.1: - All 13 tasks are recorded, OR... - All 10 regression tasks are recorded, OR... - All 9 structure tasks are recorded. If only the 9 structure tasks are recorded, the algorithm is marked with \"requires structure\". General purpose algorithms' results will appear on both the General Purpose Leaderboard as well as the Task-specific leaderboards. Task specific algorithms Task-specific algorithms can fit on any subset of tasks; for example, a single task. Task-specific algorithms may be valid or specialized only for a subset of the tasks in the benchmark. For example, if you have a model which was specifically created for predicting bulk metallic glasses, you may submit a benchmark containing only results for the matbench_glass dataset. Task-specific results will only appear on the Task-specific leaderboards, not on the General Purpose Leaderboard . Why MAE? Mean absolute error was chosen as the ranking metric for regression because: The meaning of MAE is the most easily inferred Dataset targets which should be analyzed according to relative error (such as bulk moduli) have their target transformed to order-of-magnitude form (e.g., log10). MAE are valid for all target values, unlike mean absolute percentage errors, which are invalid for 0-valued targets. That being said, other error metrics are also informative beyond what MAE can offer. Therefore, Matbench offers multiple error metrics to help assess generalization error. Mean absolute percentage error ( mape* ) scores Mean absolute percentage error is only valid on sets of data without any true values of zero. Also, small true values can result in very large MAPE for samples with even very small predicted error. A threshold of 1e-5 is applied to mask samples with true absolute values smaller than this from the MAPE calculation. The reported MAPE is the decimal (not percentage) among these masked samples; i.e., a MAPE of 11% corresponds to mape*=0.11 , and a MAPE of 11,000% corresponds to mape*=110 . Please use the given MAPE scores with a grain of salt, as they are not complete for the reason given above .","title":"Notes on Benchmarking"},{"location":"Benchmark%20Info/notes/#notes-on-benchmarking","text":"","title":"Notes on Benchmarking"},{"location":"Benchmark%20Info/notes/#general-purpose-vs-task-specific-algorithms","text":"\"General purpose\" algorithms are treated differently from task-specific algorithms in Matbench for the purposes of ranking. We make this distinction because some algorithms can be trained and used - in theory - for predicting any property of a material as long as they are trained on sufficient data. Others are specialized for particular domains and need a separate comparison for fair analysis.","title":"General-purpose vs Task-specific algorithms"},{"location":"Benchmark%20Info/notes/#general-purpose-algorithms","text":"General purpose algorithms are valid for all the tasks in a benchmark using the same human-chosen configuration . Beyond defining a single configuration before beginning a benchmark, a human should not be hand-tuning or informing the algorithm about architecture, parameters, or hyperparameters. However, general purpose algorithms can automatically determine hyperparameters and parameters as part of their fitting processes in each fold. We include algorithms as \"general purpose\" to include on the general purpose leaderboard if any one of the following criteria is met for Matbench v0.1: - All 13 tasks are recorded, OR... - All 10 regression tasks are recorded, OR... - All 9 structure tasks are recorded. If only the 9 structure tasks are recorded, the algorithm is marked with \"requires structure\". General purpose algorithms' results will appear on both the General Purpose Leaderboard as well as the Task-specific leaderboards.","title":"General purpose algorithms"},{"location":"Benchmark%20Info/notes/#task-specific-algorithms","text":"Task-specific algorithms can fit on any subset of tasks; for example, a single task. Task-specific algorithms may be valid or specialized only for a subset of the tasks in the benchmark. For example, if you have a model which was specifically created for predicting bulk metallic glasses, you may submit a benchmark containing only results for the matbench_glass dataset. Task-specific results will only appear on the Task-specific leaderboards, not on the General Purpose Leaderboard .","title":"Task specific algorithms"},{"location":"Benchmark%20Info/notes/#why-mae","text":"Mean absolute error was chosen as the ranking metric for regression because: The meaning of MAE is the most easily inferred Dataset targets which should be analyzed according to relative error (such as bulk moduli) have their target transformed to order-of-magnitude form (e.g., log10). MAE are valid for all target values, unlike mean absolute percentage errors, which are invalid for 0-valued targets. That being said, other error metrics are also informative beyond what MAE can offer. Therefore, Matbench offers multiple error metrics to help assess generalization error.","title":"Why MAE?"},{"location":"Benchmark%20Info/notes/#mean-absolute-percentage-error-mape-scores","text":"Mean absolute percentage error is only valid on sets of data without any true values of zero. Also, small true values can result in very large MAPE for samples with even very small predicted error. A threshold of 1e-5 is applied to mask samples with true absolute values smaller than this from the MAPE calculation. The reported MAPE is the decimal (not percentage) among these masked samples; i.e., a MAPE of 11% corresponds to mape*=0.11 , and a MAPE of 11,000% corresponds to mape*=110 . Please use the given MAPE scores with a grain of salt, as they are not complete for the reason given above .","title":"Mean absolute percentage error (mape*) scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/","text":"matbench_v0.1: CrabNet Algorithm description: Compositionally restricted attention-based network for materials property predictions. See github page for more information: https://github.com/anthony-wang/CrabNet. Raw data download and example notebook available on the matbench repo . References (in bibtex format): ('@article{Wang2021crabnet,\\n' ' author = {Wang, Anthony Yu-Tung and Kauwe, Steven K. and Murdock, Ryan J. ' 'and Sparks, Taylor D.},\\n' ' year = {2021},\\n' ' title = {Compositionally restricted attention-based network for materials ' 'property predictions},\\n' ' pages = {77},\\n' ' volume = {7},\\n' ' number = {1},\\n' ' doi = {10.1038/s41524-021-00545-1},\\n' ' publisher = {{Nature Publishing Group}},\\n' ' shortjournal = {npj Comput. Mater.},\\n' ' journal = {npj Computational Materials}\\n' ' }') User metadata: {} Metadata: Tasks recorded: 10 of 13 total Benchmark is complete? False Benchmark is structure complete? False Benchmark is composition complete? False Benchmark is regression complete? True Benchmark is classification complete? False Software Requirements 'See GitHub page for CrabNet, CrabNet version: be89e92.' Task data: matbench_dielectric Fold scores fold mae rmse mape* max_error fold_0 0.2147 0.6794 0.0733 14.7263 fold_1 0.3048 1.1243 0.0989 19.2249 fold_2 0.4376 2.9443 0.0925 59.1583 fold_3 0.3402 2.3061 0.0797 53.8845 fold_4 0.3195 1.5900 0.0942 27.8634 Fold score stats metric mean max min std mae 0.3234 0.4376 0.2147 0.0714 rmse 1.7288 2.9443 0.6794 0.8120 mape* 0.0877 0.0989 0.0733 0.0096 max_error 34.9715 59.1583 14.7263 18.1717 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_expt_gap Fold scores fold mae rmse mape* max_error fold_0 0.3476 0.8404 0.3974 6.6728 fold_1 0.3434 0.8214 0.2866 6.3943 fold_2 0.3473 0.8680 0.3421 9.1598 fold_3 0.3329 0.8518 0.3553 9.8002 fold_4 0.3602 0.8702 0.4349 7.6012 Fold score stats metric mean max min std mae 0.3463 0.3602 0.3329 0.0088 rmse 0.8504 0.8702 0.8214 0.0181 mape* 0.3633 0.4349 0.2866 0.0504 max_error 7.9256 9.8002 6.3943 1.3459 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_jdft2d Fold scores fold mae rmse mape* max_error fold_0 36.0753 71.1404 24.8117 394.7442 fold_1 45.8800 107.0134 0.3347 669.9718 fold_2 67.1110 192.8415 0.6296 1039.2952 fold_3 31.6798 65.1904 0.2653 319.1235 fold_4 47.3058 163.8581 0.5401 1532.0118 Fold score stats metric mean max min std mae 45.6104 67.1110 31.6798 12.2491 rmse 120.0088 192.8415 65.1904 50.5756 mape* 5.3163 24.8117 0.2653 9.7486 max_error 791.0293 1532.0118 319.1235 448.3487 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_log_gvrh Fold scores fold mae rmse mape* max_error fold_0 0.0994 0.1538 0.0787 1.4432 fold_1 0.0994 0.1648 0.0794 2.4220 fold_2 0.1020 0.1594 0.0813 1.0792 fold_3 0.1034 0.1607 0.0783 1.0056 fold_4 0.1031 0.1633 0.0810 1.5313 Fold score stats metric mean max min std mae 0.1014 0.1034 0.0994 0.0017 rmse 0.1604 0.1648 0.1538 0.0038 mape* 0.0797 0.0813 0.0783 0.0012 max_error 1.4963 2.4220 1.0056 0.5051 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_log_kvrh Fold scores fold mae rmse mape* max_error fold_0 0.0748 0.1449 0.0509 1.6732 fold_1 0.0780 0.1549 0.0525 1.6914 fold_2 0.0698 0.1344 0.0463 1.3116 fold_3 0.0793 0.1508 0.0571 1.0620 fold_4 0.0773 0.1506 0.0532 1.8430 Fold score stats metric mean max min std mae 0.0758 0.0793 0.0698 0.0034 rmse 0.1471 0.1549 0.1344 0.0071 mape* 0.0520 0.0571 0.0463 0.0035 max_error 1.5162 1.8430 1.0620 0.2864 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_perovskites Fold scores fold mae rmse mape* max_error fold_0 0.4080 0.5445 0.4861 2.3726 fold_1 0.4160 0.5515 0.5261 2.1724 fold_2 0.4034 0.5363 0.4858 2.0999 fold_3 0.4096 0.5428 0.5270 2.2336 fold_4 0.3953 0.5310 0.4611 2.2192 Fold score stats metric mean max min std mae 0.4065 0.4160 0.3953 0.0069 rmse 0.5412 0.5515 0.5310 0.0070 mape* 0.4972 0.5270 0.4611 0.0256 max_error 2.2195 2.3726 2.0999 0.0896 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_phonons Fold scores fold mae rmse mape* max_error fold_0 60.8044 155.2771 0.0881 1452.7562 fold_1 58.1439 143.0602 0.0915 1207.7800 fold_2 60.2413 165.1000 0.0869 1445.4633 fold_3 47.7603 114.5270 0.0895 894.9224 fold_4 48.6072 113.9230 0.0871 1124.2209 Fold score stats metric mean max min std mae 55.1114 60.8044 47.7603 5.7317 rmse 138.3775 165.1000 113.9230 20.9212 mape* 0.0886 0.0915 0.0869 0.0017 max_error 1225.0285 1452.7562 894.9224 209.7051 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_steels Fold scores fold mae rmse mape* max_error fold_0 116.2240 176.5695 0.0774 576.3912 fold_1 88.0920 117.7789 0.0632 387.1094 fold_2 108.1233 153.4745 0.0717 485.5283 fold_3 137.4903 192.2622 0.0932 549.5977 fold_4 86.6503 124.9355 0.0654 386.2023 Fold score stats metric mean max min std mae 107.3160 137.4903 86.6503 18.9057 rmse 153.0041 192.2622 117.7789 28.7243 mape* 0.0742 0.0932 0.0632 0.0107 max_error 476.9658 576.3912 386.2023 79.4309 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_mp_gap Fold scores fold mae rmse mape* max_error fold_0 0.2653 0.5814 5.4032 6.8675 fold_1 0.2613 0.5811 2.9969 7.9829 fold_2 0.2648 0.5903 5.3833 7.7856 fold_3 0.2658 0.5954 10.1488 7.9675 fold_4 0.2704 0.6006 5.8835 6.8672 Fold score stats metric mean max min std mae 0.2655 0.2704 0.2613 0.0029 rmse 0.5898 0.6006 0.5811 0.0077 mape* 5.9631 10.1488 2.9969 2.3227 max_error 7.4941 7.9829 6.8672 0.5165 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_mp_e_form Fold scores fold mae rmse mape* max_error fold_0 0.0853 0.2492 0.5075 4.2164 fold_1 0.0857 0.2613 0.4542 6.3774 fold_2 0.0879 0.2587 0.4088 4.0334 fold_3 0.0854 0.2499 0.5596 6.2383 fold_4 0.0865 0.2532 0.4764 3.9335 Fold score stats metric mean max min std mae 0.0862 0.0879 0.0853 0.0010 rmse 0.2544 0.2613 0.2492 0.0048 mape* 0.4813 0.5596 0.4088 0.0507 max_error 4.9598 6.3774 3.9335 1.1053 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"matbench_v0.1: CrabNet"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#matbench_v01-crabnet","text":"","title":"matbench_v0.1: CrabNet"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#algorithm-description","text":"Compositionally restricted attention-based network for materials property predictions. See github page for more information: https://github.com/anthony-wang/CrabNet. Raw data download and example notebook available on the matbench repo .","title":"Algorithm description:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#references-in-bibtex-format","text":"('@article{Wang2021crabnet,\\n' ' author = {Wang, Anthony Yu-Tung and Kauwe, Steven K. and Murdock, Ryan J. ' 'and Sparks, Taylor D.},\\n' ' year = {2021},\\n' ' title = {Compositionally restricted attention-based network for materials ' 'property predictions},\\n' ' pages = {77},\\n' ' volume = {7},\\n' ' number = {1},\\n' ' doi = {10.1038/s41524-021-00545-1},\\n' ' publisher = {{Nature Publishing Group}},\\n' ' shortjournal = {npj Comput. Mater.},\\n' ' journal = {npj Computational Materials}\\n' ' }')","title":"References (in bibtex format):"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#user-metadata","text":"{}","title":"User metadata:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#metadata","text":"Tasks recorded: 10 of 13 total Benchmark is complete? False Benchmark is structure complete? False Benchmark is composition complete? False Benchmark is regression complete? True Benchmark is classification complete? False","title":"Metadata:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#software-requirements","text":"'See GitHub page for CrabNet, CrabNet version: be89e92.'","title":"Software Requirements"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#task-data","text":"","title":"Task data:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#matbench_dielectric","text":"","title":"matbench_dielectric"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-scores","text":"fold mae rmse mape* max_error fold_0 0.2147 0.6794 0.0733 14.7263 fold_1 0.3048 1.1243 0.0989 19.2249 fold_2 0.4376 2.9443 0.0925 59.1583 fold_3 0.3402 2.3061 0.0797 53.8845 fold_4 0.3195 1.5900 0.0942 27.8634","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-score-stats","text":"metric mean max min std mae 0.3234 0.4376 0.2147 0.0714 rmse 1.7288 2.9443 0.6794 0.8120 mape* 0.0877 0.0989 0.0733 0.0096 max_error 34.9715 59.1583 14.7263 18.1717","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-parameters","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#matbench_expt_gap","text":"","title":"matbench_expt_gap"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-scores_1","text":"fold mae rmse mape* max_error fold_0 0.3476 0.8404 0.3974 6.6728 fold_1 0.3434 0.8214 0.2866 6.3943 fold_2 0.3473 0.8680 0.3421 9.1598 fold_3 0.3329 0.8518 0.3553 9.8002 fold_4 0.3602 0.8702 0.4349 7.6012","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-score-stats_1","text":"metric mean max min std mae 0.3463 0.3602 0.3329 0.0088 rmse 0.8504 0.8702 0.8214 0.0181 mape* 0.3633 0.4349 0.2866 0.0504 max_error 7.9256 9.8002 6.3943 1.3459","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-parameters_1","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#matbench_jdft2d","text":"","title":"matbench_jdft2d"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-scores_2","text":"fold mae rmse mape* max_error fold_0 36.0753 71.1404 24.8117 394.7442 fold_1 45.8800 107.0134 0.3347 669.9718 fold_2 67.1110 192.8415 0.6296 1039.2952 fold_3 31.6798 65.1904 0.2653 319.1235 fold_4 47.3058 163.8581 0.5401 1532.0118","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-score-stats_2","text":"metric mean max min std mae 45.6104 67.1110 31.6798 12.2491 rmse 120.0088 192.8415 65.1904 50.5756 mape* 5.3163 24.8117 0.2653 9.7486 max_error 791.0293 1532.0118 319.1235 448.3487","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-parameters_2","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#matbench_log_gvrh","text":"","title":"matbench_log_gvrh"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-scores_3","text":"fold mae rmse mape* max_error fold_0 0.0994 0.1538 0.0787 1.4432 fold_1 0.0994 0.1648 0.0794 2.4220 fold_2 0.1020 0.1594 0.0813 1.0792 fold_3 0.1034 0.1607 0.0783 1.0056 fold_4 0.1031 0.1633 0.0810 1.5313","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-score-stats_3","text":"metric mean max min std mae 0.1014 0.1034 0.0994 0.0017 rmse 0.1604 0.1648 0.1538 0.0038 mape* 0.0797 0.0813 0.0783 0.0012 max_error 1.4963 2.4220 1.0056 0.5051","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-parameters_3","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#matbench_log_kvrh","text":"","title":"matbench_log_kvrh"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-scores_4","text":"fold mae rmse mape* max_error fold_0 0.0748 0.1449 0.0509 1.6732 fold_1 0.0780 0.1549 0.0525 1.6914 fold_2 0.0698 0.1344 0.0463 1.3116 fold_3 0.0793 0.1508 0.0571 1.0620 fold_4 0.0773 0.1506 0.0532 1.8430","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-score-stats_4","text":"metric mean max min std mae 0.0758 0.0793 0.0698 0.0034 rmse 0.1471 0.1549 0.1344 0.0071 mape* 0.0520 0.0571 0.0463 0.0035 max_error 1.5162 1.8430 1.0620 0.2864","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-parameters_4","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#matbench_perovskites","text":"","title":"matbench_perovskites"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-scores_5","text":"fold mae rmse mape* max_error fold_0 0.4080 0.5445 0.4861 2.3726 fold_1 0.4160 0.5515 0.5261 2.1724 fold_2 0.4034 0.5363 0.4858 2.0999 fold_3 0.4096 0.5428 0.5270 2.2336 fold_4 0.3953 0.5310 0.4611 2.2192","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-score-stats_5","text":"metric mean max min std mae 0.4065 0.4160 0.3953 0.0069 rmse 0.5412 0.5515 0.5310 0.0070 mape* 0.4972 0.5270 0.4611 0.0256 max_error 2.2195 2.3726 2.0999 0.0896","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-parameters_5","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#matbench_phonons","text":"","title":"matbench_phonons"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-scores_6","text":"fold mae rmse mape* max_error fold_0 60.8044 155.2771 0.0881 1452.7562 fold_1 58.1439 143.0602 0.0915 1207.7800 fold_2 60.2413 165.1000 0.0869 1445.4633 fold_3 47.7603 114.5270 0.0895 894.9224 fold_4 48.6072 113.9230 0.0871 1124.2209","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-score-stats_6","text":"metric mean max min std mae 55.1114 60.8044 47.7603 5.7317 rmse 138.3775 165.1000 113.9230 20.9212 mape* 0.0886 0.0915 0.0869 0.0017 max_error 1225.0285 1452.7562 894.9224 209.7051","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-parameters_6","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#matbench_steels","text":"","title":"matbench_steels"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-scores_7","text":"fold mae rmse mape* max_error fold_0 116.2240 176.5695 0.0774 576.3912 fold_1 88.0920 117.7789 0.0632 387.1094 fold_2 108.1233 153.4745 0.0717 485.5283 fold_3 137.4903 192.2622 0.0932 549.5977 fold_4 86.6503 124.9355 0.0654 386.2023","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-score-stats_7","text":"metric mean max min std mae 107.3160 137.4903 86.6503 18.9057 rmse 153.0041 192.2622 117.7789 28.7243 mape* 0.0742 0.0932 0.0632 0.0107 max_error 476.9658 576.3912 386.2023 79.4309","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-parameters_7","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#matbench_mp_gap","text":"","title":"matbench_mp_gap"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-scores_8","text":"fold mae rmse mape* max_error fold_0 0.2653 0.5814 5.4032 6.8675 fold_1 0.2613 0.5811 2.9969 7.9829 fold_2 0.2648 0.5903 5.3833 7.7856 fold_3 0.2658 0.5954 10.1488 7.9675 fold_4 0.2704 0.6006 5.8835 6.8672","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-score-stats_8","text":"metric mean max min std mae 0.2655 0.2704 0.2613 0.0029 rmse 0.5898 0.6006 0.5811 0.0077 mape* 5.9631 10.1488 2.9969 2.3227 max_error 7.4941 7.9829 6.8672 0.5165","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-parameters_8","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#matbench_mp_e_form","text":"","title":"matbench_mp_e_form"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-scores_9","text":"fold mae rmse mape* max_error fold_0 0.0853 0.2492 0.5075 4.2164 fold_1 0.0857 0.2613 0.4542 6.3774 fold_2 0.0879 0.2587 0.4088 4.0334 fold_3 0.0854 0.2499 0.5596 6.2383 fold_4 0.0865 0.2532 0.4764 3.9335","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-score-stats_9","text":"metric mean max min std mae 0.0862 0.0879 0.0853 0.0010 rmse 0.2544 0.2613 0.2492 0.0048 mape* 0.4813 0.5596 0.4088 0.0507 max_error 4.9598 6.3774 3.9335 1.1053","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_CrabNet/#fold-parameters_9","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/","text":"matbench_v0.1: AMMExpress v2020 Algorithm description: Automatminer express v1.03.20200727. Based on automatic featurization, tree-based feature reduction, and genetic-algorithm based AutoML with the TPOT package. All data was generated using the same config (express, default). The automatminer version requirement specifies the versions of many dependent packages, such as matminer, which are required for the algorithm to work in your virtualenv. Raw data download and example notebook available on the matbench repo . References (in bibtex format): ('@article{Dunn2020,\\n' ' doi = {10.1038/s41524-020-00406-3},\\n' ' url = {https://doi.org/10.1038/s41524-020-00406-3},\\n' ' year = {2020},\\n' ' month = sep,\\n' ' publisher = {Springer Science and Business Media {LLC}},\\n' ' volume = {6},\\n' ' number = {1},\\n' ' author = {Alexander Dunn and Qi Wang and Alex Ganose and Daniel Dopp and ' 'Anubhav Jain},\\n' ' title = {Benchmarking materials property prediction methods: the Matbench ' 'test set and Automatminer reference algorithm},\\n' ' journal = {npj Computational Materials}\\n' '}') User metadata: {'autofeaturizer_kwargs': {'n_jobs': 10, 'preset': 'express'}, 'cleaner_kwargs': {'feature_na_method': 'drop', 'max_na_frac': 0.1, 'na_method_fit': 'mean', 'na_method_transform': 'mean'}, 'learner_kwargs': {'max_eval_time_mins': 20, 'max_time_mins': 1440, 'memory': 'auto', 'n_jobs': 10, 'population_size': 200}, 'learner_name': 'TPOTAdaptor', 'reducer_kwargs': {'reducers': ['corr', 'tree'], 'tree_importance_percentile': 0.99}} Metadata: Tasks recorded: 13 of 13 total Benchmark is complete? True Software Requirements {'python': ['automatminer==1.0.3.20200727', 'matbench==0.1.0']} Task data: matbench_dielectric Fold scores fold mae rmse mape* max_error fold_0 0.2188 0.6855 0.0760 14.6654 fold_1 0.2844 1.0764 0.0899 19.6283 fold_2 0.4257 2.9472 0.0889 59.0112 fold_3 0.3198 2.2782 0.0720 53.5196 fold_4 0.3264 1.6137 0.0987 28.1601 Fold score stats metric mean max min std mae 0.3150 0.4257 0.2188 0.0672 rmse 1.7202 2.9472 0.6855 0.8140 mape* 0.0851 0.0987 0.0720 0.0098 max_error 34.9969 59.0112 14.6654 17.9782 Fold parameters fold params dict fold_0 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.006, score_func=<function f_regression at 0x2aaaef1a0840>))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.95, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=5,\\n max_features=0.45, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=19, min_samples_split=14,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData mean MeltingT', 'MagpieData mode MeltingT', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NsValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData mode GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'maximum oxidation state', 'std_dev oxidation state', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 19', 'structural complexity per cell', 'crystal_system_tetragonal']} fold_1 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(zerocount, ZeroCount())', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=3,\\n max_features=0.2, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=1.0, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData avg_dev Column', 'MagpieData mean CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NdValence', 'MagpieData range NValence', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData mode GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'range oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 7', 'structural complexity per atom']} fold_2 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.001))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.8, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=9,\\n max_features=0.55, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=19, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=200,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData mean MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Row', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData mode GSmagmom', 'MagpieData minimum SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 8', 'sine coulomb matrix eig 19', 'structural complexity per atom']} fold_3 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.023, score_func=<function f_regression at 0x2aaaef19f950>))', '(standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=7,\\n max_features=0.7500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=16, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=200,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.6500000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData avg_dev Column', 'MagpieData minimum CovalentRadius', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData maximum NdValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData range NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'maximum oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 7', 'structural complexity per atom', 'structural complexity per cell', 'crystal_system_tetragonal']} fold_4 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.034, score_func=<function f_regression at 0x2aaaf35a08c8>))', '(zerocount, ZeroCount())', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.85, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=9,\\n max_features=0.7500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=13, min_samples_split=17,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.7500000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData mean MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData range NValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData mode GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MagpieData mode SpaceGroupNumber', 'maximum oxidation state', 'avg ionic char', 'density', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 7']} matbench_expt_gap Fold scores fold mae rmse mape* max_error fold_0 0.3998 0.9435 0.3372 8.0111 fold_1 0.4061 0.9354 0.3085 8.6887 fold_2 0.4538 1.0955 0.3916 12.7533 fold_3 0.4061 1.0273 0.3019 12.6296 fold_4 0.4150 0.9573 0.4503 6.0779 Fold score stats metric mean max min std mae 0.4161 0.4538 0.3998 0.0194 rmse 0.9918 1.0955 0.9354 0.0612 mape* 0.3579 0.4503 0.3019 0.0560 max_error 9.6321 12.7533 6.0779 2.6411 Fold parameters fold params dict fold_0 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.035, score_func=<function f_regression at 0x2aaaf35a18c8>))', '(standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=ls, max_depth=9,\\n max_features=0.35000000000000003, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData avg_dev Number', 'MagpieData range MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData range NdValence', 'MagpieData mean NdValence', 'MagpieData mean NfValence', 'MagpieData minimum NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData avg_dev GSmagmom', 'MagpieData range SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_1 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.046, score_func=<function f_regression at 0x2aaaef19f8c8>))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, true, false, false, false, false, ...],\\n dtype=<class float>, minimum_fraction=0.1, sparse=false,\\n threshold=10))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.85, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=9,\\n max_features=0.8, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=1.0, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData avg_dev Number', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData maximum NdValence', 'MagpieData range NdValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData maximum NpUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_2 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0005))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.5500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData avg_dev Number', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NsValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData range NdValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NfValence', 'MagpieData minimum NValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData avg_dev NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_3 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=85,\\n score_func=<function f_regression at 0x2aaaf39a38c8>))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false, ...],\\n dtype=<class float>, minimum_fraction=0.2, sparse=false,\\n threshold=10))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.8, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=7,\\n max_features=0.9500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=20,\\n min_weight_fraction_leaf=0.0, n_estimators=200,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.8, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData avg_dev AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData range NdValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_4 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0005))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.35000000000000003, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_jobs=null, oob_score=false, random_state=null,\\n verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData avg_dev AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData range NdValence', 'MagpieData mean NdValence', 'MagpieData minimum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber']} matbench_expt_is_metal Fold scores fold accuracy balanced_accuracy f1 rocauc fold_0 0.9218 0.9218 0.9205 0.9218 fold_1 0.9157 0.9156 0.9145 0.9156 fold_2 0.9207 0.9207 0.9193 0.9207 fold_3 0.9228 0.9228 0.9223 0.9228 fold_4 0.9238 0.9238 0.9235 0.9238 Fold score stats metric mean max min std accuracy 0.9210 0.9238 0.9157 0.0028 balanced_accuracy 0.9209 0.9238 0.9156 0.0028 f1 0.9200 0.9235 0.9145 0.0031 rocauc 0.9209 0.9238 0.9156 0.0028 Fold parameters fold params dict fold_0 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.009000000000000001,\\n score_func=<function f_classif at 0x2aaaf35a16a8>))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false, ...],\\n dtype=<class float>, minimum_fraction=0.2, sparse=false,\\n threshold=10))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=9,\\n max_features=0.25000000000000006,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=13,\\n min_samples_split=5, min_weight_fraction_leaf=0.0,\\n n_estimators=500, n_iter_no_change=null,\\n presort=auto, random_state=null,\\n subsample=0.7500000000000002, tol=0.0001,\\n validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData mean AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData range GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_1 {'best_pipeline': ['(rfe, RFE(estimator=ExtraTreesClassifier(bootstrap=false, class_weight=null,\\n criterion=gini, max_depth=null,\\n max_features=0.15000000000000002,\\n max_leaf_nodes=null,\\n min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=1,\\n min_samples_split=2,\\n min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null,\\n verbose=0, warm_start=false),\\n n_features_to_select=null, step=0.35000000000000003, verbose=0))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=5,\\n max_features=0.8500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=17,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.45000000000000007,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData maximum NpValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_2 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.001))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=9,\\n max_features=0.6500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=10, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9500000000000002,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData maximum NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_3 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.03, score_func=<function f_classif at 0x2aaaf35a0730>))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=7,\\n max_features=0.05, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=16, min_samples_split=17,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.8500000000000002,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData maximum Column', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_4 {'best_pipeline': ['(rfe, RFE(estimator=ExtraTreesClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null,\\n max_features=0.5500000000000002,\\n max_leaf_nodes=null,\\n min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=1,\\n min_samples_split=2,\\n min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null,\\n verbose=0, warm_start=false),\\n n_features_to_select=null, step=0.15000000000000002, verbose=0))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=9,\\n max_features=0.5500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=7, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.8500000000000002,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData maximum Column', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData maximum NpValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData range GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} matbench_glass Fold scores fold accuracy balanced_accuracy f1 rocauc fold_0 0.8283 0.8441 0.8697 0.8441 fold_1 0.8125 0.8383 0.8548 0.8383 fold_2 0.8574 0.8546 0.8956 0.8546 fold_3 0.9173 0.8742 0.9437 0.8742 fold_4 0.9375 0.8921 0.9579 0.8921 Fold score stats metric mean max min std accuracy 0.8706 0.9375 0.8125 0.0490 balanced_accuracy 0.8607 0.8921 0.8383 0.0199 f1 0.9043 0.9579 0.8548 0.0404 rocauc 0.8607 0.8921 0.8383 0.0199 Fold parameters fold params dict fold_0 {'best_pipeline': ['(selectfrommodel, SelectFromModel(estimator=ExtraTreesClassifier(bootstrap=false,\\n class_weight=null,\\n criterion=entropy,\\n max_depth=null,\\n max_features=0.35000000000000003,\\n max_leaf_nodes=null,\\n min_impurity_decrease=0.0,\\n min_impurity_split=null,\\n min_samples_leaf=1,\\n min_samples_split=2,\\n min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null,\\n oob_score=false,\\n random_state=null, verbose=0,\\n warm_start=false),\\n max_features=null, norm_order=1, prefit=false, threshold=0.0))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=7,\\n max_features=0.05, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9500000000000002,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData avg_dev AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter', 'Miedema_deltaH_amor', 'Miedema_deltaH_ss_min']} fold_1 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))', '(extratreesclassifier, ExtraTreesClassifier(bootstrap=false, class_weight=null, criterion=gini,\\n max_depth=null, max_features=0.35000000000000003,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=1,\\n min_samples_split=2, min_weight_fraction_leaf=0.0,\\n n_estimators=20, n_jobs=null, oob_score=false,\\n random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mean AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter', 'Miedema_deltaH_amor', 'Miedema_deltaH_ss_min']} fold_2 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=74,\\n score_func=<function f_classif at 0x2aaaf35a0730>))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false, ...],\\n dtype=<class float>, minimum_fraction=0.2, sparse=false,\\n threshold=10))', '(extratreesclassifier, ExtraTreesClassifier(bootstrap=false, class_weight=null, criterion=entropy,\\n max_depth=null, max_features=0.6500000000000001,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=1,\\n min_samples_split=2, min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null, oob_score=false,\\n random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData mean Number', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData avg_dev AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter', 'Miedema_deltaH_amor', 'Miedema_deltaH_ss_min']} fold_3 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=9,\\n max_features=0.15000000000000002,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=13,\\n min_samples_split=17, min_weight_fraction_leaf=0.0,\\n n_estimators=1000, n_iter_no_change=null,\\n presort=auto, random_state=null,\\n subsample=0.5500000000000002, tol=0.0001,\\n validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData maximum AtomicWeight', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter', 'Miedema_deltaH_amor', 'Miedema_deltaH_ss_min']} fold_4 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=7,\\n max_features=0.45000000000000007,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=16,\\n min_samples_split=5, min_weight_fraction_leaf=0.0,\\n n_estimators=500, n_iter_no_change=null,\\n presort=auto, random_state=null,\\n subsample=0.7500000000000002, tol=0.0001,\\n validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData maximum AtomicWeight', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData maximum NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter', 'Miedema_deltaH_amor', 'Miedema_deltaH_ss_min']} matbench_jdft2d Fold scores fold mae rmse mape* max_error fold_0 29.5070 57.7719 18.9726 362.2752 fold_1 44.3036 98.1137 0.3191 551.7742 fold_2 54.4690 164.0162 0.5117 847.0618 fold_3 28.0759 55.8345 0.2371 316.2185 fold_4 42.8931 156.9938 0.5429 1552.9102 Fold score stats metric mean max min std mae 39.8497 54.4690 28.0759 9.8835 rmse 106.5460 164.0162 55.8345 46.6251 mape* 4.1167 18.9726 0.2371 7.4289 max_error 726.0480 1552.9102 316.2185 453.6535 Fold parameters fold params dict fold_0 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.8, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=lad, max_depth=3,\\n max_features=0.7000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.7000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData avg_dev Number', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData minimum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Column', 'MagpieData mean Row', 'MagpieData maximum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NValence', 'MagpieData mean NpUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mode GSmagmom', 'MagpieData minimum SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MagpieData mode SpaceGroupNumber', 'avg anion electron affinity', 'density', 'vpa', 'packing fraction', 'crystal_system_int', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'structural complexity per cell']} fold_1 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=40,\\n score_func=<function f_regression at 0x2aaaf35a08c8>))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=lad, max_depth=7,\\n max_features=0.15000000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9500000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData avg_dev Number', 'MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData maximum AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData maximum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData mode NdUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mode GSmagmom', 'MagpieData minimum SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MagpieData mode SpaceGroupNumber', 'maximum oxidation state', 'std_dev oxidation state', 'avg anion electron affinity', 'density', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'structural complexity per cell']} fold_2 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=62,\\n score_func=<function f_regression at 0x2aaaf35a08c8>))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n true, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, true, false, false, false],\\n dtype=<class float>, minimum_fraction=0.1, sparse=false,\\n threshold=10))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.95, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=lad, max_depth=3,\\n max_features=0.4, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.7000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData avg_dev Number', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData minimum MeltingT', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData maximum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData range NpUnfilled', 'MagpieData mode NpUnfilled', 'MagpieData mean NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData minimum SpaceGroupNumber', 'MagpieData maximum SpaceGroupNumber', 'MagpieData range SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'std_dev oxidation state', 'avg anion electron affinity', 'density', 'vpa', 'packing fraction', 'crystal_system_int', 'is_centrosymmetric', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'structural complexity per atom', 'structural complexity per cell']} fold_3 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=82,\\n score_func=<function f_regression at 0x2aab561f6620>))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.85, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=5,\\n max_features=0.4, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=200,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=1.0, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData avg_dev Number', 'MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData maximum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NfValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mode GSbandgap', 'MagpieData minimum SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MagpieData mode SpaceGroupNumber', 'std_dev oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'structural complexity per atom', 'structural complexity per cell']} fold_4 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=62,\\n score_func=<function f_regression at 0x2aaaf35a08c8>))', '(zerocount, ZeroCount())', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.9, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=lad, max_depth=5,\\n max_features=0.55, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.8500000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData avg_dev Number', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mode MeltingT', 'MagpieData range Column', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData range Row', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData maximum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mode GSmagmom', 'MagpieData minimum SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'avg anion electron affinity', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'structural complexity per atom', 'structural complexity per cell', 'crystal_system_tetragonal']} matbench_log_gvrh Fold scores fold mae rmse mape* max_error fold_0 0.0891 0.1270 0.0692 1.1580 fold_1 0.0852 0.1261 0.0666 1.0887 fold_2 0.0849 0.1261 0.0668 0.9631 fold_3 0.0884 0.1279 0.0670 0.8959 fold_4 0.0894 0.1313 0.0690 0.9810 Fold score stats metric mean max min std mae 0.0874 0.0894 0.0849 0.0020 rmse 0.1277 0.1313 0.1261 0.0019 mape* 0.0677 0.0692 0.0666 0.0012 max_error 1.0173 1.1580 0.8959 0.0937 Fold parameters fold params dict fold_0 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.2))', '(zerocount, ZeroCount())', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.99, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=ls, max_depth=7,\\n max_features=0.4, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.6500000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData mean AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3']} fold_1 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.01))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=5,\\n max_features=1.0, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=19, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.55, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 3']} fold_2 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.01, score_func=<function f_regression at 0x2aaaef19e8c8>))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.25000000000000006, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_jobs=null, oob_score=false, random_state=null,\\n verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData mean NdValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 3']} fold_3 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=ls, max_depth=9,\\n max_features=0.1, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=19, min_samples_split=14,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.8, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData mean AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 3']} fold_4 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=96,\\n score_func=<function f_regression at 0x2aaaf35a08c8>))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.9500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=200, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Column', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 3']} matbench_log_kvrh Fold scores fold mae rmse mape* max_error fold_0 0.0639 0.1179 0.0417 1.4823 fold_1 0.0659 0.1231 0.0432 1.2686 fold_2 0.0627 0.1115 0.0411 1.1316 fold_3 0.0668 0.1217 0.0464 1.1890 fold_4 0.0640 0.1172 0.0417 1.4335 Fold score stats metric mean max min std mae 0.0647 0.0668 0.0627 0.0015 rmse 0.1183 0.1231 0.1115 0.0041 mape* 0.0428 0.0464 0.0411 0.0019 max_error 1.3010 1.4823 1.1316 0.1362 Fold parameters fold params dict fold_0 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.032, score_func=<function f_regression at 0x2aaaf35a2840>))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.8500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=200, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData minimum Column', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData minimum NValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData maximum SpaceGroupNumber', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0']} fold_1 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.029, score_func=<function f_regression at 0x2aaaf35a08c8>))', '(zerocount, ZeroCount())', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.9, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=9,\\n max_features=0.7000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=13, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData minimum Column', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData minimum NValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'density', 'vpa', 'packing fraction', 'sine coulomb matrix eig 0']} fold_2 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.2))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false],\\n dtype=<class float>, minimum_fraction=0.15, sparse=false,\\n threshold=10))', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.35000000000000003, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=200,\\n n_jobs=null, oob_score=false, random_state=null,\\n verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData minimum Column', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'density', 'vpa', 'packing fraction', 'sine coulomb matrix eig 2']} fold_3 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.016, score_func=<function f_regression at 0x2aaaf79a28c8>))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false],\\n dtype=<class float>, minimum_fraction=0.25, sparse=false,\\n threshold=10))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.9500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=200, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData minimum Column', 'MagpieData mean Column', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData minimum NValence', 'MagpieData mean NValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData maximum SpaceGroupNumber', 'density', 'vpa', 'packing fraction', 'spacegroup_num']} fold_4 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.6500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData minimum Column', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean SpaceGroupNumber', 'density', 'vpa', 'packing fraction', 'sine coulomb matrix eig 0']} matbench_mp_e_form Fold scores fold mae rmse mape* max_error fold_0 0.1586 0.2508 1.0829 4.0713 fold_1 0.2026 0.2955 0.9253 5.8108 fold_2 0.1473 0.2256 0.7722 2.7696 fold_3 0.2080 0.3062 1.3958 5.5190 fold_4 0.1467 0.2226 0.8028 3.3888 Fold score stats metric mean max min std mae 0.1726 0.2080 0.1467 0.0270 rmse 0.2602 0.3062 0.2226 0.0348 mape* 0.9958 1.3958 0.7722 0.2280 max_error 4.3119 5.8108 2.7696 1.1826 Fold parameters fold params dict fold_0 {'best_pipeline': ['(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.5, loss=huber, max_depth=5,\\n max_features=0.15000000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=12, min_samples_split=15,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto, random_state=null,\\n subsample=0.7500000000000001, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['PymatgenData range X', 'PymatgenData std_dev X', 'PymatgenData mean melting_point', 'MagpieData mode MendeleevNumber', 'MagpieData avg_dev MeltingT', 'MagpieData maximum Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MatscholarElementData mean embedding 30', 'MatscholarElementData mean embedding 31', 'MatscholarElementData range embedding 41', 'MatscholarElementData minimum embedding 51', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 67', 'MatscholarElementData minimum embedding 72', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 79', 'MatscholarElementData mean embedding 80', 'MatscholarElementData minimum embedding 104', 'MatscholarElementData mean embedding 157', 'MatscholarElementData maximum embedding 166', 'MatscholarElementData mean embedding 166', 'MatscholarElementData mean embedding 176', 'DemlData mean boiling_point', 'O', '2-norm', 'frac d valence electrons', 'density', 'vpa']} fold_1 {'best_pipeline': ['(polynomialfeatures, PolynomialFeatures(degree=2, include_bias=false, interaction_only=false))', '(pca, PCA(copy=true, iterated_power=3, n_components=null, random_state=null,\\n svd_solver=randomized, tol=0.0, whiten=false))', '(lassolarscv, LassoLarsCV(copy_X=true, cv=warn, eps=2.220446049250313e-16,\\n fit_intercept=true, max_iter=500, max_n_alphas=1000, n_jobs=null,\\n normalize=true, positive=false, precompute=auto, verbose=false))'], 'features_reduced': ['PymatgenData range X', 'PymatgenData std_dev X', 'PymatgenData mean melting_point', 'PymatgenData std_dev melting_point', 'MagpieData mode MendeleevNumber', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData maximum Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MatscholarElementData mean embedding 31', 'MatscholarElementData mean embedding 32', 'MatscholarElementData range embedding 41', 'MatscholarElementData minimum embedding 51', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 67', 'MatscholarElementData minimum embedding 72', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 79', 'MatscholarElementData mean embedding 80', 'MatscholarElementData minimum embedding 86', 'MatscholarElementData mean embedding 157', 'MatscholarElementData mean embedding 166', 'MatscholarElementData mean embedding 176', 'MatscholarElementData mean embedding 188', 'DemlData mean boiling_point', 'O', '2-norm', 'frac d valence electrons', 'density', 'vpa']} fold_2 {'best_pipeline': ['(stackingestimator, StackingEstimator(estimator=GradientBoostingRegressor(alpha=0.9, criterion=friedman_mse, init=null,\\n learning_rate=0.5, loss=huber, max_depth=4,\\n max_features=0.6000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_...e=0.7500000000000001, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false)))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(polynomialfeatures, PolynomialFeatures(degree=2, include_bias=false, interaction_only=false))', '(ridgecv, RidgeCV(alphas=array([ 0.1, 1. , 10. ]), cv=null, fit_intercept=true,\\n gcv_mode=null, normalize=false, scoring=null, store_cv_values=false))'], 'features_reduced': ['PymatgenData range X', 'PymatgenData std_dev X', 'PymatgenData mean melting_point', 'MagpieData mode MendeleevNumber', 'MagpieData avg_dev MeltingT', 'MagpieData maximum Column', 'MagpieData avg_dev Column', 'MagpieData mode Column', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MatscholarElementData mean embedding 8', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 68', 'MatscholarElementData minimum embedding 72', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 79', 'MatscholarElementData mean embedding 80', 'MatscholarElementData std_dev embedding 90', 'MatscholarElementData mean embedding 157', 'MatscholarElementData mean embedding 166', 'MatscholarElementData mean embedding 176', 'MatscholarElementData mean embedding 188', 'DemlData mean boiling_point', 'O', '2-norm', 'frac d valence electrons', 'density', 'vpa', 'packing fraction']} fold_3 {'best_pipeline': ['(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(selectfwe, SelectFwe(alpha=0.027, score_func=<function f_regression at 0x2b2eb18422f0>))', '(stackingestimator, StackingEstimator(estimator=GradientBoostingRegressor(alpha=0.8, criterion=friedman_mse, init=null,\\n learning_rate=0.5, loss=huber, max_depth=3,\\n max_features=0.1, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=14, min_sa...e=0.6000000000000001, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false)))', '(ridgecv, RidgeCV(alphas=array([ 0.1, 1. , 10. ]), cv=null, fit_intercept=true,\\n gcv_mode=null, normalize=false, scoring=null, store_cv_values=false))'], 'features_reduced': ['PymatgenData range X', 'PymatgenData std_dev X', 'PymatgenData mean melting_point', 'MagpieData minimum MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData avg_dev MeltingT', 'MagpieData maximum Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MatscholarElementData range embedding 41', 'MatscholarElementData mean embedding 41', 'MatscholarElementData minimum embedding 51', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 67', 'MatscholarElementData mean embedding 68', 'MatscholarElementData minimum embedding 72', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 79', 'MatscholarElementData mean embedding 80', 'MatscholarElementData minimum embedding 104', 'MatscholarElementData mean embedding 157', 'MatscholarElementData maximum embedding 166', 'MatscholarElementData mean embedding 176', 'O', '2-norm', 'frac d valence electrons', 'density', 'vpa']} fold_4 {'best_pipeline': ['(xgbregressor, XGBRegressor(base_score=0.5, booster=gbtree, colsample_bylevel=1,\\n colsample_bytree=1, gamma=0, learning_rate=0.5, max_delta_step=0,\\n max_depth=5, min_child_weight=14, missing=null, n_estimators=100,\\n n_jobs=1, nthread=1, objective=reg:linear, random_state=0,\\n reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=null,\\n silent=true, subsample=0.9000000000000001))'], 'features_reduced': ['PymatgenData range X', 'PymatgenData std_dev X', 'PymatgenData mean melting_point', 'MagpieData mode MendeleevNumber', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData maximum Column', 'MagpieData avg_dev Column', 'MagpieData mode CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MatscholarElementData mean embedding 8', 'MatscholarElementData mean embedding 30', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 51', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData mean embedding 65', 'MatscholarElementData minimum embedding 72', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 79', 'MatscholarElementData mean embedding 80', 'MatscholarElementData minimum embedding 86', 'MatscholarElementData minimum embedding 104', 'MatscholarElementData mean embedding 157', 'MatscholarElementData mean embedding 166', 'MatscholarElementData mean embedding 176', 'MatscholarElementData range embedding 182', 'MatscholarElementData mean embedding 188', 'DemlData mean boiling_point', 'O', '2-norm', 'frac d valence electrons', 'density', 'vpa', 'packing fraction']} matbench_mp_gap Fold scores fold mae rmse mape* max_error fold_0 0.2799 0.5481 3.5712 5.4792 fold_1 0.2850 0.5671 3.1533 6.9105 fold_2 0.2724 0.5477 4.6097 6.2045 fold_3 0.2909 0.5710 10.0191 6.4590 fold_4 0.2837 0.5714 6.8322 5.5333 Fold score stats metric mean max min std mae 0.2824 0.2909 0.2724 0.0061 rmse 0.5611 0.5714 0.5477 0.0109 mape* 5.6371 10.0191 3.1533 2.5347 max_error 6.1173 6.9105 5.4792 0.5480 Fold parameters fold params dict fold_0 {'best_pipeline': ['(stackingestimator-1, StackingEstimator(estimator=RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.4, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=6, min_samples_split=10,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(stackingestimator-2, StackingEstimator(estimator=ExtraTreesRegressor(bootstrap=true, criterion=mse, max_depth=null,\\n max_features=0.55, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=6, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(lassolarscv, LassoLarsCV(copy_X=true, cv=warn, eps=2.220446049250313e-16,\\n fit_intercept=true, max_iter=500, max_n_alphas=1000, n_jobs=null,\\n normalize=true, positive=false, precompute=auto, verbose=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData std_dev group', 'PymatgenData maximum mendeleev_no', 'PymatgenData mean mendeleev_no', 'PymatgenData std_dev thermal_conductivity', 'MagpieData avg_dev MeltingT', 'MagpieData range Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev GSbandgap', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData std_dev embedding 2', 'MatscholarElementData minimum embedding 40', 'MatscholarElementData minimum embedding 41', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 45', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData std_dev embedding 60', 'MatscholarElementData minimum embedding 64', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 71', 'MatscholarElementData std_dev embedding 72', 'MatscholarElementData maximum embedding 82', 'MatscholarElementData mean embedding 82', 'MatscholarElementData mean embedding 93', 'MatscholarElementData maximum embedding 114', 'MatscholarElementData mean embedding 116', 'MatscholarElementData std_dev embedding 119', 'MatscholarElementData std_dev embedding 123', 'MatscholarElementData mean embedding 143', 'MatscholarElementData mean embedding 148', 'MatscholarElementData mean embedding 163', 'MatscholarElementData std_dev embedding 163', 'MatscholarElementData mean embedding 168', 'MatscholarElementData std_dev embedding 170', 'MatscholarElementData mean embedding 179', 'MatscholarElementData minimum embedding 181', 'MatscholarElementData mean embedding 181', 'MatscholarElementData std_dev embedding 192', 'MatscholarElementData mean embedding 194', 'MatscholarElementData mean embedding 198', 'MatscholarElementData maximum embedding 199', 'DemlData std_dev heat_fusion', 'DemlData minimum boiling_point', 'DemlData mean boiling_point', 'DemlData mean electronegativity', 'DemlData std_dev electronegativity', '2-norm', 'transition metal fraction', 'frac p valence electrons', 'frac d valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'HOMO_character_d']} fold_1 {'best_pipeline': ['(stackingestimator-1, StackingEstimator(estimator=RandomForestRegressor(bootstrap=true, criterion=mse, max_depth=null,\\n max_features=0.35000000000000003, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=16, min_samples_split=6,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(stackingestimator-2, StackingEstimator(estimator=RandomForestRegressor(bootstrap=true, criterion=mse, max_depth=null,\\n max_features=0.35000000000000003, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=6, min_samples_split=15,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(decisiontreeregressor, DecisionTreeRegressor(criterion=mse, max_depth=9, max_features=null,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=8,\\n min_samples_split=2, min_weight_fraction_leaf=0.0,\\n presort=false, random_state=null, splitter=best))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData std_dev X', 'PymatgenData mean block', 'PymatgenData maximum mendeleev_no', 'PymatgenData mean mendeleev_no', 'PymatgenData std_dev thermal_conductivity', 'PymatgenData std_dev melting_point', 'MagpieData range MeltingT', 'MagpieData range Column', 'MagpieData mean Row', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData avg_dev GSbandgap', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 2', 'MatscholarElementData std_dev embedding 2', 'MatscholarElementData minimum embedding 41', 'MatscholarElementData range embedding 41', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 45', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData minimum embedding 64', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 66', 'MatscholarElementData mean embedding 71', 'MatscholarElementData mean embedding 79', 'MatscholarElementData maximum embedding 82', 'MatscholarElementData mean embedding 82', 'MatscholarElementData std_dev embedding 83', 'MatscholarElementData mean embedding 90', 'MatscholarElementData mean embedding 93', 'MatscholarElementData minimum embedding 112', 'MatscholarElementData mean embedding 116', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData std_dev embedding 119', 'MatscholarElementData std_dev embedding 122', 'MatscholarElementData mean embedding 123', 'MatscholarElementData std_dev embedding 123', 'MatscholarElementData mean embedding 132', 'MatscholarElementData std_dev embedding 141', 'MatscholarElementData mean embedding 143', 'MatscholarElementData mean embedding 148', 'MatscholarElementData mean embedding 156', 'MatscholarElementData mean embedding 163', 'MatscholarElementData std_dev embedding 163', 'MatscholarElementData minimum embedding 166', 'MatscholarElementData mean embedding 168', 'MatscholarElementData mean embedding 179', 'MatscholarElementData mean embedding 188', 'MatscholarElementData std_dev embedding 192', 'MatscholarElementData mean embedding 194', 'MatscholarElementData mean embedding 195', 'MatscholarElementData mean embedding 198', 'MatscholarElementData maximum embedding 199', 'DemlData minimum boiling_point', 'DemlData mean boiling_point', 'DemlData minimum heat_cap', 'DemlData mean electronegativity', '2-norm', 'transition metal fraction', 'frac p valence electrons', 'frac d valence electrons', 'density', 'vpa', 'packing fraction', 'sine coulomb matrix eig 0', 'HOMO_character_d']} fold_2 {'best_pipeline': ['(stackingestimator-1, StackingEstimator(estimator=RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.45, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=9, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(stackingestimator-2, StackingEstimator(estimator=RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.3, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=16, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.8, max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=1, min_samples_split=3,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['HOMO_energy', 'LUMO_energy', 'gap_AO', 'PymatgenData std_dev X', 'PymatgenData mean block', 'PymatgenData maximum mendeleev_no', 'PymatgenData std_dev thermal_conductivity', 'MagpieData range MeltingT', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev NpValence', 'MagpieData mean NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 2', 'MatscholarElementData std_dev embedding 2', 'MatscholarElementData maximum embedding 10', 'MatscholarElementData minimum embedding 41', 'MatscholarElementData range embedding 41', 'MatscholarElementData mean embedding 41', 'MatscholarElementData mean embedding 45', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData mean embedding 63', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 71', 'MatscholarElementData std_dev embedding 72', 'MatscholarElementData std_dev embedding 78', 'MatscholarElementData mean embedding 82', 'MatscholarElementData std_dev embedding 83', 'MatscholarElementData mean embedding 91', 'MatscholarElementData mean embedding 93', 'MatscholarElementData std_dev embedding 97', 'MatscholarElementData mean embedding 116', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData std_dev embedding 119', 'MatscholarElementData mean embedding 123', 'MatscholarElementData std_dev embedding 123', 'MatscholarElementData minimum embedding 130', 'MatscholarElementData std_dev embedding 130', 'MatscholarElementData mean embedding 143', 'MatscholarElementData mean embedding 163', 'MatscholarElementData minimum embedding 166', 'MatscholarElementData mean embedding 168', 'MatscholarElementData std_dev embedding 170', 'MatscholarElementData mean embedding 181', 'MatscholarElementData std_dev embedding 192', 'MatscholarElementData mean embedding 194', 'MatscholarElementData mean embedding 198', 'MatscholarElementData maximum embedding 199', 'DemlData minimum molar_vol', 'DemlData std_dev heat_fusion', 'DemlData minimum boiling_point', 'DemlData mean boiling_point', 'DemlData mean heat_cap', 'DemlData mean electronegativity', '2-norm', 'transition metal fraction', 'frac p valence electrons', 'frac d valence electrons', 'density', 'vpa', 'packing fraction', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'HOMO_character_d']} fold_3 {'best_pipeline': ['(stackingestimator-1, StackingEstimator(estimator=ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.45, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=19, min_samples_split=20,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(stackingestimator-2, StackingEstimator(estimator=RandomForestRegressor(bootstrap=true, criterion=mse, max_depth=null,\\n max_features=0.15000000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=9, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.7000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=13, min_samples_split=7,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData std_dev X', 'PymatgenData mean block', 'PymatgenData maximum mendeleev_no', 'PymatgenData mean mendeleev_no', 'PymatgenData std_dev thermal_conductivity', 'MagpieData avg_dev MeltingT', 'MagpieData range Column', 'MagpieData mean Row', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 2', 'MatscholarElementData std_dev embedding 2', 'MatscholarElementData minimum embedding 41', 'MatscholarElementData range embedding 41', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 42', 'MatscholarElementData mean embedding 51', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData std_dev embedding 60', 'MatscholarElementData minimum embedding 64', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 71', 'MatscholarElementData mean embedding 72', 'MatscholarElementData std_dev embedding 72', 'MatscholarElementData std_dev embedding 73', 'MatscholarElementData maximum embedding 82', 'MatscholarElementData mean embedding 82', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 116', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData std_dev embedding 119', 'MatscholarElementData mean embedding 123', 'MatscholarElementData std_dev embedding 123', 'MatscholarElementData mean embedding 143', 'MatscholarElementData mean embedding 148', 'MatscholarElementData std_dev embedding 149', 'MatscholarElementData mean embedding 163', 'MatscholarElementData minimum embedding 166', 'MatscholarElementData mean embedding 168', 'MatscholarElementData std_dev embedding 170', 'MatscholarElementData mean embedding 179', 'MatscholarElementData std_dev embedding 192', 'MatscholarElementData mean embedding 194', 'MatscholarElementData mean embedding 195', 'MatscholarElementData mean embedding 198', 'MatscholarElementData maximum embedding 199', 'DemlData std_dev heat_fusion', 'DemlData minimum boiling_point', 'DemlData mean boiling_point', 'DemlData minimum heat_cap', 'DemlData mean electronegativity', '2-norm', 'transition metal fraction', 'frac p valence electrons', 'frac d valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'HOMO_character_d']} fold_4 {'best_pipeline': ['(stackingestimator-1, StackingEstimator(estimator=GradientBoostingRegressor(alpha=0.85, criterion=friedman_mse, init=null,\\n learning_rate=0.01, loss=lad, max_depth=1,\\n max_features=0.45, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=11, min_s...e=0.9500000000000001, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false)))', '(stackingestimator-2, StackingEstimator(estimator=RandomForestRegressor(bootstrap=true, criterion=mse, max_depth=null,\\n max_features=0.6000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=9, min_samples_split=16,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.45, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=3, min_samples_split=4,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData std_dev X', 'PymatgenData mean group', 'PymatgenData mean block', 'PymatgenData maximum mendeleev_no', 'PymatgenData range mendeleev_no', 'PymatgenData mean mendeleev_no', 'PymatgenData std_dev thermal_conductivity', 'PymatgenData std_dev melting_point', 'MagpieData range Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MatscholarElementData mean embedding 2', 'MatscholarElementData std_dev embedding 2', 'MatscholarElementData minimum embedding 40', 'MatscholarElementData minimum embedding 41', 'MatscholarElementData range embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 49', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData minimum embedding 64', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 66', 'MatscholarElementData mean embedding 71', 'MatscholarElementData std_dev embedding 72', 'MatscholarElementData maximum embedding 82', 'MatscholarElementData mean embedding 82', 'MatscholarElementData mean embedding 90', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 116', 'MatscholarElementData std_dev embedding 119', 'MatscholarElementData std_dev embedding 123', 'MatscholarElementData std_dev embedding 130', 'MatscholarElementData mean embedding 143', 'MatscholarElementData std_dev embedding 145', 'MatscholarElementData mean embedding 148', 'MatscholarElementData std_dev embedding 149', 'MatscholarElementData mean embedding 163', 'MatscholarElementData std_dev embedding 166', 'MatscholarElementData mean embedding 168', 'MatscholarElementData mean embedding 179', 'MatscholarElementData mean embedding 181', 'MatscholarElementData std_dev embedding 192', 'MatscholarElementData mean embedding 194', 'MatscholarElementData mean embedding 198', 'MatscholarElementData maximum embedding 199', 'DemlData std_dev heat_fusion', 'DemlData mean boiling_point', 'DemlData minimum heat_cap', 'DemlData range heat_cap', 'DemlData mean electronegativity', '2-norm', 'transition metal fraction', 'frac p valence electrons', 'frac d valence electrons', 'density', 'vpa', 'packing fraction', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'HOMO_character_d']} matbench_mp_is_metal Fold scores fold accuracy balanced_accuracy f1 rocauc fold_0 0.9133 0.9094 0.8982 0.9094 fold_1 0.9123 0.9086 0.8972 0.9086 fold_2 0.9129 0.9089 0.8976 0.9089 fold_3 0.9146 0.9108 0.8998 0.9108 fold_4 0.9129 0.9086 0.8974 0.9086 Fold score stats metric mean max min std accuracy 0.9132 0.9146 0.9123 0.0008 balanced_accuracy 0.9093 0.9108 0.9086 0.0008 f1 0.8981 0.8998 0.8972 0.0009 rocauc 0.9093 0.9108 0.9086 0.0008 Fold parameters fold params dict fold_0 {'best_pipeline': ['(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(randomforestclassifier, RandomForestClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null,\\n max_features=0.35000000000000003, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=2, min_samples_split=20,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData range X', 'PymatgenData std_dev group', 'PymatgenData mean block', 'PymatgenData maximum mendeleev_no', 'PymatgenData mean mendeleev_no', 'PymatgenData std_dev mendeleev_no', 'PymatgenData mean thermal_conductivity', 'PymatgenData std_dev thermal_conductivity', 'MagpieData maximum MendeleevNumber', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 2', 'MatscholarElementData mean embedding 4', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 46', 'MatscholarElementData mean embedding 51', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 67', 'MatscholarElementData std_dev embedding 67', 'MatscholarElementData mean embedding 68', 'MatscholarElementData std_dev embedding 73', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 78', 'MatscholarElementData mean embedding 91', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 99', 'MatscholarElementData std_dev embedding 99', 'MatscholarElementData mean embedding 118', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData std_dev embedding 121', 'MatscholarElementData mean embedding 123', 'MatscholarElementData mean embedding 139', 'MatscholarElementData mean embedding 149', 'MatscholarElementData mean embedding 179', 'MatscholarElementData std_dev embedding 179', 'MatscholarElementData mean embedding 188', 'MatscholarElementData mean embedding 198', 'DemlData mean molar_vol', 'DemlData std_dev molar_vol', 'DemlData std_dev melting_point', 'DemlData mean boiling_point', 'DemlData mean first_ioniz', 'DemlData mean electronegativity', 'transition metal fraction', 'frac p valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 9', 'sine coulomb matrix eig 10', 'sine coulomb matrix eig 11']} fold_1 {'best_pipeline': ['(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(randomforestclassifier, RandomForestClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null, max_features=0.55,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=4,\\n min_samples_split=5, min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null, oob_score=false,\\n random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData range X', 'PymatgenData std_dev X', 'PymatgenData std_dev group', 'PymatgenData mean block', 'PymatgenData mean mendeleev_no', 'PymatgenData std_dev mendeleev_no', 'PymatgenData mean thermal_conductivity', 'PymatgenData std_dev thermal_conductivity', 'MagpieData maximum MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData avg_dev Column', 'MagpieData mean Electronegativity', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData avg_dev GSvolume_pa', 'MatscholarElementData mean embedding 4', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 46', 'MatscholarElementData mean embedding 51', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData mean embedding 61', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 67', 'MatscholarElementData mean embedding 68', 'MatscholarElementData mean embedding 72', 'MatscholarElementData std_dev embedding 72', 'MatscholarElementData std_dev embedding 73', 'MatscholarElementData mean embedding 78', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 99', 'MatscholarElementData std_dev embedding 99', 'MatscholarElementData mean embedding 118', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData mean embedding 123', 'MatscholarElementData mean embedding 139', 'MatscholarElementData mean embedding 149', 'MatscholarElementData std_dev embedding 154', 'MatscholarElementData mean embedding 168', 'MatscholarElementData mean embedding 171', 'MatscholarElementData mean embedding 179', 'MatscholarElementData std_dev embedding 179', 'MatscholarElementData mean embedding 188', 'MatscholarElementData mean embedding 198', 'MatscholarElementData std_dev embedding 199', 'DemlData mean molar_vol', 'DemlData std_dev molar_vol', 'DemlData mean melting_point', 'DemlData mean boiling_point', 'DemlData mean first_ioniz', 'DemlData mean electronegativity', 'transition metal fraction', 'avg p valence electrons', 'frac p valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 8', 'sine coulomb matrix eig 9', 'sine coulomb matrix eig 10', 'sine coulomb matrix eig 11']} fold_2 {'best_pipeline': ['(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(randomforestclassifier, RandomForestClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null, max_features=0.5,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=1,\\n min_samples_split=18, min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null, oob_score=false,\\n random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData mean block', 'PymatgenData std_dev mendeleev_no', 'PymatgenData minimum thermal_conductivity', 'PymatgenData mean thermal_conductivity', 'PymatgenData std_dev thermal_conductivity', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev Column', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData mean NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 4', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 46', 'MatscholarElementData mean embedding 51', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 67', 'MatscholarElementData mean embedding 68', 'MatscholarElementData mean embedding 72', 'MatscholarElementData std_dev embedding 73', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 79', 'MatscholarElementData mean embedding 87', 'MatscholarElementData mean embedding 91', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 95', 'MatscholarElementData mean embedding 99', 'MatscholarElementData std_dev embedding 99', 'MatscholarElementData mean embedding 118', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData mean embedding 123', 'MatscholarElementData mean embedding 139', 'MatscholarElementData mean embedding 155', 'MatscholarElementData mean embedding 179', 'MatscholarElementData std_dev embedding 179', 'MatscholarElementData mean embedding 188', 'MatscholarElementData mean embedding 198', 'DemlData std_dev molar_vol', 'DemlData mean melting_point', 'DemlData mean boiling_point', 'DemlData mean first_ioniz', 'DemlData mean electronegativity', 'transition metal fraction', 'avg p valence electrons', 'frac p valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 8', 'sine coulomb matrix eig 9', 'sine coulomb matrix eig 10', 'sine coulomb matrix eig 11']} fold_3 {'best_pipeline': ['(stackingestimator, StackingEstimator(estimator=RandomForestClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null, max_features=0.5,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=3,\\n min_samples_split=8, min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null, oob_score=false,\\n random_state=null, verbose=0, warm_start=false)))', '(variancethreshold, VarianceThreshold(threshold=0.2))', '(randomforestclassifier, RandomForestClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null,\\n max_features=0.6000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=3, min_samples_split=9,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData std_dev group', 'PymatgenData mean block', 'PymatgenData range mendeleev_no', 'PymatgenData mean mendeleev_no', 'PymatgenData minimum thermal_conductivity', 'PymatgenData mean thermal_conductivity', 'PymatgenData std_dev thermal_conductivity', 'MagpieData maximum MendeleevNumber', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 27', 'MatscholarElementData std_dev embedding 32', 'MatscholarElementData mean embedding 40', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 46', 'MatscholarElementData mean embedding 51', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData std_dev embedding 67', 'MatscholarElementData mean embedding 68', 'MatscholarElementData std_dev embedding 68', 'MatscholarElementData mean embedding 72', 'MatscholarElementData std_dev embedding 72', 'MatscholarElementData std_dev embedding 73', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 78', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 95', 'MatscholarElementData mean embedding 99', 'MatscholarElementData std_dev embedding 99', 'MatscholarElementData mean embedding 107', 'MatscholarElementData mean embedding 115', 'MatscholarElementData mean embedding 118', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData mean embedding 128', 'MatscholarElementData mean embedding 139', 'MatscholarElementData mean embedding 171', 'MatscholarElementData mean embedding 179', 'MatscholarElementData std_dev embedding 179', 'MatscholarElementData mean embedding 188', 'MatscholarElementData mean embedding 198', 'DemlData std_dev molar_vol', 'DemlData mean boiling_point', 'DemlData mean first_ioniz', 'DemlData std_dev first_ioniz', 'DemlData mean electronegativity', 'transition metal fraction', 'frac p valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 9', 'sine coulomb matrix eig 10', 'sine coulomb matrix eig 11']} fold_4 {'best_pipeline': ['(featureunion, FeatureUnion(n_jobs=null,\\n transformer_list=[(functiontransformer, FunctionTransformer(accept_sparse=false, check_inverse=true,\\n func=<function copy at 0x2b097cae9d08>, inv_kw_args=null,\\n inverse_func=null, kw_args=null, pass_y=deprecated,\\n validate=null)), (standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))],\\n transformer_weights=null))', '(randomforestclassifier, RandomForestClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null, max_features=0.2,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=6,\\n min_samples_split=9, min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null, oob_score=false,\\n random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData std_dev X', 'PymatgenData mean block', 'PymatgenData maximum mendeleev_no', 'PymatgenData std_dev mendeleev_no', 'PymatgenData mean thermal_conductivity', 'PymatgenData std_dev thermal_conductivity', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 46', 'MatscholarElementData mean embedding 51', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 52', 'MatscholarElementData mean embedding 61', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 68', 'MatscholarElementData mean embedding 72', 'MatscholarElementData std_dev embedding 73', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 78', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 95', 'MatscholarElementData mean embedding 99', 'MatscholarElementData std_dev embedding 99', 'MatscholarElementData mean embedding 107', 'MatscholarElementData mean embedding 115', 'MatscholarElementData mean embedding 118', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData mean embedding 123', 'MatscholarElementData mean embedding 139', 'MatscholarElementData mean embedding 179', 'MatscholarElementData std_dev embedding 179', 'MatscholarElementData mean embedding 188', 'MatscholarElementData mean embedding 198', 'MatscholarElementData std_dev embedding 199', 'DemlData std_dev molar_vol', 'DemlData mean heat_fusion', 'DemlData mean boiling_point', 'DemlData mean first_ioniz', 'DemlData mean electronegativity', 'transition metal fraction', 'avg p valence electrons', 'frac p valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 8', 'sine coulomb matrix eig 9', 'sine coulomb matrix eig 10', 'sine coulomb matrix eig 11']} matbench_perovskites Fold scores fold mae rmse mape* max_error fold_0 0.2159 0.3114 0.2077 2.7651 fold_1 0.1904 0.2857 0.1944 2.6783 fold_2 0.1962 0.2869 0.1933 2.4466 fold_3 0.1992 0.2907 0.2209 3.3116 fold_4 0.2006 0.3023 0.1886 2.4386 Fold score stats metric mean max min std mae 0.2005 0.2159 0.1904 0.0085 rmse 0.2954 0.3114 0.2857 0.0099 mape* 0.2010 0.2209 0.1886 0.0118 max_error 2.7280 3.3116 2.4386 0.3186 Fold parameters fold params dict fold_0 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.45000000000000007, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=20,\\n n_jobs=null, oob_score=false, random_state=null,\\n verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData maximum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'range oxidation state', 'std_dev oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'structural complexity per cell']} fold_1 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(zerocount, ZeroCount())', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.5500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_jobs=null, oob_score=false, random_state=null,\\n verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'range oxidation state', 'std_dev oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'structural complexity per atom']} fold_2 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.03, score_func=<function f_regression at 0x2aaaf35a08c8>))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=9,\\n max_features=0.6500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=10, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.6500000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'range oxidation state', 'std_dev oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'structural complexity per atom']} fold_3 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.95, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=ls, max_depth=7,\\n max_features=0.8, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=19, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=200,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.3, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'range oxidation state', 'std_dev oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'structural complexity per cell']} fold_4 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.05))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.6500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_jobs=null, oob_score=false, random_state=null,\\n verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'std_dev oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'structural complexity per cell']} matbench_phonons Fold scores fold mae rmse mape* max_error fold_0 67.5727 146.7970 0.1079 1151.5570 fold_1 54.0755 100.2097 0.1048 890.4159 fold_2 50.9853 96.5991 0.0931 680.9361 fold_3 59.6458 127.8555 0.1142 926.0969 fold_4 48.5738 77.0626 0.0958 383.1912 Fold score stats metric mean max min std mae 56.1706 67.5727 48.5738 6.7981 rmse 109.7048 146.7970 77.0626 24.6280 mape* 0.1032 0.1142 0.0931 0.0078 max_error 806.4394 1151.5570 383.1912 258.9850 Fold parameters fold params dict fold_0 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.01))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.7500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum Number', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData range Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData minimum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData mean NpUnfilled', 'MagpieData mean NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'minimum oxidation state', 'avg anion electron affinity', 'max ionic char', 'density', 'spacegroup_num', 'ewald_energy', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 4']} fold_1 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.005))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.8, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=ls, max_depth=9,\\n max_features=0.7000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=17,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum Number', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData minimum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'avg anion electron affinity', 'density', 'vpa', 'spacegroup_num', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3']} fold_2 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.8500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum Number', 'MagpieData mode Number', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData range Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData minimum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData mode GSbandgap', 'MagpieData avg_dev SpaceGroupNumber', 'minimum oxidation state', 'avg anion electron affinity', 'max ionic char', 'density', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 2', 'structural complexity per cell']} fold_3 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, true, false,\\n false, true, false, false, false, false,\\n false, false, false, true, false, false, ...],\\n dtype=<class float>, minimum_fraction=0.05, sparse=false,\\n threshold=10))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.6500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_jobs=null, oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum Number', 'MagpieData mode Number', 'MagpieData avg_dev AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData range Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData minimum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev NValence', 'MagpieData maximum NpUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData mode GSbandgap', 'avg anion electron affinity', 'max ionic char', 'density', 'crystal_system_int', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5']} fold_4 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.2))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.5500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=200, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum Number', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData range Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData minimum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NValence', 'MagpieData maximum NpUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData mean NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev SpaceGroupNumber', 'std_dev oxidation state', 'avg anion electron affinity', 'max ionic char', 'density', 'spacegroup_num', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3']} matbench_steels Fold scores fold mae rmse mape* max_error fold_0 109.3058 188.8049 0.0693 1082.7703 fold_1 80.4188 109.2771 0.0569 416.3620 fold_2 83.5360 120.2935 0.0607 424.5913 fold_3 98.7186 136.5898 0.0722 473.4563 fold_4 115.4851 215.1149 0.0891 1142.9223 Fold score stats metric mean max min std mae 97.4929 115.4851 80.4188 13.7919 rmse 154.0161 215.1149 109.2771 40.9531 mape* 0.0696 0.0891 0.0569 0.0112 max_error 708.0205 1142.9223 416.3620 331.6607 Fold parameters fold params dict fold_0 {'best_pipeline': ['(selectfrommodel, SelectFromModel(estimator=ExtraTreesRegressor(bootstrap=false, criterion=mse,\\n max_depth=null,\\n max_features=0.9500000000000002,\\n max_leaf_nodes=null,\\n min_impurity_decrease=0.0,\\n min_impurity_split=null,\\n min_samples_leaf=1,\\n min_samples_split=2,\\n min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null,\\n oob_score=false,\\n random_state=null, verbose=0,\\n warm_start=false),\\n max_features=null, norm_order=1, prefit=false, threshold=0.05))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.9500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData avg_dev AtomicWeight', 'MagpieData mean MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData avg_dev NsValence', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData avg_dev NpUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_amor']} fold_1 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(fastica, FastICA(algorithm=parallel, fun=logcosh, fun_args=null, max_iter=200,\\n n_components=null, random_state=null, tol=0.7000000000000001,\\n w_init=null, whiten=true))', '(kneighborsregressor, KNeighborsRegressor(algorithm=auto, leaf_size=30, metric=minkowski,\\n metric_params=null, n_jobs=null, n_neighbors=4, p=1,\\n weights=distance))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData avg_dev Number', 'MagpieData mean MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData avg_dev NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_amor']} fold_2 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=53,\\n score_func=<function f_regression at 0x2aaaf79a38c8>))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(kneighborsregressor, KNeighborsRegressor(algorithm=auto, leaf_size=30, metric=minkowski,\\n metric_params=null, n_jobs=null, n_neighbors=4, p=2,\\n weights=distance))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData avg_dev Number', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData avg_dev NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter']} fold_3 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(kneighborsregressor, KNeighborsRegressor(algorithm=auto, leaf_size=30, metric=minkowski,\\n metric_params=null, n_jobs=null, n_neighbors=4, p=2,\\n weights=distance))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData avg_dev Number', 'MagpieData mean MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData avg_dev NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter']} fold_4 {'best_pipeline': ['(selectfrommodel, SelectFromModel(estimator=ExtraTreesRegressor(bootstrap=false, criterion=mse,\\n max_depth=null,\\n max_features=0.9500000000000002,\\n max_leaf_nodes=null,\\n min_impurity_decrease=0.0,\\n min_impurity_split=null,\\n min_samples_leaf=1,\\n min_samples_split=2,\\n min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null,\\n oob_score=false,\\n random_state=null, verbose=0,\\n warm_start=false),\\n max_features=null, norm_order=1, prefit=false, threshold=0.05))', '(zerocount, ZeroCount())', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.7500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData avg_dev Number', 'MagpieData mean MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData avg_dev NsValence', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData avg_dev NpUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter']}","title":"matbench_v0.1: AMMExpress v2020"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_v01-ammexpress-v2020","text":"","title":"matbench_v0.1: AMMExpress v2020"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#algorithm-description","text":"Automatminer express v1.03.20200727. Based on automatic featurization, tree-based feature reduction, and genetic-algorithm based AutoML with the TPOT package. All data was generated using the same config (express, default). The automatminer version requirement specifies the versions of many dependent packages, such as matminer, which are required for the algorithm to work in your virtualenv. Raw data download and example notebook available on the matbench repo .","title":"Algorithm description:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#references-in-bibtex-format","text":"('@article{Dunn2020,\\n' ' doi = {10.1038/s41524-020-00406-3},\\n' ' url = {https://doi.org/10.1038/s41524-020-00406-3},\\n' ' year = {2020},\\n' ' month = sep,\\n' ' publisher = {Springer Science and Business Media {LLC}},\\n' ' volume = {6},\\n' ' number = {1},\\n' ' author = {Alexander Dunn and Qi Wang and Alex Ganose and Daniel Dopp and ' 'Anubhav Jain},\\n' ' title = {Benchmarking materials property prediction methods: the Matbench ' 'test set and Automatminer reference algorithm},\\n' ' journal = {npj Computational Materials}\\n' '}')","title":"References (in bibtex format):"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#user-metadata","text":"{'autofeaturizer_kwargs': {'n_jobs': 10, 'preset': 'express'}, 'cleaner_kwargs': {'feature_na_method': 'drop', 'max_na_frac': 0.1, 'na_method_fit': 'mean', 'na_method_transform': 'mean'}, 'learner_kwargs': {'max_eval_time_mins': 20, 'max_time_mins': 1440, 'memory': 'auto', 'n_jobs': 10, 'population_size': 200}, 'learner_name': 'TPOTAdaptor', 'reducer_kwargs': {'reducers': ['corr', 'tree'], 'tree_importance_percentile': 0.99}}","title":"User metadata:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#metadata","text":"Tasks recorded: 13 of 13 total Benchmark is complete? True","title":"Metadata:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#software-requirements","text":"{'python': ['automatminer==1.0.3.20200727', 'matbench==0.1.0']}","title":"Software Requirements"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#task-data","text":"","title":"Task data:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_dielectric","text":"","title":"matbench_dielectric"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-scores","text":"fold mae rmse mape* max_error fold_0 0.2188 0.6855 0.0760 14.6654 fold_1 0.2844 1.0764 0.0899 19.6283 fold_2 0.4257 2.9472 0.0889 59.0112 fold_3 0.3198 2.2782 0.0720 53.5196 fold_4 0.3264 1.6137 0.0987 28.1601","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-score-stats","text":"metric mean max min std mae 0.3150 0.4257 0.2188 0.0672 rmse 1.7202 2.9472 0.6855 0.8140 mape* 0.0851 0.0987 0.0720 0.0098 max_error 34.9969 59.0112 14.6654 17.9782","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-parameters","text":"fold params dict fold_0 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.006, score_func=<function f_regression at 0x2aaaef1a0840>))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.95, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=5,\\n max_features=0.45, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=19, min_samples_split=14,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData mean MeltingT', 'MagpieData mode MeltingT', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NsValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData mode GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'maximum oxidation state', 'std_dev oxidation state', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 19', 'structural complexity per cell', 'crystal_system_tetragonal']} fold_1 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(zerocount, ZeroCount())', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=3,\\n max_features=0.2, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=1.0, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData avg_dev Column', 'MagpieData mean CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NdValence', 'MagpieData range NValence', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData mode GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'range oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 7', 'structural complexity per atom']} fold_2 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.001))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.8, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=9,\\n max_features=0.55, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=19, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=200,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData mean MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Row', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData mode GSmagmom', 'MagpieData minimum SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 8', 'sine coulomb matrix eig 19', 'structural complexity per atom']} fold_3 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.023, score_func=<function f_regression at 0x2aaaef19f950>))', '(standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=7,\\n max_features=0.7500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=16, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=200,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.6500000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData avg_dev Column', 'MagpieData minimum CovalentRadius', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData maximum NdValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData range NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'maximum oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 7', 'structural complexity per atom', 'structural complexity per cell', 'crystal_system_tetragonal']} fold_4 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.034, score_func=<function f_regression at 0x2aaaf35a08c8>))', '(zerocount, ZeroCount())', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.85, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=9,\\n max_features=0.7500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=13, min_samples_split=17,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.7500000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData mean MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData range NValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData mode GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MagpieData mode SpaceGroupNumber', 'maximum oxidation state', 'avg ionic char', 'density', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 7']}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_expt_gap","text":"","title":"matbench_expt_gap"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-scores_1","text":"fold mae rmse mape* max_error fold_0 0.3998 0.9435 0.3372 8.0111 fold_1 0.4061 0.9354 0.3085 8.6887 fold_2 0.4538 1.0955 0.3916 12.7533 fold_3 0.4061 1.0273 0.3019 12.6296 fold_4 0.4150 0.9573 0.4503 6.0779","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-score-stats_1","text":"metric mean max min std mae 0.4161 0.4538 0.3998 0.0194 rmse 0.9918 1.0955 0.9354 0.0612 mape* 0.3579 0.4503 0.3019 0.0560 max_error 9.6321 12.7533 6.0779 2.6411","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-parameters_1","text":"fold params dict fold_0 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.035, score_func=<function f_regression at 0x2aaaf35a18c8>))', '(standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=ls, max_depth=9,\\n max_features=0.35000000000000003, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData avg_dev Number', 'MagpieData range MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData range NdValence', 'MagpieData mean NdValence', 'MagpieData mean NfValence', 'MagpieData minimum NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData avg_dev GSmagmom', 'MagpieData range SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_1 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.046, score_func=<function f_regression at 0x2aaaef19f8c8>))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, true, false, false, false, false, ...],\\n dtype=<class float>, minimum_fraction=0.1, sparse=false,\\n threshold=10))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.85, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=9,\\n max_features=0.8, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=1.0, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData avg_dev Number', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData maximum NdValence', 'MagpieData range NdValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData maximum NpUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_2 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0005))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.5500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData avg_dev Number', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NsValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData range NdValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NfValence', 'MagpieData minimum NValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData avg_dev NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_3 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=85,\\n score_func=<function f_regression at 0x2aaaf39a38c8>))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false, ...],\\n dtype=<class float>, minimum_fraction=0.2, sparse=false,\\n threshold=10))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.8, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=7,\\n max_features=0.9500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=20,\\n min_weight_fraction_leaf=0.0, n_estimators=200,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.8, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData avg_dev AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData range NdValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_4 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0005))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.35000000000000003, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_jobs=null, oob_score=false, random_state=null,\\n verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData avg_dev AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData range NdValence', 'MagpieData mean NdValence', 'MagpieData minimum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber']}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_expt_is_metal","text":"","title":"matbench_expt_is_metal"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-scores_2","text":"fold accuracy balanced_accuracy f1 rocauc fold_0 0.9218 0.9218 0.9205 0.9218 fold_1 0.9157 0.9156 0.9145 0.9156 fold_2 0.9207 0.9207 0.9193 0.9207 fold_3 0.9228 0.9228 0.9223 0.9228 fold_4 0.9238 0.9238 0.9235 0.9238","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-score-stats_2","text":"metric mean max min std accuracy 0.9210 0.9238 0.9157 0.0028 balanced_accuracy 0.9209 0.9238 0.9156 0.0028 f1 0.9200 0.9235 0.9145 0.0031 rocauc 0.9209 0.9238 0.9156 0.0028","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-parameters_2","text":"fold params dict fold_0 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.009000000000000001,\\n score_func=<function f_classif at 0x2aaaf35a16a8>))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false, ...],\\n dtype=<class float>, minimum_fraction=0.2, sparse=false,\\n threshold=10))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=9,\\n max_features=0.25000000000000006,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=13,\\n min_samples_split=5, min_weight_fraction_leaf=0.0,\\n n_estimators=500, n_iter_no_change=null,\\n presort=auto, random_state=null,\\n subsample=0.7500000000000002, tol=0.0001,\\n validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData mean AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData range GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_1 {'best_pipeline': ['(rfe, RFE(estimator=ExtraTreesClassifier(bootstrap=false, class_weight=null,\\n criterion=gini, max_depth=null,\\n max_features=0.15000000000000002,\\n max_leaf_nodes=null,\\n min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=1,\\n min_samples_split=2,\\n min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null,\\n verbose=0, warm_start=false),\\n n_features_to_select=null, step=0.35000000000000003, verbose=0))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=5,\\n max_features=0.8500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=17,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.45000000000000007,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData maximum NpValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_2 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.001))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=9,\\n max_features=0.6500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=10, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9500000000000002,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData maximum NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_3 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.03, score_func=<function f_classif at 0x2aaaf35a0730>))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=7,\\n max_features=0.05, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=16, min_samples_split=17,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.8500000000000002,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData maximum Column', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'max ionic char', 'avg ionic char']} fold_4 {'best_pipeline': ['(rfe, RFE(estimator=ExtraTreesClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null,\\n max_features=0.5500000000000002,\\n max_leaf_nodes=null,\\n min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=1,\\n min_samples_split=2,\\n min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null,\\n verbose=0, warm_start=false),\\n n_features_to_select=null, step=0.15000000000000002, verbose=0))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=9,\\n max_features=0.5500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=7, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.8500000000000002,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData maximum Column', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData maximum NpValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData range GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'max ionic char', 'avg ionic char']}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_glass","text":"","title":"matbench_glass"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-scores_3","text":"fold accuracy balanced_accuracy f1 rocauc fold_0 0.8283 0.8441 0.8697 0.8441 fold_1 0.8125 0.8383 0.8548 0.8383 fold_2 0.8574 0.8546 0.8956 0.8546 fold_3 0.9173 0.8742 0.9437 0.8742 fold_4 0.9375 0.8921 0.9579 0.8921","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-score-stats_3","text":"metric mean max min std accuracy 0.8706 0.9375 0.8125 0.0490 balanced_accuracy 0.8607 0.8921 0.8383 0.0199 f1 0.9043 0.9579 0.8548 0.0404 rocauc 0.8607 0.8921 0.8383 0.0199","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-parameters_3","text":"fold params dict fold_0 {'best_pipeline': ['(selectfrommodel, SelectFromModel(estimator=ExtraTreesClassifier(bootstrap=false,\\n class_weight=null,\\n criterion=entropy,\\n max_depth=null,\\n max_features=0.35000000000000003,\\n max_leaf_nodes=null,\\n min_impurity_decrease=0.0,\\n min_impurity_split=null,\\n min_samples_leaf=1,\\n min_samples_split=2,\\n min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null,\\n oob_score=false,\\n random_state=null, verbose=0,\\n warm_start=false),\\n max_features=null, norm_order=1, prefit=false, threshold=0.0))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=7,\\n max_features=0.05, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9500000000000002,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData avg_dev AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter', 'Miedema_deltaH_amor', 'Miedema_deltaH_ss_min']} fold_1 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))', '(extratreesclassifier, ExtraTreesClassifier(bootstrap=false, class_weight=null, criterion=gini,\\n max_depth=null, max_features=0.35000000000000003,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=1,\\n min_samples_split=2, min_weight_fraction_leaf=0.0,\\n n_estimators=20, n_jobs=null, oob_score=false,\\n random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mean AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter', 'Miedema_deltaH_amor', 'Miedema_deltaH_ss_min']} fold_2 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=74,\\n score_func=<function f_classif at 0x2aaaf35a0730>))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false, ...],\\n dtype=<class float>, minimum_fraction=0.2, sparse=false,\\n threshold=10))', '(extratreesclassifier, ExtraTreesClassifier(bootstrap=false, class_weight=null, criterion=entropy,\\n max_depth=null, max_features=0.6500000000000001,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=1,\\n min_samples_split=2, min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null, oob_score=false,\\n random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData mean Number', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData avg_dev AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter', 'Miedema_deltaH_amor', 'Miedema_deltaH_ss_min']} fold_3 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=9,\\n max_features=0.15000000000000002,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=13,\\n min_samples_split=17, min_weight_fraction_leaf=0.0,\\n n_estimators=1000, n_iter_no_change=null,\\n presort=auto, random_state=null,\\n subsample=0.5500000000000002, tol=0.0001,\\n validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData maximum AtomicWeight', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter', 'Miedema_deltaH_amor', 'Miedema_deltaH_ss_min']} fold_4 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))', '(gradientboostingclassifier, GradientBoostingClassifier(criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=deviance, max_depth=7,\\n max_features=0.45000000000000007,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=16,\\n min_samples_split=5, min_weight_fraction_leaf=0.0,\\n n_estimators=500, n_iter_no_change=null,\\n presort=auto, random_state=null,\\n subsample=0.7500000000000002, tol=0.0001,\\n validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData maximum AtomicWeight', 'MagpieData range AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData maximum NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter', 'Miedema_deltaH_amor', 'Miedema_deltaH_ss_min']}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_jdft2d","text":"","title":"matbench_jdft2d"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-scores_4","text":"fold mae rmse mape* max_error fold_0 29.5070 57.7719 18.9726 362.2752 fold_1 44.3036 98.1137 0.3191 551.7742 fold_2 54.4690 164.0162 0.5117 847.0618 fold_3 28.0759 55.8345 0.2371 316.2185 fold_4 42.8931 156.9938 0.5429 1552.9102","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-score-stats_4","text":"metric mean max min std mae 39.8497 54.4690 28.0759 9.8835 rmse 106.5460 164.0162 55.8345 46.6251 mape* 4.1167 18.9726 0.2371 7.4289 max_error 726.0480 1552.9102 316.2185 453.6535","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-parameters_4","text":"fold params dict fold_0 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.8, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=lad, max_depth=3,\\n max_features=0.7000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.7000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData avg_dev Number', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData minimum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Column', 'MagpieData mean Row', 'MagpieData maximum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NValence', 'MagpieData mean NpUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mode GSmagmom', 'MagpieData minimum SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MagpieData mode SpaceGroupNumber', 'avg anion electron affinity', 'density', 'vpa', 'packing fraction', 'crystal_system_int', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'structural complexity per cell']} fold_1 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=40,\\n score_func=<function f_regression at 0x2aaaf35a08c8>))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=lad, max_depth=7,\\n max_features=0.15000000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9500000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData avg_dev Number', 'MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData maximum AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData avg_dev Row', 'MagpieData maximum CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData maximum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData mode NdUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mode GSmagmom', 'MagpieData minimum SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MagpieData mode SpaceGroupNumber', 'maximum oxidation state', 'std_dev oxidation state', 'avg anion electron affinity', 'density', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'structural complexity per cell']} fold_2 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=62,\\n score_func=<function f_regression at 0x2aaaf35a08c8>))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n true, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, true, false, false, false],\\n dtype=<class float>, minimum_fraction=0.1, sparse=false,\\n threshold=10))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.95, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=lad, max_depth=3,\\n max_features=0.4, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.7000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData avg_dev Number', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData minimum MeltingT', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData maximum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData range NpUnfilled', 'MagpieData mode NpUnfilled', 'MagpieData mean NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData minimum SpaceGroupNumber', 'MagpieData maximum SpaceGroupNumber', 'MagpieData range SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'std_dev oxidation state', 'avg anion electron affinity', 'density', 'vpa', 'packing fraction', 'crystal_system_int', 'is_centrosymmetric', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'structural complexity per atom', 'structural complexity per cell']} fold_3 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=82,\\n score_func=<function f_regression at 0x2aab561f6620>))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.85, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=5,\\n max_features=0.4, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=200,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=1.0, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData maximum Number', 'MagpieData avg_dev Number', 'MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData maximum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NfValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mode GSbandgap', 'MagpieData minimum SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MagpieData mode SpaceGroupNumber', 'std_dev oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'structural complexity per atom', 'structural complexity per cell']} fold_4 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=62,\\n score_func=<function f_regression at 0x2aaaf35a08c8>))', '(zerocount, ZeroCount())', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.9, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=lad, max_depth=5,\\n max_features=0.55, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=4, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.8500000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData avg_dev Number', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mode MeltingT', 'MagpieData range Column', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData range Row', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData maximum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mode GSmagmom', 'MagpieData minimum SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'avg anion electron affinity', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'structural complexity per atom', 'structural complexity per cell', 'crystal_system_tetragonal']}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_log_gvrh","text":"","title":"matbench_log_gvrh"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-scores_5","text":"fold mae rmse mape* max_error fold_0 0.0891 0.1270 0.0692 1.1580 fold_1 0.0852 0.1261 0.0666 1.0887 fold_2 0.0849 0.1261 0.0668 0.9631 fold_3 0.0884 0.1279 0.0670 0.8959 fold_4 0.0894 0.1313 0.0690 0.9810","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-score-stats_5","text":"metric mean max min std mae 0.0874 0.0894 0.0849 0.0020 rmse 0.1277 0.1313 0.1261 0.0019 mape* 0.0677 0.0692 0.0666 0.0012 max_error 1.0173 1.1580 0.8959 0.0937","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-parameters_5","text":"fold params dict fold_0 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.2))', '(zerocount, ZeroCount())', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.99, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=ls, max_depth=7,\\n max_features=0.4, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.6500000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData mean AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3']} fold_1 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.01))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=5,\\n max_features=1.0, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=19, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.55, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 3']} fold_2 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.01, score_func=<function f_regression at 0x2aaaef19e8c8>))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.25000000000000006, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_jobs=null, oob_score=false, random_state=null,\\n verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData mean NdValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 3']} fold_3 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=ls, max_depth=9,\\n max_features=0.1, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=19, min_samples_split=14,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.8, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData mean AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 3']} fold_4 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=96,\\n score_func=<function f_regression at 0x2aaaf35a08c8>))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.9500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=200, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData mean Column', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 3']}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_log_kvrh","text":"","title":"matbench_log_kvrh"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-scores_6","text":"fold mae rmse mape* max_error fold_0 0.0639 0.1179 0.0417 1.4823 fold_1 0.0659 0.1231 0.0432 1.2686 fold_2 0.0627 0.1115 0.0411 1.1316 fold_3 0.0668 0.1217 0.0464 1.1890 fold_4 0.0640 0.1172 0.0417 1.4335","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-score-stats_6","text":"metric mean max min std mae 0.0647 0.0668 0.0627 0.0015 rmse 0.1183 0.1231 0.1115 0.0041 mape* 0.0428 0.0464 0.0411 0.0019 max_error 1.3010 1.4823 1.1316 0.1362","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-parameters_6","text":"fold params dict fold_0 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.032, score_func=<function f_regression at 0x2aaaf35a2840>))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.8500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=200, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData minimum Column', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData minimum NValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData maximum SpaceGroupNumber', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0']} fold_1 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.029, score_func=<function f_regression at 0x2aaaf35a08c8>))', '(zerocount, ZeroCount())', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.9, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=9,\\n max_features=0.7000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=13, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData minimum Column', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData minimum NValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'density', 'vpa', 'packing fraction', 'sine coulomb matrix eig 0']} fold_2 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.2))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false],\\n dtype=<class float>, minimum_fraction=0.15, sparse=false,\\n threshold=10))', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.35000000000000003, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=200,\\n n_jobs=null, oob_score=false, random_state=null,\\n verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData minimum Column', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'density', 'vpa', 'packing fraction', 'sine coulomb matrix eig 2']} fold_3 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.016, score_func=<function f_regression at 0x2aaaf79a28c8>))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, false, false],\\n dtype=<class float>, minimum_fraction=0.25, sparse=false,\\n threshold=10))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.9500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=200, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData minimum Column', 'MagpieData mean Column', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData minimum NValence', 'MagpieData mean NValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData maximum SpaceGroupNumber', 'density', 'vpa', 'packing fraction', 'spacegroup_num']} fold_4 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.6500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData maximum MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData minimum Column', 'MagpieData mean Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mean NsValence', 'MagpieData mean NpValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean SpaceGroupNumber', 'density', 'vpa', 'packing fraction', 'sine coulomb matrix eig 0']}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_mp_e_form","text":"","title":"matbench_mp_e_form"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-scores_7","text":"fold mae rmse mape* max_error fold_0 0.1586 0.2508 1.0829 4.0713 fold_1 0.2026 0.2955 0.9253 5.8108 fold_2 0.1473 0.2256 0.7722 2.7696 fold_3 0.2080 0.3062 1.3958 5.5190 fold_4 0.1467 0.2226 0.8028 3.3888","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-score-stats_7","text":"metric mean max min std mae 0.1726 0.2080 0.1467 0.0270 rmse 0.2602 0.3062 0.2226 0.0348 mape* 0.9958 1.3958 0.7722 0.2280 max_error 4.3119 5.8108 2.7696 1.1826","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-parameters_7","text":"fold params dict fold_0 {'best_pipeline': ['(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.5, loss=huber, max_depth=5,\\n max_features=0.15000000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=12, min_samples_split=15,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto, random_state=null,\\n subsample=0.7500000000000001, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['PymatgenData range X', 'PymatgenData std_dev X', 'PymatgenData mean melting_point', 'MagpieData mode MendeleevNumber', 'MagpieData avg_dev MeltingT', 'MagpieData maximum Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MatscholarElementData mean embedding 30', 'MatscholarElementData mean embedding 31', 'MatscholarElementData range embedding 41', 'MatscholarElementData minimum embedding 51', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 67', 'MatscholarElementData minimum embedding 72', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 79', 'MatscholarElementData mean embedding 80', 'MatscholarElementData minimum embedding 104', 'MatscholarElementData mean embedding 157', 'MatscholarElementData maximum embedding 166', 'MatscholarElementData mean embedding 166', 'MatscholarElementData mean embedding 176', 'DemlData mean boiling_point', 'O', '2-norm', 'frac d valence electrons', 'density', 'vpa']} fold_1 {'best_pipeline': ['(polynomialfeatures, PolynomialFeatures(degree=2, include_bias=false, interaction_only=false))', '(pca, PCA(copy=true, iterated_power=3, n_components=null, random_state=null,\\n svd_solver=randomized, tol=0.0, whiten=false))', '(lassolarscv, LassoLarsCV(copy_X=true, cv=warn, eps=2.220446049250313e-16,\\n fit_intercept=true, max_iter=500, max_n_alphas=1000, n_jobs=null,\\n normalize=true, positive=false, precompute=auto, verbose=false))'], 'features_reduced': ['PymatgenData range X', 'PymatgenData std_dev X', 'PymatgenData mean melting_point', 'PymatgenData std_dev melting_point', 'MagpieData mode MendeleevNumber', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData maximum Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MatscholarElementData mean embedding 31', 'MatscholarElementData mean embedding 32', 'MatscholarElementData range embedding 41', 'MatscholarElementData minimum embedding 51', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 67', 'MatscholarElementData minimum embedding 72', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 79', 'MatscholarElementData mean embedding 80', 'MatscholarElementData minimum embedding 86', 'MatscholarElementData mean embedding 157', 'MatscholarElementData mean embedding 166', 'MatscholarElementData mean embedding 176', 'MatscholarElementData mean embedding 188', 'DemlData mean boiling_point', 'O', '2-norm', 'frac d valence electrons', 'density', 'vpa']} fold_2 {'best_pipeline': ['(stackingestimator, StackingEstimator(estimator=GradientBoostingRegressor(alpha=0.9, criterion=friedman_mse, init=null,\\n learning_rate=0.5, loss=huber, max_depth=4,\\n max_features=0.6000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_...e=0.7500000000000001, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false)))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(polynomialfeatures, PolynomialFeatures(degree=2, include_bias=false, interaction_only=false))', '(ridgecv, RidgeCV(alphas=array([ 0.1, 1. , 10. ]), cv=null, fit_intercept=true,\\n gcv_mode=null, normalize=false, scoring=null, store_cv_values=false))'], 'features_reduced': ['PymatgenData range X', 'PymatgenData std_dev X', 'PymatgenData mean melting_point', 'MagpieData mode MendeleevNumber', 'MagpieData avg_dev MeltingT', 'MagpieData maximum Column', 'MagpieData avg_dev Column', 'MagpieData mode Column', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MatscholarElementData mean embedding 8', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 68', 'MatscholarElementData minimum embedding 72', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 79', 'MatscholarElementData mean embedding 80', 'MatscholarElementData std_dev embedding 90', 'MatscholarElementData mean embedding 157', 'MatscholarElementData mean embedding 166', 'MatscholarElementData mean embedding 176', 'MatscholarElementData mean embedding 188', 'DemlData mean boiling_point', 'O', '2-norm', 'frac d valence electrons', 'density', 'vpa', 'packing fraction']} fold_3 {'best_pipeline': ['(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(selectfwe, SelectFwe(alpha=0.027, score_func=<function f_regression at 0x2b2eb18422f0>))', '(stackingestimator, StackingEstimator(estimator=GradientBoostingRegressor(alpha=0.8, criterion=friedman_mse, init=null,\\n learning_rate=0.5, loss=huber, max_depth=3,\\n max_features=0.1, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=14, min_sa...e=0.6000000000000001, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false)))', '(ridgecv, RidgeCV(alphas=array([ 0.1, 1. , 10. ]), cv=null, fit_intercept=true,\\n gcv_mode=null, normalize=false, scoring=null, store_cv_values=false))'], 'features_reduced': ['PymatgenData range X', 'PymatgenData std_dev X', 'PymatgenData mean melting_point', 'MagpieData minimum MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData avg_dev MeltingT', 'MagpieData maximum Column', 'MagpieData avg_dev Column', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MatscholarElementData range embedding 41', 'MatscholarElementData mean embedding 41', 'MatscholarElementData minimum embedding 51', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 67', 'MatscholarElementData mean embedding 68', 'MatscholarElementData minimum embedding 72', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 79', 'MatscholarElementData mean embedding 80', 'MatscholarElementData minimum embedding 104', 'MatscholarElementData mean embedding 157', 'MatscholarElementData maximum embedding 166', 'MatscholarElementData mean embedding 176', 'O', '2-norm', 'frac d valence electrons', 'density', 'vpa']} fold_4 {'best_pipeline': ['(xgbregressor, XGBRegressor(base_score=0.5, booster=gbtree, colsample_bylevel=1,\\n colsample_bytree=1, gamma=0, learning_rate=0.5, max_delta_step=0,\\n max_depth=5, min_child_weight=14, missing=null, n_estimators=100,\\n n_jobs=1, nthread=1, objective=reg:linear, random_state=0,\\n reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=null,\\n silent=true, subsample=0.9000000000000001))'], 'features_reduced': ['PymatgenData range X', 'PymatgenData std_dev X', 'PymatgenData mean melting_point', 'MagpieData mode MendeleevNumber', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData maximum Column', 'MagpieData avg_dev Column', 'MagpieData mode CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MatscholarElementData mean embedding 8', 'MatscholarElementData mean embedding 30', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 51', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData mean embedding 65', 'MatscholarElementData minimum embedding 72', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 79', 'MatscholarElementData mean embedding 80', 'MatscholarElementData minimum embedding 86', 'MatscholarElementData minimum embedding 104', 'MatscholarElementData mean embedding 157', 'MatscholarElementData mean embedding 166', 'MatscholarElementData mean embedding 176', 'MatscholarElementData range embedding 182', 'MatscholarElementData mean embedding 188', 'DemlData mean boiling_point', 'O', '2-norm', 'frac d valence electrons', 'density', 'vpa', 'packing fraction']}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_mp_gap","text":"","title":"matbench_mp_gap"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-scores_8","text":"fold mae rmse mape* max_error fold_0 0.2799 0.5481 3.5712 5.4792 fold_1 0.2850 0.5671 3.1533 6.9105 fold_2 0.2724 0.5477 4.6097 6.2045 fold_3 0.2909 0.5710 10.0191 6.4590 fold_4 0.2837 0.5714 6.8322 5.5333","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-score-stats_8","text":"metric mean max min std mae 0.2824 0.2909 0.2724 0.0061 rmse 0.5611 0.5714 0.5477 0.0109 mape* 5.6371 10.0191 3.1533 2.5347 max_error 6.1173 6.9105 5.4792 0.5480","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-parameters_8","text":"fold params dict fold_0 {'best_pipeline': ['(stackingestimator-1, StackingEstimator(estimator=RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.4, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=6, min_samples_split=10,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(stackingestimator-2, StackingEstimator(estimator=ExtraTreesRegressor(bootstrap=true, criterion=mse, max_depth=null,\\n max_features=0.55, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=6, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(lassolarscv, LassoLarsCV(copy_X=true, cv=warn, eps=2.220446049250313e-16,\\n fit_intercept=true, max_iter=500, max_n_alphas=1000, n_jobs=null,\\n normalize=true, positive=false, precompute=auto, verbose=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData std_dev group', 'PymatgenData maximum mendeleev_no', 'PymatgenData mean mendeleev_no', 'PymatgenData std_dev thermal_conductivity', 'MagpieData avg_dev MeltingT', 'MagpieData range Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev GSbandgap', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData std_dev embedding 2', 'MatscholarElementData minimum embedding 40', 'MatscholarElementData minimum embedding 41', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 45', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData std_dev embedding 60', 'MatscholarElementData minimum embedding 64', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 71', 'MatscholarElementData std_dev embedding 72', 'MatscholarElementData maximum embedding 82', 'MatscholarElementData mean embedding 82', 'MatscholarElementData mean embedding 93', 'MatscholarElementData maximum embedding 114', 'MatscholarElementData mean embedding 116', 'MatscholarElementData std_dev embedding 119', 'MatscholarElementData std_dev embedding 123', 'MatscholarElementData mean embedding 143', 'MatscholarElementData mean embedding 148', 'MatscholarElementData mean embedding 163', 'MatscholarElementData std_dev embedding 163', 'MatscholarElementData mean embedding 168', 'MatscholarElementData std_dev embedding 170', 'MatscholarElementData mean embedding 179', 'MatscholarElementData minimum embedding 181', 'MatscholarElementData mean embedding 181', 'MatscholarElementData std_dev embedding 192', 'MatscholarElementData mean embedding 194', 'MatscholarElementData mean embedding 198', 'MatscholarElementData maximum embedding 199', 'DemlData std_dev heat_fusion', 'DemlData minimum boiling_point', 'DemlData mean boiling_point', 'DemlData mean electronegativity', 'DemlData std_dev electronegativity', '2-norm', 'transition metal fraction', 'frac p valence electrons', 'frac d valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'HOMO_character_d']} fold_1 {'best_pipeline': ['(stackingestimator-1, StackingEstimator(estimator=RandomForestRegressor(bootstrap=true, criterion=mse, max_depth=null,\\n max_features=0.35000000000000003, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=16, min_samples_split=6,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(stackingestimator-2, StackingEstimator(estimator=RandomForestRegressor(bootstrap=true, criterion=mse, max_depth=null,\\n max_features=0.35000000000000003, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=6, min_samples_split=15,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(decisiontreeregressor, DecisionTreeRegressor(criterion=mse, max_depth=9, max_features=null,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=8,\\n min_samples_split=2, min_weight_fraction_leaf=0.0,\\n presort=false, random_state=null, splitter=best))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData std_dev X', 'PymatgenData mean block', 'PymatgenData maximum mendeleev_no', 'PymatgenData mean mendeleev_no', 'PymatgenData std_dev thermal_conductivity', 'PymatgenData std_dev melting_point', 'MagpieData range MeltingT', 'MagpieData range Column', 'MagpieData mean Row', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData avg_dev GSbandgap', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 2', 'MatscholarElementData std_dev embedding 2', 'MatscholarElementData minimum embedding 41', 'MatscholarElementData range embedding 41', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 45', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData minimum embedding 64', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 66', 'MatscholarElementData mean embedding 71', 'MatscholarElementData mean embedding 79', 'MatscholarElementData maximum embedding 82', 'MatscholarElementData mean embedding 82', 'MatscholarElementData std_dev embedding 83', 'MatscholarElementData mean embedding 90', 'MatscholarElementData mean embedding 93', 'MatscholarElementData minimum embedding 112', 'MatscholarElementData mean embedding 116', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData std_dev embedding 119', 'MatscholarElementData std_dev embedding 122', 'MatscholarElementData mean embedding 123', 'MatscholarElementData std_dev embedding 123', 'MatscholarElementData mean embedding 132', 'MatscholarElementData std_dev embedding 141', 'MatscholarElementData mean embedding 143', 'MatscholarElementData mean embedding 148', 'MatscholarElementData mean embedding 156', 'MatscholarElementData mean embedding 163', 'MatscholarElementData std_dev embedding 163', 'MatscholarElementData minimum embedding 166', 'MatscholarElementData mean embedding 168', 'MatscholarElementData mean embedding 179', 'MatscholarElementData mean embedding 188', 'MatscholarElementData std_dev embedding 192', 'MatscholarElementData mean embedding 194', 'MatscholarElementData mean embedding 195', 'MatscholarElementData mean embedding 198', 'MatscholarElementData maximum embedding 199', 'DemlData minimum boiling_point', 'DemlData mean boiling_point', 'DemlData minimum heat_cap', 'DemlData mean electronegativity', '2-norm', 'transition metal fraction', 'frac p valence electrons', 'frac d valence electrons', 'density', 'vpa', 'packing fraction', 'sine coulomb matrix eig 0', 'HOMO_character_d']} fold_2 {'best_pipeline': ['(stackingestimator-1, StackingEstimator(estimator=RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.45, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=9, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(stackingestimator-2, StackingEstimator(estimator=RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.3, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=16, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.8, max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=1, min_samples_split=3,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['HOMO_energy', 'LUMO_energy', 'gap_AO', 'PymatgenData std_dev X', 'PymatgenData mean block', 'PymatgenData maximum mendeleev_no', 'PymatgenData std_dev thermal_conductivity', 'MagpieData range MeltingT', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev NpValence', 'MagpieData mean NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 2', 'MatscholarElementData std_dev embedding 2', 'MatscholarElementData maximum embedding 10', 'MatscholarElementData minimum embedding 41', 'MatscholarElementData range embedding 41', 'MatscholarElementData mean embedding 41', 'MatscholarElementData mean embedding 45', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData mean embedding 63', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 71', 'MatscholarElementData std_dev embedding 72', 'MatscholarElementData std_dev embedding 78', 'MatscholarElementData mean embedding 82', 'MatscholarElementData std_dev embedding 83', 'MatscholarElementData mean embedding 91', 'MatscholarElementData mean embedding 93', 'MatscholarElementData std_dev embedding 97', 'MatscholarElementData mean embedding 116', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData std_dev embedding 119', 'MatscholarElementData mean embedding 123', 'MatscholarElementData std_dev embedding 123', 'MatscholarElementData minimum embedding 130', 'MatscholarElementData std_dev embedding 130', 'MatscholarElementData mean embedding 143', 'MatscholarElementData mean embedding 163', 'MatscholarElementData minimum embedding 166', 'MatscholarElementData mean embedding 168', 'MatscholarElementData std_dev embedding 170', 'MatscholarElementData mean embedding 181', 'MatscholarElementData std_dev embedding 192', 'MatscholarElementData mean embedding 194', 'MatscholarElementData mean embedding 198', 'MatscholarElementData maximum embedding 199', 'DemlData minimum molar_vol', 'DemlData std_dev heat_fusion', 'DemlData minimum boiling_point', 'DemlData mean boiling_point', 'DemlData mean heat_cap', 'DemlData mean electronegativity', '2-norm', 'transition metal fraction', 'frac p valence electrons', 'frac d valence electrons', 'density', 'vpa', 'packing fraction', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'HOMO_character_d']} fold_3 {'best_pipeline': ['(stackingestimator-1, StackingEstimator(estimator=ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.45, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=19, min_samples_split=20,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(stackingestimator-2, StackingEstimator(estimator=RandomForestRegressor(bootstrap=true, criterion=mse, max_depth=null,\\n max_features=0.15000000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=9, min_samples_split=5,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.7000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=13, min_samples_split=7,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData std_dev X', 'PymatgenData mean block', 'PymatgenData maximum mendeleev_no', 'PymatgenData mean mendeleev_no', 'PymatgenData std_dev thermal_conductivity', 'MagpieData avg_dev MeltingT', 'MagpieData range Column', 'MagpieData mean Row', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 2', 'MatscholarElementData std_dev embedding 2', 'MatscholarElementData minimum embedding 41', 'MatscholarElementData range embedding 41', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 42', 'MatscholarElementData mean embedding 51', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData std_dev embedding 60', 'MatscholarElementData minimum embedding 64', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 71', 'MatscholarElementData mean embedding 72', 'MatscholarElementData std_dev embedding 72', 'MatscholarElementData std_dev embedding 73', 'MatscholarElementData maximum embedding 82', 'MatscholarElementData mean embedding 82', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 116', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData std_dev embedding 119', 'MatscholarElementData mean embedding 123', 'MatscholarElementData std_dev embedding 123', 'MatscholarElementData mean embedding 143', 'MatscholarElementData mean embedding 148', 'MatscholarElementData std_dev embedding 149', 'MatscholarElementData mean embedding 163', 'MatscholarElementData minimum embedding 166', 'MatscholarElementData mean embedding 168', 'MatscholarElementData std_dev embedding 170', 'MatscholarElementData mean embedding 179', 'MatscholarElementData std_dev embedding 192', 'MatscholarElementData mean embedding 194', 'MatscholarElementData mean embedding 195', 'MatscholarElementData mean embedding 198', 'MatscholarElementData maximum embedding 199', 'DemlData std_dev heat_fusion', 'DemlData minimum boiling_point', 'DemlData mean boiling_point', 'DemlData minimum heat_cap', 'DemlData mean electronegativity', '2-norm', 'transition metal fraction', 'frac p valence electrons', 'frac d valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'HOMO_character_d']} fold_4 {'best_pipeline': ['(stackingestimator-1, StackingEstimator(estimator=GradientBoostingRegressor(alpha=0.85, criterion=friedman_mse, init=null,\\n learning_rate=0.01, loss=lad, max_depth=1,\\n max_features=0.45, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=11, min_s...e=0.9500000000000001, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false)))', '(stackingestimator-2, StackingEstimator(estimator=RandomForestRegressor(bootstrap=true, criterion=mse, max_depth=null,\\n max_features=0.6000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=9, min_samples_split=16,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false)))', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.45, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=3, min_samples_split=4,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData std_dev X', 'PymatgenData mean group', 'PymatgenData mean block', 'PymatgenData maximum mendeleev_no', 'PymatgenData range mendeleev_no', 'PymatgenData mean mendeleev_no', 'PymatgenData std_dev thermal_conductivity', 'PymatgenData std_dev melting_point', 'MagpieData range Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MatscholarElementData mean embedding 2', 'MatscholarElementData std_dev embedding 2', 'MatscholarElementData minimum embedding 40', 'MatscholarElementData minimum embedding 41', 'MatscholarElementData range embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 49', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData maximum embedding 58', 'MatscholarElementData minimum embedding 64', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 66', 'MatscholarElementData mean embedding 71', 'MatscholarElementData std_dev embedding 72', 'MatscholarElementData maximum embedding 82', 'MatscholarElementData mean embedding 82', 'MatscholarElementData mean embedding 90', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 116', 'MatscholarElementData std_dev embedding 119', 'MatscholarElementData std_dev embedding 123', 'MatscholarElementData std_dev embedding 130', 'MatscholarElementData mean embedding 143', 'MatscholarElementData std_dev embedding 145', 'MatscholarElementData mean embedding 148', 'MatscholarElementData std_dev embedding 149', 'MatscholarElementData mean embedding 163', 'MatscholarElementData std_dev embedding 166', 'MatscholarElementData mean embedding 168', 'MatscholarElementData mean embedding 179', 'MatscholarElementData mean embedding 181', 'MatscholarElementData std_dev embedding 192', 'MatscholarElementData mean embedding 194', 'MatscholarElementData mean embedding 198', 'MatscholarElementData maximum embedding 199', 'DemlData std_dev heat_fusion', 'DemlData mean boiling_point', 'DemlData minimum heat_cap', 'DemlData range heat_cap', 'DemlData mean electronegativity', '2-norm', 'transition metal fraction', 'frac p valence electrons', 'frac d valence electrons', 'density', 'vpa', 'packing fraction', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'HOMO_character_d']}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_mp_is_metal","text":"","title":"matbench_mp_is_metal"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-scores_9","text":"fold accuracy balanced_accuracy f1 rocauc fold_0 0.9133 0.9094 0.8982 0.9094 fold_1 0.9123 0.9086 0.8972 0.9086 fold_2 0.9129 0.9089 0.8976 0.9089 fold_3 0.9146 0.9108 0.8998 0.9108 fold_4 0.9129 0.9086 0.8974 0.9086","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-score-stats_9","text":"metric mean max min std accuracy 0.9132 0.9146 0.9123 0.0008 balanced_accuracy 0.9093 0.9108 0.9086 0.0008 f1 0.8981 0.8998 0.8972 0.0009 rocauc 0.9093 0.9108 0.9086 0.0008","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-parameters_9","text":"fold params dict fold_0 {'best_pipeline': ['(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(randomforestclassifier, RandomForestClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null,\\n max_features=0.35000000000000003, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=2, min_samples_split=20,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData range X', 'PymatgenData std_dev group', 'PymatgenData mean block', 'PymatgenData maximum mendeleev_no', 'PymatgenData mean mendeleev_no', 'PymatgenData std_dev mendeleev_no', 'PymatgenData mean thermal_conductivity', 'PymatgenData std_dev thermal_conductivity', 'MagpieData maximum MendeleevNumber', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 2', 'MatscholarElementData mean embedding 4', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 46', 'MatscholarElementData mean embedding 51', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 67', 'MatscholarElementData std_dev embedding 67', 'MatscholarElementData mean embedding 68', 'MatscholarElementData std_dev embedding 73', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 78', 'MatscholarElementData mean embedding 91', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 99', 'MatscholarElementData std_dev embedding 99', 'MatscholarElementData mean embedding 118', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData std_dev embedding 121', 'MatscholarElementData mean embedding 123', 'MatscholarElementData mean embedding 139', 'MatscholarElementData mean embedding 149', 'MatscholarElementData mean embedding 179', 'MatscholarElementData std_dev embedding 179', 'MatscholarElementData mean embedding 188', 'MatscholarElementData mean embedding 198', 'DemlData mean molar_vol', 'DemlData std_dev molar_vol', 'DemlData std_dev melting_point', 'DemlData mean boiling_point', 'DemlData mean first_ioniz', 'DemlData mean electronegativity', 'transition metal fraction', 'frac p valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 9', 'sine coulomb matrix eig 10', 'sine coulomb matrix eig 11']} fold_1 {'best_pipeline': ['(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(randomforestclassifier, RandomForestClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null, max_features=0.55,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=4,\\n min_samples_split=5, min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null, oob_score=false,\\n random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData range X', 'PymatgenData std_dev X', 'PymatgenData std_dev group', 'PymatgenData mean block', 'PymatgenData mean mendeleev_no', 'PymatgenData std_dev mendeleev_no', 'PymatgenData mean thermal_conductivity', 'PymatgenData std_dev thermal_conductivity', 'MagpieData maximum MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData avg_dev Column', 'MagpieData mean Electronegativity', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData avg_dev GSvolume_pa', 'MatscholarElementData mean embedding 4', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 46', 'MatscholarElementData mean embedding 51', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData mean embedding 61', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 67', 'MatscholarElementData mean embedding 68', 'MatscholarElementData mean embedding 72', 'MatscholarElementData std_dev embedding 72', 'MatscholarElementData std_dev embedding 73', 'MatscholarElementData mean embedding 78', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 99', 'MatscholarElementData std_dev embedding 99', 'MatscholarElementData mean embedding 118', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData mean embedding 123', 'MatscholarElementData mean embedding 139', 'MatscholarElementData mean embedding 149', 'MatscholarElementData std_dev embedding 154', 'MatscholarElementData mean embedding 168', 'MatscholarElementData mean embedding 171', 'MatscholarElementData mean embedding 179', 'MatscholarElementData std_dev embedding 179', 'MatscholarElementData mean embedding 188', 'MatscholarElementData mean embedding 198', 'MatscholarElementData std_dev embedding 199', 'DemlData mean molar_vol', 'DemlData std_dev molar_vol', 'DemlData mean melting_point', 'DemlData mean boiling_point', 'DemlData mean first_ioniz', 'DemlData mean electronegativity', 'transition metal fraction', 'avg p valence electrons', 'frac p valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 8', 'sine coulomb matrix eig 9', 'sine coulomb matrix eig 10', 'sine coulomb matrix eig 11']} fold_2 {'best_pipeline': ['(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(randomforestclassifier, RandomForestClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null, max_features=0.5,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=1,\\n min_samples_split=18, min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null, oob_score=false,\\n random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData mean block', 'PymatgenData std_dev mendeleev_no', 'PymatgenData minimum thermal_conductivity', 'PymatgenData mean thermal_conductivity', 'PymatgenData std_dev thermal_conductivity', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev Column', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData mean NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 4', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 46', 'MatscholarElementData mean embedding 51', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 56', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 67', 'MatscholarElementData mean embedding 68', 'MatscholarElementData mean embedding 72', 'MatscholarElementData std_dev embedding 73', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 79', 'MatscholarElementData mean embedding 87', 'MatscholarElementData mean embedding 91', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 95', 'MatscholarElementData mean embedding 99', 'MatscholarElementData std_dev embedding 99', 'MatscholarElementData mean embedding 118', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData mean embedding 123', 'MatscholarElementData mean embedding 139', 'MatscholarElementData mean embedding 155', 'MatscholarElementData mean embedding 179', 'MatscholarElementData std_dev embedding 179', 'MatscholarElementData mean embedding 188', 'MatscholarElementData mean embedding 198', 'DemlData std_dev molar_vol', 'DemlData mean melting_point', 'DemlData mean boiling_point', 'DemlData mean first_ioniz', 'DemlData mean electronegativity', 'transition metal fraction', 'avg p valence electrons', 'frac p valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 8', 'sine coulomb matrix eig 9', 'sine coulomb matrix eig 10', 'sine coulomb matrix eig 11']} fold_3 {'best_pipeline': ['(stackingestimator, StackingEstimator(estimator=RandomForestClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null, max_features=0.5,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=3,\\n min_samples_split=8, min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null, oob_score=false,\\n random_state=null, verbose=0, warm_start=false)))', '(variancethreshold, VarianceThreshold(threshold=0.2))', '(randomforestclassifier, RandomForestClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null,\\n max_features=0.6000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=3, min_samples_split=9,\\n min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData std_dev group', 'PymatgenData mean block', 'PymatgenData range mendeleev_no', 'PymatgenData mean mendeleev_no', 'PymatgenData minimum thermal_conductivity', 'PymatgenData mean thermal_conductivity', 'PymatgenData std_dev thermal_conductivity', 'MagpieData maximum MendeleevNumber', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 27', 'MatscholarElementData std_dev embedding 32', 'MatscholarElementData mean embedding 40', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 46', 'MatscholarElementData mean embedding 51', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData std_dev embedding 67', 'MatscholarElementData mean embedding 68', 'MatscholarElementData std_dev embedding 68', 'MatscholarElementData mean embedding 72', 'MatscholarElementData std_dev embedding 72', 'MatscholarElementData std_dev embedding 73', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 78', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 95', 'MatscholarElementData mean embedding 99', 'MatscholarElementData std_dev embedding 99', 'MatscholarElementData mean embedding 107', 'MatscholarElementData mean embedding 115', 'MatscholarElementData mean embedding 118', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData mean embedding 128', 'MatscholarElementData mean embedding 139', 'MatscholarElementData mean embedding 171', 'MatscholarElementData mean embedding 179', 'MatscholarElementData std_dev embedding 179', 'MatscholarElementData mean embedding 188', 'MatscholarElementData mean embedding 198', 'DemlData std_dev molar_vol', 'DemlData mean boiling_point', 'DemlData mean first_ioniz', 'DemlData std_dev first_ioniz', 'DemlData mean electronegativity', 'transition metal fraction', 'frac p valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 9', 'sine coulomb matrix eig 10', 'sine coulomb matrix eig 11']} fold_4 {'best_pipeline': ['(featureunion, FeatureUnion(n_jobs=null,\\n transformer_list=[(functiontransformer, FunctionTransformer(accept_sparse=false, check_inverse=true,\\n func=<function copy at 0x2b097cae9d08>, inv_kw_args=null,\\n inverse_func=null, kw_args=null, pass_y=deprecated,\\n validate=null)), (standardscaler, StandardScaler(copy=true, with_mean=true, with_std=true))],\\n transformer_weights=null))', '(randomforestclassifier, RandomForestClassifier(bootstrap=false, class_weight=null,\\n criterion=entropy, max_depth=null, max_features=0.2,\\n max_leaf_nodes=null, min_impurity_decrease=0.0,\\n min_impurity_split=null, min_samples_leaf=6,\\n min_samples_split=9, min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null, oob_score=false,\\n random_state=null, verbose=0, warm_start=false))'], 'features_reduced': ['HOMO_energy', 'gap_AO', 'PymatgenData std_dev X', 'PymatgenData mean block', 'PymatgenData maximum mendeleev_no', 'PymatgenData std_dev mendeleev_no', 'PymatgenData mean thermal_conductivity', 'PymatgenData std_dev thermal_conductivity', 'MagpieData maximum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MatscholarElementData mean embedding 41', 'MatscholarElementData std_dev embedding 41', 'MatscholarElementData mean embedding 46', 'MatscholarElementData mean embedding 51', 'MatscholarElementData minimum embedding 52', 'MatscholarElementData mean embedding 52', 'MatscholarElementData mean embedding 61', 'MatscholarElementData mean embedding 64', 'MatscholarElementData mean embedding 65', 'MatscholarElementData mean embedding 68', 'MatscholarElementData mean embedding 72', 'MatscholarElementData std_dev embedding 73', 'MatscholarElementData mean embedding 78', 'MatscholarElementData std_dev embedding 78', 'MatscholarElementData mean embedding 93', 'MatscholarElementData mean embedding 95', 'MatscholarElementData mean embedding 99', 'MatscholarElementData std_dev embedding 99', 'MatscholarElementData mean embedding 107', 'MatscholarElementData mean embedding 115', 'MatscholarElementData mean embedding 118', 'MatscholarElementData std_dev embedding 118', 'MatscholarElementData mean embedding 123', 'MatscholarElementData mean embedding 139', 'MatscholarElementData mean embedding 179', 'MatscholarElementData std_dev embedding 179', 'MatscholarElementData mean embedding 188', 'MatscholarElementData mean embedding 198', 'MatscholarElementData std_dev embedding 199', 'DemlData std_dev molar_vol', 'DemlData mean heat_fusion', 'DemlData mean boiling_point', 'DemlData mean first_ioniz', 'DemlData mean electronegativity', 'transition metal fraction', 'avg p valence electrons', 'frac p valence electrons', 'density', 'vpa', 'packing fraction', 'spacegroup_num', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 8', 'sine coulomb matrix eig 9', 'sine coulomb matrix eig 10', 'sine coulomb matrix eig 11']}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_perovskites","text":"","title":"matbench_perovskites"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-scores_10","text":"fold mae rmse mape* max_error fold_0 0.2159 0.3114 0.2077 2.7651 fold_1 0.1904 0.2857 0.1944 2.6783 fold_2 0.1962 0.2869 0.1933 2.4466 fold_3 0.1992 0.2907 0.2209 3.3116 fold_4 0.2006 0.3023 0.1886 2.4386","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-score-stats_10","text":"metric mean max min std mae 0.2005 0.2159 0.1904 0.0085 rmse 0.2954 0.3114 0.2857 0.0099 mape* 0.2010 0.2209 0.1886 0.0118 max_error 2.7280 3.3116 2.4386 0.3186","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-parameters_10","text":"fold params dict fold_0 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.45000000000000007, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=20,\\n n_jobs=null, oob_score=false, random_state=null,\\n verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData maximum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'range oxidation state', 'std_dev oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'structural complexity per cell']} fold_1 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(zerocount, ZeroCount())', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.5500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_jobs=null, oob_score=false, random_state=null,\\n verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'range oxidation state', 'std_dev oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'structural complexity per atom']} fold_2 {'best_pipeline': ['(selectfwe, SelectFwe(alpha=0.03, score_func=<function f_regression at 0x2aaaf35a08c8>))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.75, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=huber, max_depth=9,\\n max_features=0.6500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=10, min_samples_split=11,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.6500000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'range oxidation state', 'std_dev oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'structural complexity per atom']} fold_3 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.95, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=ls, max_depth=7,\\n max_features=0.8, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=19, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=200,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.3, tol=0.0001,\\n validation_fraction=0.1, verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'range oxidation state', 'std_dev oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'structural complexity per cell']} fold_4 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.05))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(randomforestregressor, RandomForestRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.6500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=8,\\n min_weight_fraction_leaf=0.0, n_estimators=100,\\n n_jobs=null, oob_score=false, random_state=null,\\n verbose=0, warm_start=false))'], 'features_reduced': ['MagpieData range Number', 'MagpieData minimum MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData mean NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NValence', 'MagpieData mean NdUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData maximum GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'std_dev oxidation state', 'avg anion electron affinity', 'avg ionic char', 'density', 'vpa', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'structural complexity per cell']}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_phonons","text":"","title":"matbench_phonons"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-scores_11","text":"fold mae rmse mape* max_error fold_0 67.5727 146.7970 0.1079 1151.5570 fold_1 54.0755 100.2097 0.1048 890.4159 fold_2 50.9853 96.5991 0.0931 680.9361 fold_3 59.6458 127.8555 0.1142 926.0969 fold_4 48.5738 77.0626 0.0958 383.1912","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-score-stats_11","text":"metric mean max min std mae 56.1706 67.5727 48.5738 6.7981 rmse 109.7048 146.7970 77.0626 24.6280 mape* 0.1032 0.1142 0.0931 0.0078 max_error 806.4394 1151.5570 383.1912 258.9850","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-parameters_11","text":"fold params dict fold_0 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.01))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.7500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum Number', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData range Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData minimum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData mean NpUnfilled', 'MagpieData mean NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'minimum oxidation state', 'avg anion electron affinity', 'max ionic char', 'density', 'spacegroup_num', 'ewald_energy', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 4']} fold_1 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.005))', '(maxabsscaler, MaxAbsScaler(copy=true))', '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.8, criterion=friedman_mse, init=null,\\n learning_rate=0.1, loss=ls, max_depth=9,\\n max_features=0.7000000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=17,\\n min_weight_fraction_leaf=0.0, n_estimators=500,\\n n_iter_no_change=null, presort=auto,\\n random_state=null, subsample=0.9000000000000001,\\n tol=0.0001, validation_fraction=0.1, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum Number', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData minimum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NValence', 'MagpieData mean NpUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData mean GSbandgap', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'avg anion electron affinity', 'density', 'vpa', 'spacegroup_num', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3']} fold_2 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.8500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum Number', 'MagpieData mode Number', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData range Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData minimum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NValence', 'MagpieData mean NsUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData mode GSbandgap', 'MagpieData avg_dev SpaceGroupNumber', 'minimum oxidation state', 'avg anion electron affinity', 'max ionic char', 'density', 'packing fraction', 'ewald_energy', 'sine coulomb matrix eig 2', 'structural complexity per cell']} fold_3 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.0001))', '(onehotencoder, OneHotEncoder(categorical_features=[false, false, false, false, false, false,\\n false, false, false, false, false, false,\\n false, false, false, false, true, false,\\n false, true, false, false, false, false,\\n false, false, false, true, false, false, ...],\\n dtype=<class float>, minimum_fraction=0.05, sparse=false,\\n threshold=10))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.6500000000000001, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=1000,\\n n_jobs=null, oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum Number', 'MagpieData mode Number', 'MagpieData avg_dev AtomicWeight', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData range Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData minimum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev NValence', 'MagpieData maximum NpUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData range NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData mode GSbandgap', 'avg anion electron affinity', 'max ionic char', 'density', 'crystal_system_int', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5']} fold_4 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.2))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.5500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=200, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData minimum Number', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData range Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData minimum CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData maximum Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NValence', 'MagpieData maximum NpUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData mean NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev SpaceGroupNumber', 'std_dev oxidation state', 'avg anion electron affinity', 'max ionic char', 'density', 'spacegroup_num', 'ewald_energy', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3']}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#matbench_steels","text":"","title":"matbench_steels"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-scores_12","text":"fold mae rmse mape* max_error fold_0 109.3058 188.8049 0.0693 1082.7703 fold_1 80.4188 109.2771 0.0569 416.3620 fold_2 83.5360 120.2935 0.0607 424.5913 fold_3 98.7186 136.5898 0.0722 473.4563 fold_4 115.4851 215.1149 0.0891 1142.9223","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-score-stats_12","text":"metric mean max min std mae 97.4929 115.4851 80.4188 13.7919 rmse 154.0161 215.1149 109.2771 40.9531 mape* 0.0696 0.0891 0.0569 0.0112 max_error 708.0205 1142.9223 416.3620 331.6607","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_automatminer_expressv2020/#fold-parameters_12","text":"fold params dict fold_0 {'best_pipeline': ['(selectfrommodel, SelectFromModel(estimator=ExtraTreesRegressor(bootstrap=false, criterion=mse,\\n max_depth=null,\\n max_features=0.9500000000000002,\\n max_leaf_nodes=null,\\n min_impurity_decrease=0.0,\\n min_impurity_split=null,\\n min_samples_leaf=1,\\n min_samples_split=2,\\n min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null,\\n oob_score=false,\\n random_state=null, verbose=0,\\n warm_start=false),\\n max_features=null, norm_order=1, prefit=false, threshold=0.05))', '(robustscaler, RobustScaler(copy=true, quantile_range=(25.0, 75.0), with_centering=true,\\n with_scaling=true))', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.9500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData avg_dev AtomicWeight', 'MagpieData mean MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData avg_dev NsValence', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData avg_dev NpUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_amor']} fold_1 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(fastica, FastICA(algorithm=parallel, fun=logcosh, fun_args=null, max_iter=200,\\n n_components=null, random_state=null, tol=0.7000000000000001,\\n w_init=null, whiten=true))', '(kneighborsregressor, KNeighborsRegressor(algorithm=auto, leaf_size=30, metric=minkowski,\\n metric_params=null, n_jobs=null, n_neighbors=4, p=1,\\n weights=distance))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData avg_dev Number', 'MagpieData mean MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData avg_dev NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_amor']} fold_2 {'best_pipeline': ['(selectpercentile, SelectPercentile(percentile=53,\\n score_func=<function f_regression at 0x2aaaf79a38c8>))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(kneighborsregressor, KNeighborsRegressor(algorithm=auto, leaf_size=30, metric=minkowski,\\n metric_params=null, n_jobs=null, n_neighbors=4, p=2,\\n weights=distance))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData avg_dev Number', 'MagpieData avg_dev MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData avg_dev NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter']} fold_3 {'best_pipeline': ['(variancethreshold, VarianceThreshold(threshold=0.1))', '(minmaxscaler, MinMaxScaler(copy=true, feature_range=(0, 1)))', '(kneighborsregressor, KNeighborsRegressor(algorithm=auto, leaf_size=30, metric=minkowski,\\n metric_params=null, n_jobs=null, n_neighbors=4, p=2,\\n weights=distance))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData avg_dev Number', 'MagpieData mean MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData avg_dev NpValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData avg_dev NsUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter']} fold_4 {'best_pipeline': ['(selectfrommodel, SelectFromModel(estimator=ExtraTreesRegressor(bootstrap=false, criterion=mse,\\n max_depth=null,\\n max_features=0.9500000000000002,\\n max_leaf_nodes=null,\\n min_impurity_decrease=0.0,\\n min_impurity_split=null,\\n min_samples_leaf=1,\\n min_samples_split=2,\\n min_weight_fraction_leaf=0.0,\\n n_estimators=100, n_jobs=null,\\n oob_score=false,\\n random_state=null, verbose=0,\\n warm_start=false),\\n max_features=null, norm_order=1, prefit=false, threshold=0.05))', '(zerocount, ZeroCount())', '(extratreesregressor, ExtraTreesRegressor(bootstrap=false, criterion=mse, max_depth=null,\\n max_features=0.7500000000000002, max_leaf_nodes=null,\\n min_impurity_decrease=0.0, min_impurity_split=null,\\n min_samples_leaf=1, min_samples_split=2,\\n min_weight_fraction_leaf=0.0, n_estimators=500, n_jobs=null,\\n oob_score=false, random_state=null, verbose=0,\\n warm_start=false))'], 'features_reduced': ['MagpieData mean Number', 'MagpieData avg_dev Number', 'MagpieData mean MeltingT', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData avg_dev NsValence', 'MagpieData avg_dev NpValence', 'MagpieData avg_dev NdValence', 'MagpieData avg_dev NValence', 'MagpieData avg_dev NpUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData avg_dev GSbandgap', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mean SpaceGroupNumber', 'Yang omega', 'Yang delta', 'Miedema_deltaH_inter']}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/","text":"matbench_v0.1: CGCNN v2019 Algorithm description: Convolutional graph neural network, in it's original implementation as in https://github.com/txie-93/cgcnn. Utility modifications were made in order to run CGCNN without error across all structure tasks. Adapted from data originally taken from Dunn et. al 'Benchmarking materials property prediction methods: the Matbench test set and Automatminer reference algorithm' (2020). Training was performed using one NVIDIA 1080Ti GPU using CUDA (accompanied by two Intel Xeon E5-2623 CPUs with 60GB RAM). Each outer NCV training set was split 75/25 for train/validation; thus the final split for each fold was 60% train, 20% validation, 20% test. Each model is trained in epochs of 128-structure batches by optimizing according to mean squared error loss (regression) or binary cross-entropy (classification). After each epoch, the validation loss is computed with the same scoring functions as the final evaluation: MAE for regression or ROC-AUC for classification (made negative so that higher loss represents worse performance). To prevent overfitting, the training is stopped early when the validation loss does not improve over a period of at least 500 epochs. Raw data download and example notebook available on the matbench repo . References (in bibtex format): ['@article{Xie2018,\\n' ' doi = {10.1103/physrevlett.120.145301},\\n' ' url = {https://doi.org/10.1103/physrevlett.120.145301},\\n' ' year = {2018},\\n' ' month = apr,\\n' ' publisher = {American Physical Society ({APS})},\\n' ' volume = {120},\\n' ' number = {14},\\n' ' author = {Tian Xie and Jeffrey C. Grossman},\\n' ' title = {Crystal Graph Convolutional Neural Networks for an Accurate and ' 'Interpretable Prediction of Material Properties},\\n' ' journal = {Physical Review Letters}\\n' '}', '@article{Dunn2020,\\n' ' doi = {10.1038/s41524-020-00406-3},\\n' ' url = {https://doi.org/10.1038/s41524-020-00406-3},\\n' ' year = {2020},\\n' ' month = sep,\\n' ' publisher = {Springer Science and Business Media {LLC}},\\n' ' volume = {6},\\n' ' number = {1},\\n' ' author = {Alexander Dunn and Qi Wang and Alex Ganose and Daniel Dopp and ' 'Anubhav Jain},\\n' ' title = {Benchmarking materials property prediction methods: the Matbench ' 'test set and Automatminer reference algorithm},\\n' ' journal = {npj Computational Materials}\\n' '}'] User metadata: {'conv_to_fc.bias': 32, 'conv_to_fc.weight': 2048, 'convs.0.bn1.bias': 128, 'convs.0.bn1.num_batches_tracked': 1, 'convs.0.bn1.running_mean': 128, 'convs.0.bn1.running_var': 128, 'convs.0.bn1.weight': 128, 'convs.0.bn2.bias': 64, 'convs.0.bn2.num_batches_tracked': 1, 'convs.0.bn2.running_mean': 64, 'convs.0.bn2.running_var': 64, 'convs.0.bn2.weight': 64, 'convs.0.fc_full.bias': 128, 'convs.0.fc_full.weight': 21632, 'convs.1.bn1.bias': 128, 'convs.1.bn1.num_batches_tracked': 1, 'convs.1.bn1.running_mean': 128, 'convs.1.bn1.running_var': 128, 'convs.1.bn1.weight': 128, 'convs.1.bn2.bias': 64, 'convs.1.bn2.num_batches_tracked': 1, 'convs.1.bn2.running_mean': 64, 'convs.1.bn2.running_var': 64, 'convs.1.bn2.weight': 64, 'convs.1.fc_full.bias': 128, 'convs.1.fc_full.weight': 21632, 'convs.2.bn1.bias': 128, 'convs.2.bn1.num_batches_tracked': 1, 'convs.2.bn1.running_mean': 128, 'convs.2.bn1.running_var': 128, 'convs.2.bn1.weight': 128, 'convs.2.bn2.bias': 64, 'convs.2.bn2.num_batches_tracked': 1, 'convs.2.bn2.running_mean': 64, 'convs.2.bn2.running_var': 64, 'convs.2.bn2.weight': 64, 'convs.2.fc_full.bias': 128, 'convs.2.fc_full.weight': 21632, 'convs.3.bn1.bias': 128, 'convs.3.bn1.num_batches_tracked': 1, 'convs.3.bn1.running_mean': 128, 'convs.3.bn1.running_var': 128, 'convs.3.bn1.weight': 128, 'convs.3.bn2.bias': 64, 'convs.3.bn2.num_batches_tracked': 1, 'convs.3.bn2.running_mean': 64, 'convs.3.bn2.running_var': 64, 'convs.3.bn2.weight': 64, 'convs.3.fc_full.bias': 128, 'convs.3.fc_full.weight': 21632, 'embedding.bias': 64, 'embedding.weight': 5888, 'fc_out.bias': 1, 'fc_out.weight': 32} Metadata: Tasks recorded: 9 of 13 total Benchmark is complete? False Benchmark is structure complete? True Benchmark is composition complete? False Benchmark is regression complete? False Benchmark is classification complete? False Software Requirements {'python': ['https://github.com/txie-93/cgcnn', 'numpy==1.20.1', 'matbench==0.1.0']} Task data: matbench_dielectric Fold scores fold mae rmse mape* max_error fold_0 0.4704 0.9059 0.1949 14.6895 fold_1 0.5724 1.2825 0.2222 20.3729 fold_2 0.7301 3.0600 0.2194 58.9996 fold_3 0.6111 2.4214 0.2119 53.4782 fold_4 0.6099 1.8183 0.2348 28.6714 Fold score stats metric mean max min std mae 0.5988 0.7301 0.4704 0.0833 rmse 1.8976 3.0600 0.9059 0.7738 mape* 0.2167 0.2348 0.1949 0.0131 max_error 35.2423 58.9996 14.6895 17.7969 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_jdft2d Fold scores fold mae rmse mape* max_error fold_0 34.4937 56.8278 33.7683 256.0330 fold_1 51.1167 98.1228 0.5027 407.6809 fold_2 69.4250 182.5647 0.6043 1061.5574 fold_3 42.7453 71.8811 0.4072 303.9963 fold_4 48.4396 154.4480 0.6338 1516.9120 Fold score stats metric mean max min std mae 49.2440 69.4250 34.4937 11.5865 rmse 112.7689 182.5647 56.8278 48.2169 mape* 7.1833 33.7683 0.4072 13.2927 max_error 709.2359 1516.9120 256.0330 497.3969 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_log_gvrh Fold scores fold mae rmse mape* max_error fold_0 0.0870 0.1270 0.0680 1.0473 fold_1 0.0899 0.1384 0.0714 1.4520 fold_2 0.0887 0.1323 0.0699 1.0024 fold_3 0.0902 0.1344 0.0705 0.9712 fold_4 0.0918 0.1362 0.0712 0.8430 Fold score stats metric mean max min std mae 0.0895 0.0918 0.0870 0.0016 rmse 0.1337 0.1384 0.1270 0.0039 mape* 0.0702 0.0714 0.0680 0.0012 max_error 1.0632 1.4520 0.8430 0.2059 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_log_kvrh Fold scores fold mae rmse mape* max_error fold_0 0.0702 0.1290 0.0456 1.7725 fold_1 0.0722 0.1353 0.0477 1.3813 fold_2 0.0665 0.1191 0.0423 1.1052 fold_3 0.0748 0.1341 0.0517 1.1231 fold_4 0.0724 0.1328 0.0480 1.5001 Fold score stats metric mean max min std mae 0.0712 0.0748 0.0665 0.0028 rmse 0.1301 0.1353 0.1191 0.0059 mape* 0.0471 0.0517 0.0423 0.0031 max_error 1.3765 1.7725 1.1052 0.2490 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_mp_e_form Fold scores fold mae rmse mape* max_error fold_0 0.0340 0.0714 0.4273 3.4254 fold_1 0.0340 0.0681 0.1934 2.0786 fold_2 0.0328 0.0756 0.2075 7.7205 fold_3 0.0332 0.0623 0.2258 1.3283 fold_4 0.0346 0.0633 0.2830 1.5782 Fold score stats metric mean max min std mae 0.0337 0.0346 0.0328 0.0006 rmse 0.0682 0.0756 0.0623 0.0050 mape* 0.2674 0.4273 0.1934 0.0855 max_error 3.2262 7.7205 1.3283 2.3611 Fold parameters fold params dict fold_0 {'training_mae': 0.020714398227129675, 'training_n_samples': 79650, 'validation_mae': 0.03311641346102554, 'validation_n_samples': 26551} fold_1 {'training_mae': 0.020727165395357502, 'training_n_samples': 79650, 'validation_mae': 0.03387322865233633, 'validation_n_samples': 26551} fold_2 {'training_mae': 0.020593563770909047, 'training_n_samples': 79651, 'validation_mae': 0.033246301549184044, 'validation_n_samples': 26551} fold_3 {'training_mae': 0.020858287502723834, 'training_n_samples': 79651, 'validation_mae': 0.03272479726288639, 'validation_n_samples': 26551} fold_4 {'training_mae': 0.0220815778646356, 'training_n_samples': 79651, 'validation_mae': 0.03445024667244967, 'validation_n_samples': 26551} matbench_mp_gap Fold scores fold mae rmse mape* max_error fold_0 0.2978 0.6753 3.5253 7.2169 fold_1 0.2939 0.6827 3.3933 13.6569 fold_2 0.2960 0.6653 5.5089 6.8339 fold_3 0.2947 0.6740 7.7018 7.7523 fold_4 0.3038 0.6884 5.7405 7.7166 Fold score stats metric mean max min std mae 0.2972 0.3038 0.2939 0.0035 rmse 0.6771 0.6884 0.6653 0.0079 mape* 5.1740 7.7018 3.3933 1.5945 max_error 8.6353 13.6569 6.8339 2.5336 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_mp_is_metal Fold scores fold accuracy balanced_accuracy f1 rocauc fold_0 0.9590 0.9578 0.9526 0.9578 fold_1 0.9450 0.9432 0.9363 0.9432 fold_2 0.9643 0.9632 0.9588 0.9632 fold_3 0.9480 0.9463 0.9398 0.9463 fold_4 0.9510 0.9494 0.9433 0.9494 Fold score stats metric mean max min std accuracy 0.9534 0.9643 0.9450 0.0072 balanced_accuracy 0.9520 0.9632 0.9432 0.0074 f1 0.9462 0.9588 0.9363 0.0083 rocauc 0.9520 0.9632 0.9432 0.0074 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_perovskites Fold scores fold mae rmse mape* max_error fold_0 0.0456 0.0753 0.0483 0.9441 fold_1 0.0462 0.0735 0.0497 0.9923 fold_2 0.0448 0.0690 0.0466 0.9840 fold_3 0.0454 0.0714 0.0482 0.7688 fold_4 0.0442 0.0718 0.0419 0.9384 Fold score stats metric mean max min std mae 0.0452 0.0462 0.0442 0.0007 rmse 0.0722 0.0753 0.0690 0.0021 mape* 0.0469 0.0497 0.0419 0.0027 max_error 0.9255 0.9923 0.7688 0.0812 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_phonons Fold scores fold mae rmse mape* max_error fold_0 81.1553 231.3233 0.1330 2504.8743 fold_1 45.0945 79.3798 0.0995 835.2144 fold_2 54.2563 132.8543 0.1081 1667.5734 fold_3 56.5819 169.7248 0.1201 2378.4055 fold_4 51.7292 95.2267 0.1087 658.0856 Fold score stats metric mean max min std mae 57.7635 81.1553 45.0945 12.3109 rmse 141.7018 231.3233 79.3798 54.6618 mape* 0.1139 0.1330 0.0995 0.0116 max_error 1608.8306 2504.8743 658.0856 761.7071 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"matbench_v0.1: CGCNN v2019"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#matbench_v01-cgcnn-v2019","text":"","title":"matbench_v0.1: CGCNN v2019"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#algorithm-description","text":"Convolutional graph neural network, in it's original implementation as in https://github.com/txie-93/cgcnn. Utility modifications were made in order to run CGCNN without error across all structure tasks. Adapted from data originally taken from Dunn et. al 'Benchmarking materials property prediction methods: the Matbench test set and Automatminer reference algorithm' (2020). Training was performed using one NVIDIA 1080Ti GPU using CUDA (accompanied by two Intel Xeon E5-2623 CPUs with 60GB RAM). Each outer NCV training set was split 75/25 for train/validation; thus the final split for each fold was 60% train, 20% validation, 20% test. Each model is trained in epochs of 128-structure batches by optimizing according to mean squared error loss (regression) or binary cross-entropy (classification). After each epoch, the validation loss is computed with the same scoring functions as the final evaluation: MAE for regression or ROC-AUC for classification (made negative so that higher loss represents worse performance). To prevent overfitting, the training is stopped early when the validation loss does not improve over a period of at least 500 epochs. Raw data download and example notebook available on the matbench repo .","title":"Algorithm description:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#references-in-bibtex-format","text":"['@article{Xie2018,\\n' ' doi = {10.1103/physrevlett.120.145301},\\n' ' url = {https://doi.org/10.1103/physrevlett.120.145301},\\n' ' year = {2018},\\n' ' month = apr,\\n' ' publisher = {American Physical Society ({APS})},\\n' ' volume = {120},\\n' ' number = {14},\\n' ' author = {Tian Xie and Jeffrey C. Grossman},\\n' ' title = {Crystal Graph Convolutional Neural Networks for an Accurate and ' 'Interpretable Prediction of Material Properties},\\n' ' journal = {Physical Review Letters}\\n' '}', '@article{Dunn2020,\\n' ' doi = {10.1038/s41524-020-00406-3},\\n' ' url = {https://doi.org/10.1038/s41524-020-00406-3},\\n' ' year = {2020},\\n' ' month = sep,\\n' ' publisher = {Springer Science and Business Media {LLC}},\\n' ' volume = {6},\\n' ' number = {1},\\n' ' author = {Alexander Dunn and Qi Wang and Alex Ganose and Daniel Dopp and ' 'Anubhav Jain},\\n' ' title = {Benchmarking materials property prediction methods: the Matbench ' 'test set and Automatminer reference algorithm},\\n' ' journal = {npj Computational Materials}\\n' '}']","title":"References (in bibtex format):"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#user-metadata","text":"{'conv_to_fc.bias': 32, 'conv_to_fc.weight': 2048, 'convs.0.bn1.bias': 128, 'convs.0.bn1.num_batches_tracked': 1, 'convs.0.bn1.running_mean': 128, 'convs.0.bn1.running_var': 128, 'convs.0.bn1.weight': 128, 'convs.0.bn2.bias': 64, 'convs.0.bn2.num_batches_tracked': 1, 'convs.0.bn2.running_mean': 64, 'convs.0.bn2.running_var': 64, 'convs.0.bn2.weight': 64, 'convs.0.fc_full.bias': 128, 'convs.0.fc_full.weight': 21632, 'convs.1.bn1.bias': 128, 'convs.1.bn1.num_batches_tracked': 1, 'convs.1.bn1.running_mean': 128, 'convs.1.bn1.running_var': 128, 'convs.1.bn1.weight': 128, 'convs.1.bn2.bias': 64, 'convs.1.bn2.num_batches_tracked': 1, 'convs.1.bn2.running_mean': 64, 'convs.1.bn2.running_var': 64, 'convs.1.bn2.weight': 64, 'convs.1.fc_full.bias': 128, 'convs.1.fc_full.weight': 21632, 'convs.2.bn1.bias': 128, 'convs.2.bn1.num_batches_tracked': 1, 'convs.2.bn1.running_mean': 128, 'convs.2.bn1.running_var': 128, 'convs.2.bn1.weight': 128, 'convs.2.bn2.bias': 64, 'convs.2.bn2.num_batches_tracked': 1, 'convs.2.bn2.running_mean': 64, 'convs.2.bn2.running_var': 64, 'convs.2.bn2.weight': 64, 'convs.2.fc_full.bias': 128, 'convs.2.fc_full.weight': 21632, 'convs.3.bn1.bias': 128, 'convs.3.bn1.num_batches_tracked': 1, 'convs.3.bn1.running_mean': 128, 'convs.3.bn1.running_var': 128, 'convs.3.bn1.weight': 128, 'convs.3.bn2.bias': 64, 'convs.3.bn2.num_batches_tracked': 1, 'convs.3.bn2.running_mean': 64, 'convs.3.bn2.running_var': 64, 'convs.3.bn2.weight': 64, 'convs.3.fc_full.bias': 128, 'convs.3.fc_full.weight': 21632, 'embedding.bias': 64, 'embedding.weight': 5888, 'fc_out.bias': 1, 'fc_out.weight': 32}","title":"User metadata:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#metadata","text":"Tasks recorded: 9 of 13 total Benchmark is complete? False Benchmark is structure complete? True Benchmark is composition complete? False Benchmark is regression complete? False Benchmark is classification complete? False","title":"Metadata:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#software-requirements","text":"{'python': ['https://github.com/txie-93/cgcnn', 'numpy==1.20.1', 'matbench==0.1.0']}","title":"Software Requirements"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#task-data","text":"","title":"Task data:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#matbench_dielectric","text":"","title":"matbench_dielectric"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-scores","text":"fold mae rmse mape* max_error fold_0 0.4704 0.9059 0.1949 14.6895 fold_1 0.5724 1.2825 0.2222 20.3729 fold_2 0.7301 3.0600 0.2194 58.9996 fold_3 0.6111 2.4214 0.2119 53.4782 fold_4 0.6099 1.8183 0.2348 28.6714","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-score-stats","text":"metric mean max min std mae 0.5988 0.7301 0.4704 0.0833 rmse 1.8976 3.0600 0.9059 0.7738 mape* 0.2167 0.2348 0.1949 0.0131 max_error 35.2423 58.9996 14.6895 17.7969","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-parameters","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#matbench_jdft2d","text":"","title":"matbench_jdft2d"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-scores_1","text":"fold mae rmse mape* max_error fold_0 34.4937 56.8278 33.7683 256.0330 fold_1 51.1167 98.1228 0.5027 407.6809 fold_2 69.4250 182.5647 0.6043 1061.5574 fold_3 42.7453 71.8811 0.4072 303.9963 fold_4 48.4396 154.4480 0.6338 1516.9120","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-score-stats_1","text":"metric mean max min std mae 49.2440 69.4250 34.4937 11.5865 rmse 112.7689 182.5647 56.8278 48.2169 mape* 7.1833 33.7683 0.4072 13.2927 max_error 709.2359 1516.9120 256.0330 497.3969","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-parameters_1","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#matbench_log_gvrh","text":"","title":"matbench_log_gvrh"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-scores_2","text":"fold mae rmse mape* max_error fold_0 0.0870 0.1270 0.0680 1.0473 fold_1 0.0899 0.1384 0.0714 1.4520 fold_2 0.0887 0.1323 0.0699 1.0024 fold_3 0.0902 0.1344 0.0705 0.9712 fold_4 0.0918 0.1362 0.0712 0.8430","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-score-stats_2","text":"metric mean max min std mae 0.0895 0.0918 0.0870 0.0016 rmse 0.1337 0.1384 0.1270 0.0039 mape* 0.0702 0.0714 0.0680 0.0012 max_error 1.0632 1.4520 0.8430 0.2059","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-parameters_2","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#matbench_log_kvrh","text":"","title":"matbench_log_kvrh"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-scores_3","text":"fold mae rmse mape* max_error fold_0 0.0702 0.1290 0.0456 1.7725 fold_1 0.0722 0.1353 0.0477 1.3813 fold_2 0.0665 0.1191 0.0423 1.1052 fold_3 0.0748 0.1341 0.0517 1.1231 fold_4 0.0724 0.1328 0.0480 1.5001","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-score-stats_3","text":"metric mean max min std mae 0.0712 0.0748 0.0665 0.0028 rmse 0.1301 0.1353 0.1191 0.0059 mape* 0.0471 0.0517 0.0423 0.0031 max_error 1.3765 1.7725 1.1052 0.2490","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-parameters_3","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#matbench_mp_e_form","text":"","title":"matbench_mp_e_form"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-scores_4","text":"fold mae rmse mape* max_error fold_0 0.0340 0.0714 0.4273 3.4254 fold_1 0.0340 0.0681 0.1934 2.0786 fold_2 0.0328 0.0756 0.2075 7.7205 fold_3 0.0332 0.0623 0.2258 1.3283 fold_4 0.0346 0.0633 0.2830 1.5782","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-score-stats_4","text":"metric mean max min std mae 0.0337 0.0346 0.0328 0.0006 rmse 0.0682 0.0756 0.0623 0.0050 mape* 0.2674 0.4273 0.1934 0.0855 max_error 3.2262 7.7205 1.3283 2.3611","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-parameters_4","text":"fold params dict fold_0 {'training_mae': 0.020714398227129675, 'training_n_samples': 79650, 'validation_mae': 0.03311641346102554, 'validation_n_samples': 26551} fold_1 {'training_mae': 0.020727165395357502, 'training_n_samples': 79650, 'validation_mae': 0.03387322865233633, 'validation_n_samples': 26551} fold_2 {'training_mae': 0.020593563770909047, 'training_n_samples': 79651, 'validation_mae': 0.033246301549184044, 'validation_n_samples': 26551} fold_3 {'training_mae': 0.020858287502723834, 'training_n_samples': 79651, 'validation_mae': 0.03272479726288639, 'validation_n_samples': 26551} fold_4 {'training_mae': 0.0220815778646356, 'training_n_samples': 79651, 'validation_mae': 0.03445024667244967, 'validation_n_samples': 26551}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#matbench_mp_gap","text":"","title":"matbench_mp_gap"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-scores_5","text":"fold mae rmse mape* max_error fold_0 0.2978 0.6753 3.5253 7.2169 fold_1 0.2939 0.6827 3.3933 13.6569 fold_2 0.2960 0.6653 5.5089 6.8339 fold_3 0.2947 0.6740 7.7018 7.7523 fold_4 0.3038 0.6884 5.7405 7.7166","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-score-stats_5","text":"metric mean max min std mae 0.2972 0.3038 0.2939 0.0035 rmse 0.6771 0.6884 0.6653 0.0079 mape* 5.1740 7.7018 3.3933 1.5945 max_error 8.6353 13.6569 6.8339 2.5336","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-parameters_5","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#matbench_mp_is_metal","text":"","title":"matbench_mp_is_metal"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-scores_6","text":"fold accuracy balanced_accuracy f1 rocauc fold_0 0.9590 0.9578 0.9526 0.9578 fold_1 0.9450 0.9432 0.9363 0.9432 fold_2 0.9643 0.9632 0.9588 0.9632 fold_3 0.9480 0.9463 0.9398 0.9463 fold_4 0.9510 0.9494 0.9433 0.9494","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-score-stats_6","text":"metric mean max min std accuracy 0.9534 0.9643 0.9450 0.0072 balanced_accuracy 0.9520 0.9632 0.9432 0.0074 f1 0.9462 0.9588 0.9363 0.0083 rocauc 0.9520 0.9632 0.9432 0.0074","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-parameters_6","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#matbench_perovskites","text":"","title":"matbench_perovskites"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-scores_7","text":"fold mae rmse mape* max_error fold_0 0.0456 0.0753 0.0483 0.9441 fold_1 0.0462 0.0735 0.0497 0.9923 fold_2 0.0448 0.0690 0.0466 0.9840 fold_3 0.0454 0.0714 0.0482 0.7688 fold_4 0.0442 0.0718 0.0419 0.9384","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-score-stats_7","text":"metric mean max min std mae 0.0452 0.0462 0.0442 0.0007 rmse 0.0722 0.0753 0.0690 0.0021 mape* 0.0469 0.0497 0.0419 0.0027 max_error 0.9255 0.9923 0.7688 0.0812","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-parameters_7","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#matbench_phonons","text":"","title":"matbench_phonons"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-scores_8","text":"fold mae rmse mape* max_error fold_0 81.1553 231.3233 0.1330 2504.8743 fold_1 45.0945 79.3798 0.0995 835.2144 fold_2 54.2563 132.8543 0.1081 1667.5734 fold_3 56.5819 169.7248 0.1201 2378.4055 fold_4 51.7292 95.2267 0.1087 658.0856","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-score-stats_8","text":"metric mean max min std mae 57.7635 81.1553 45.0945 12.3109 rmse 141.7018 231.3233 79.3798 54.6618 mape* 0.1139 0.1330 0.0995 0.0116 max_error 1608.8306 2504.8743 658.0856 761.7071","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_cgcnnv2019/#fold-parameters_8","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/","text":"matbench_v0.1: Dummy Algorithm description: Dummy regressor, using strategy 'mean', and Dummy regressor, using strategy 'stratified'. No notes. Raw data download and example notebook available on the matbench repo . References (in bibtex format): ('@article{Dunn2020,\\n' ' doi = {10.1038/s41524-020-00406-3},\\n' ' url = {https://doi.org/10.1038/s41524-020-00406-3},\\n' ' year = {2020},\\n' ' month = sep,\\n' ' publisher = {Springer Science and Business Media {LLC}},\\n' ' volume = {6},\\n' ' number = {1},\\n' ' author = {Alexander Dunn and Qi Wang and Alex Ganose and Daniel Dopp and ' 'Anubhav Jain},\\n' ' title = {Benchmarking materials property prediction methods: the Matbench ' 'test set and Automatminer reference algorithm},\\n' ' journal = {npj Computational Materials}\\n' '}') User metadata: {'algorithm': 'dummy', 'classification_strategy': 'stratified', 'regression_strategy': 'mean'} Metadata: Tasks recorded: 13 of 13 total Benchmark is complete? True Software Requirements {'python': ['scikit-learn==0.24.1', 'numpy==1.20.1', 'matbench==0.1.0']} Task data: matbench_dielectric Fold scores fold mae rmse mape* max_error fold_0 0.7026 1.0677 0.3201 14.9501 fold_1 0.7811 1.4374 0.3142 20.3552 fold_2 0.9218 3.1055 0.3155 59.6653 fold_3 0.8382 2.4438 0.3266 53.4563 fold_4 0.8004 1.8094 0.3222 28.5706 Fold score stats metric mean max min std mae 0.8088 0.9218 0.7026 0.0718 rmse 1.9728 3.1055 1.0677 0.7263 mape* 0.3197 0.3266 0.3142 0.0045 max_error 35.3995 59.6653 14.9501 17.9221 Fold parameters fold params dict fold_0 {'constant_': [[2.4569770107667264]]} fold_1 {'constant_': [[2.4254682439737882]]} fold_2 {'constant_': [[2.397736448888908]]} fold_3 {'constant_': [[2.429725254851624]]} fold_4 {'constant_': [[2.4316628587393003]]} matbench_expt_gap Fold scores fold mae rmse mape* max_error fold_0 1.0965 1.3397 0.8589 7.0119 fold_1 1.1922 1.5156 0.7802 8.3754 fold_2 1.1527 1.5268 1.0398 10.7354 fold_3 1.1445 1.4389 0.8373 9.5190 fold_4 1.1317 1.3979 1.2418 9.0085 Fold score stats metric mean max min std mae 1.1435 1.1922 1.0965 0.0310 rmse 1.4438 1.5268 1.3397 0.0707 mape* 0.9516 1.2418 0.7802 0.1692 max_error 8.9300 10.7354 7.0119 1.2328 Fold parameters fold params dict fold_0 {'constant_': [[0.9881156665761609]]} fold_1 {'constant_': [[0.9545533532446375]]} fold_2 {'constant_': [[0.9645506380667934]]} fold_3 {'constant_': [[0.9810371979364648]]} fold_4 {'constant_': [[0.9914956568946797]]} matbench_expt_is_metal Fold scores fold accuracy balanced_accuracy f1 rocauc fold_0 0.4701 0.4700 0.4540 0.4700 fold_1 0.5000 0.5001 0.5080 0.5001 fold_2 0.4878 0.4878 0.4878 0.4878 fold_3 0.5071 0.5072 0.5126 0.5072 fold_4 0.4970 0.4969 0.4944 0.4969 Fold score stats metric mean max min std accuracy 0.4924 0.5071 0.4701 0.0128 balanced_accuracy 0.4924 0.5072 0.4700 0.0128 f1 0.4913 0.5126 0.4540 0.0207 rocauc 0.4924 0.5072 0.4700 0.0128 Fold parameters fold params dict fold_0 {'class_prior_': [0.5020325203252033, 0.49796747967479676]} fold_1 {'class_prior_': [0.5019050038100076, 0.49809499618999237]} fold_2 {'class_prior_': [0.5019050038100076, 0.49809499618999237]} fold_3 {'class_prior_': [0.5019050038100076, 0.49809499618999237]} fold_4 {'class_prior_': [0.5019050038100076, 0.49809499618999237]} matbench_glass Fold scores fold accuracy balanced_accuracy f1 rocauc fold_0 0.6127 0.5212 0.7304 0.5212 fold_1 0.6083 0.5217 0.7251 0.5217 fold_2 0.5775 0.4848 0.7033 0.4848 fold_3 0.5731 0.4799 0.7001 0.4799 fold_4 0.5819 0.4951 0.7044 0.4951 Fold score stats metric mean max min std accuracy 0.5907 0.6127 0.5731 0.0165 balanced_accuracy 0.5005 0.5217 0.4799 0.0178 f1 0.7127 0.7304 0.7001 0.0125 rocauc 0.5005 0.5217 0.4799 0.0178 Fold parameters fold params dict fold_0 {'class_prior_': [0.289612676056338, 0.710387323943662]} fold_1 {'class_prior_': [0.289612676056338, 0.710387323943662]} fold_2 {'class_prior_': [0.289612676056338, 0.710387323943662]} fold_3 {'class_prior_': [0.289612676056338, 0.710387323943662]} fold_4 {'class_prior_': [0.289612676056338, 0.710387323943662]} matbench_jdft2d Fold scores fold mae rmse mape* max_error fold_0 53.1447 74.1060 35.3098 509.7791 fold_1 72.8118 118.0523 0.8129 642.7424 fold_2 83.1220 192.2365 0.9798 1025.0199 fold_3 61.3174 85.6603 0.7921 468.0412 fold_4 66.0295 164.1680 1.1452 1491.7993 Fold score stats metric mean max min std mae 67.2851 83.1220 53.1447 10.1832 rmse 126.8446 192.2365 74.1060 45.2193 mape* 7.8079 35.3098 0.7921 13.7515 max_error 827.4764 1491.7993 468.0412 385.9016 Fold parameters fold params dict fold_0 {'constant_': [[117.03965287603667]]} fold_1 {'constant_': [[112.91320041366653]]} fold_2 {'constant_': [[106.46511492350562]]} fold_3 {'constant_': [[114.84311227394852]]} fold_4 {'constant_': [[112.23899155170879]]} matbench_log_gvrh Fold scores fold mae rmse mape* max_error fold_0 0.2943 0.3749 0.2368 1.5529 fold_1 0.2933 0.3743 0.2359 1.5544 fold_2 0.2969 0.3736 0.2353 1.5533 fold_3 0.2875 0.3646 0.2251 1.5524 fold_4 0.2937 0.3706 0.2334 1.5552 Fold score stats metric mean max min std mae 0.2931 0.2969 0.2875 0.0031 rmse 0.3716 0.3749 0.3646 0.0038 mape* 0.2333 0.2368 0.2251 0.0042 max_error 1.5536 1.5552 1.5524 0.0010 Fold parameters fold params dict fold_0 {'constant_': [[1.5529289714161707]]} fold_1 {'constant_': [[1.554355173237515]]} fold_2 {'constant_': [[1.5532719705303168]]} fold_3 {'constant_': [[1.5523993668681186]]} fold_4 {'constant_': [[1.5552370733167413]]} matbench_log_kvrh Fold scores fold mae rmse mape* max_error fold_0 0.2935 0.3774 0.1877 1.8800 fold_1 0.2875 0.3669 0.1858 1.8809 fold_2 0.2889 0.3634 0.1825 1.8801 fold_3 0.2833 0.3635 0.1926 1.8790 fold_4 0.2953 0.3752 0.1900 1.8822 Fold score stats metric mean max min std mae 0.2897 0.2953 0.2833 0.0043 rmse 0.3693 0.3774 0.3634 0.0059 mape* 0.1877 0.1926 0.1825 0.0035 max_error 1.8804 1.8822 1.8790 0.0011 Fold parameters fold params dict fold_0 {'constant_': [[1.8800295900875317]]} fold_1 {'constant_': [[1.880914404358644]]} fold_2 {'constant_': [[1.8800659898099186]]} fold_3 {'constant_': [[1.8789962707394416]]} fold_4 {'constant_': [[1.8822230471663404]]} matbench_mp_e_form Fold scores fold mae rmse mape* max_error fold_0 1.0063 1.1626 11.6409 3.8987 fold_1 1.0036 1.1597 7.2868 3.8782 fold_2 1.0062 1.1662 8.5651 3.9096 fold_3 1.0024 1.1597 10.9729 3.8934 fold_4 1.0111 1.1675 11.2779 3.9051 Fold score stats metric mean max min std mae 1.0059 1.0111 1.0024 0.0030 rmse 1.1631 1.1675 1.1597 0.0032 mape* 9.9487 11.6409 7.2868 1.7134 max_error 3.8970 3.9096 3.8782 0.0109 Fold parameters fold params dict fold_0 {'constant_': [[-1.4071424641223964]]} fold_1 {'constant_': [[-1.4079146341783042]]} fold_2 {'constant_': [[-1.4100821676758766]]} fold_3 {'constant_': [[-1.406498235557698]]} fold_4 {'constant_': [[-1.4079540738106724]]} matbench_mp_gap Fold scores fold mae rmse mape* max_error fold_0 1.3199 1.5863 13.8283 7.1079 fold_1 1.3224 1.5888 12.1282 8.1096 fold_2 1.3252 1.5964 14.5509 7.6322 fold_3 1.3335 1.6113 19.3774 7.4334 fold_4 1.3348 1.6118 18.0392 8.5092 Fold score stats metric mean max min std mae 1.3272 1.3348 1.3199 0.0060 rmse 1.5989 1.6118 1.5863 0.0108 mape* 15.5848 19.3774 12.1282 2.7022 max_error 7.7585 8.5092 7.1079 0.4963 Fold parameters fold params dict fold_0 {'constant_': [[1.216204829779715]]} fold_1 {'constant_': [[1.2168485710920014]]} fold_2 {'constant_': [[1.2161007256449523]]} fold_3 {'constant_': [[1.2119634071927532]]} fold_4 {'constant_': [[1.2120157684560202]]} matbench_mp_is_metal Fold scores fold accuracy balanced_accuracy f1 rocauc fold_0 0.5158 0.5069 0.4405 0.5069 fold_1 0.5032 0.4944 0.4277 0.4944 fold_2 0.5069 0.4986 0.4342 0.4986 fold_3 0.5119 0.5032 0.4376 0.5032 fold_4 0.5118 0.5030 0.4367 0.5030 Fold score stats metric mean max min std accuracy 0.5099 0.5158 0.5032 0.0044 balanced_accuracy 0.5012 0.5069 0.4944 0.0043 f1 0.4353 0.4405 0.4277 0.0043 rocauc 0.5012 0.5069 0.4944 0.0043 Fold parameters fold params dict fold_0 {'class_prior_': [0.5650724466957239, 0.4349275533042761]} fold_1 {'class_prior_': [0.5650724466957239, 0.4349275533042761]} fold_2 {'class_prior_': [0.5650842266462481, 0.4349157733537519]} fold_3 {'class_prior_': [0.5650775700604305, 0.4349224299395696]} fold_4 {'class_prior_': [0.5650775700604305, 0.4349224299395696]} matbench_perovskites Fold scores fold mae rmse mape* max_error fold_0 0.5672 0.7361 0.7398 3.4868 fold_1 0.5742 0.7618 0.8046 3.3123 fold_2 0.5660 0.7438 0.7674 3.6873 fold_3 0.5614 0.7342 0.7738 3.3906 fold_4 0.5612 0.7362 0.7058 3.5084 Fold score stats metric mean max min std mae 0.5660 0.5742 0.5612 0.0048 rmse 0.7424 0.7618 0.7342 0.0102 mape* 0.7583 0.8046 0.7058 0.0334 max_error 3.4771 3.6873 3.3123 0.1264 Fold parameters fold params dict fold_0 {'constant_': [[1.4731871615374454]]} fold_1 {'constant_': [[1.4677308149517898]]} fold_2 {'constant_': [[1.4726720380398888]]} fold_3 {'constant_': [[1.4694433071386122]]} fold_4 {'constant_': [[1.4716264940896784]]} matbench_phonons Fold scores fold mae rmse mape* max_error fold_0 337.1003 542.7449 0.8225 3020.7169 fold_1 299.1209 452.2982 0.7977 2702.0312 fold_2 348.2576 545.4772 0.9223 3062.3450 fold_3 325.2402 480.9296 1.0268 3048.7920 fold_4 310.1921 439.3166 0.8936 1970.0884 Fold score stats metric mean max min std mae 323.9822 348.2576 299.1209 17.7269 rmse 492.1533 545.4772 439.3166 44.5176 mape* 0.8926 1.0268 0.7977 0.0810 max_error 2760.7947 3062.3450 1970.0884 417.1581 Fold parameters fold params dict fold_0 {'constant_': [[571.8686083004105]]} fold_1 {'constant_': [[583.1997247898747]]} fold_2 {'constant_': [[581.3984519265839]]} fold_3 {'constant_': [[588.7935123141577]]} fold_4 {'constant_': [[581.4972239423439]]} matbench_steels Fold scores fold mae rmse mape* max_error fold_0 241.4591 293.7245 0.1647 941.0643 fold_1 219.3770 289.2253 0.1550 1064.2831 fold_2 225.7932 291.5410 0.1600 1084.8760 fold_3 241.2035 343.9346 0.1567 1088.0568 fold_4 220.8898 287.6803 0.1576 983.3424 Fold score stats metric mean max min std mae 229.7445 241.4591 219.3770 9.6958 rmse 301.2211 343.9346 287.6803 21.4551 mape* 0.1588 0.1647 0.1550 0.0034 max_error 1032.3245 1088.0568 941.0643 59.3579 Fold parameters fold params dict fold_0 {'constant_': [[1415.3357429718874]]} fold_1 {'constant_': [[1423.0168674698796]]} fold_2 {'constant_': [[1425.424]]} fold_3 {'constant_': [[1413.0431999999998]]} fold_4 {'constant_': [[1428.1575999999998]]}","title":"matbench_v0.1: Dummy"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_v01-dummy","text":"","title":"matbench_v0.1: Dummy"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#algorithm-description","text":"Dummy regressor, using strategy 'mean', and Dummy regressor, using strategy 'stratified'. No notes. Raw data download and example notebook available on the matbench repo .","title":"Algorithm description:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#references-in-bibtex-format","text":"('@article{Dunn2020,\\n' ' doi = {10.1038/s41524-020-00406-3},\\n' ' url = {https://doi.org/10.1038/s41524-020-00406-3},\\n' ' year = {2020},\\n' ' month = sep,\\n' ' publisher = {Springer Science and Business Media {LLC}},\\n' ' volume = {6},\\n' ' number = {1},\\n' ' author = {Alexander Dunn and Qi Wang and Alex Ganose and Daniel Dopp and ' 'Anubhav Jain},\\n' ' title = {Benchmarking materials property prediction methods: the Matbench ' 'test set and Automatminer reference algorithm},\\n' ' journal = {npj Computational Materials}\\n' '}')","title":"References (in bibtex format):"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#user-metadata","text":"{'algorithm': 'dummy', 'classification_strategy': 'stratified', 'regression_strategy': 'mean'}","title":"User metadata:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#metadata","text":"Tasks recorded: 13 of 13 total Benchmark is complete? True","title":"Metadata:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#software-requirements","text":"{'python': ['scikit-learn==0.24.1', 'numpy==1.20.1', 'matbench==0.1.0']}","title":"Software Requirements"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#task-data","text":"","title":"Task data:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_dielectric","text":"","title":"matbench_dielectric"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-scores","text":"fold mae rmse mape* max_error fold_0 0.7026 1.0677 0.3201 14.9501 fold_1 0.7811 1.4374 0.3142 20.3552 fold_2 0.9218 3.1055 0.3155 59.6653 fold_3 0.8382 2.4438 0.3266 53.4563 fold_4 0.8004 1.8094 0.3222 28.5706","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-score-stats","text":"metric mean max min std mae 0.8088 0.9218 0.7026 0.0718 rmse 1.9728 3.1055 1.0677 0.7263 mape* 0.3197 0.3266 0.3142 0.0045 max_error 35.3995 59.6653 14.9501 17.9221","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-parameters","text":"fold params dict fold_0 {'constant_': [[2.4569770107667264]]} fold_1 {'constant_': [[2.4254682439737882]]} fold_2 {'constant_': [[2.397736448888908]]} fold_3 {'constant_': [[2.429725254851624]]} fold_4 {'constant_': [[2.4316628587393003]]}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_expt_gap","text":"","title":"matbench_expt_gap"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-scores_1","text":"fold mae rmse mape* max_error fold_0 1.0965 1.3397 0.8589 7.0119 fold_1 1.1922 1.5156 0.7802 8.3754 fold_2 1.1527 1.5268 1.0398 10.7354 fold_3 1.1445 1.4389 0.8373 9.5190 fold_4 1.1317 1.3979 1.2418 9.0085","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-score-stats_1","text":"metric mean max min std mae 1.1435 1.1922 1.0965 0.0310 rmse 1.4438 1.5268 1.3397 0.0707 mape* 0.9516 1.2418 0.7802 0.1692 max_error 8.9300 10.7354 7.0119 1.2328","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-parameters_1","text":"fold params dict fold_0 {'constant_': [[0.9881156665761609]]} fold_1 {'constant_': [[0.9545533532446375]]} fold_2 {'constant_': [[0.9645506380667934]]} fold_3 {'constant_': [[0.9810371979364648]]} fold_4 {'constant_': [[0.9914956568946797]]}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_expt_is_metal","text":"","title":"matbench_expt_is_metal"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-scores_2","text":"fold accuracy balanced_accuracy f1 rocauc fold_0 0.4701 0.4700 0.4540 0.4700 fold_1 0.5000 0.5001 0.5080 0.5001 fold_2 0.4878 0.4878 0.4878 0.4878 fold_3 0.5071 0.5072 0.5126 0.5072 fold_4 0.4970 0.4969 0.4944 0.4969","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-score-stats_2","text":"metric mean max min std accuracy 0.4924 0.5071 0.4701 0.0128 balanced_accuracy 0.4924 0.5072 0.4700 0.0128 f1 0.4913 0.5126 0.4540 0.0207 rocauc 0.4924 0.5072 0.4700 0.0128","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-parameters_2","text":"fold params dict fold_0 {'class_prior_': [0.5020325203252033, 0.49796747967479676]} fold_1 {'class_prior_': [0.5019050038100076, 0.49809499618999237]} fold_2 {'class_prior_': [0.5019050038100076, 0.49809499618999237]} fold_3 {'class_prior_': [0.5019050038100076, 0.49809499618999237]} fold_4 {'class_prior_': [0.5019050038100076, 0.49809499618999237]}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_glass","text":"","title":"matbench_glass"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-scores_3","text":"fold accuracy balanced_accuracy f1 rocauc fold_0 0.6127 0.5212 0.7304 0.5212 fold_1 0.6083 0.5217 0.7251 0.5217 fold_2 0.5775 0.4848 0.7033 0.4848 fold_3 0.5731 0.4799 0.7001 0.4799 fold_4 0.5819 0.4951 0.7044 0.4951","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-score-stats_3","text":"metric mean max min std accuracy 0.5907 0.6127 0.5731 0.0165 balanced_accuracy 0.5005 0.5217 0.4799 0.0178 f1 0.7127 0.7304 0.7001 0.0125 rocauc 0.5005 0.5217 0.4799 0.0178","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-parameters_3","text":"fold params dict fold_0 {'class_prior_': [0.289612676056338, 0.710387323943662]} fold_1 {'class_prior_': [0.289612676056338, 0.710387323943662]} fold_2 {'class_prior_': [0.289612676056338, 0.710387323943662]} fold_3 {'class_prior_': [0.289612676056338, 0.710387323943662]} fold_4 {'class_prior_': [0.289612676056338, 0.710387323943662]}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_jdft2d","text":"","title":"matbench_jdft2d"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-scores_4","text":"fold mae rmse mape* max_error fold_0 53.1447 74.1060 35.3098 509.7791 fold_1 72.8118 118.0523 0.8129 642.7424 fold_2 83.1220 192.2365 0.9798 1025.0199 fold_3 61.3174 85.6603 0.7921 468.0412 fold_4 66.0295 164.1680 1.1452 1491.7993","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-score-stats_4","text":"metric mean max min std mae 67.2851 83.1220 53.1447 10.1832 rmse 126.8446 192.2365 74.1060 45.2193 mape* 7.8079 35.3098 0.7921 13.7515 max_error 827.4764 1491.7993 468.0412 385.9016","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-parameters_4","text":"fold params dict fold_0 {'constant_': [[117.03965287603667]]} fold_1 {'constant_': [[112.91320041366653]]} fold_2 {'constant_': [[106.46511492350562]]} fold_3 {'constant_': [[114.84311227394852]]} fold_4 {'constant_': [[112.23899155170879]]}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_log_gvrh","text":"","title":"matbench_log_gvrh"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-scores_5","text":"fold mae rmse mape* max_error fold_0 0.2943 0.3749 0.2368 1.5529 fold_1 0.2933 0.3743 0.2359 1.5544 fold_2 0.2969 0.3736 0.2353 1.5533 fold_3 0.2875 0.3646 0.2251 1.5524 fold_4 0.2937 0.3706 0.2334 1.5552","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-score-stats_5","text":"metric mean max min std mae 0.2931 0.2969 0.2875 0.0031 rmse 0.3716 0.3749 0.3646 0.0038 mape* 0.2333 0.2368 0.2251 0.0042 max_error 1.5536 1.5552 1.5524 0.0010","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-parameters_5","text":"fold params dict fold_0 {'constant_': [[1.5529289714161707]]} fold_1 {'constant_': [[1.554355173237515]]} fold_2 {'constant_': [[1.5532719705303168]]} fold_3 {'constant_': [[1.5523993668681186]]} fold_4 {'constant_': [[1.5552370733167413]]}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_log_kvrh","text":"","title":"matbench_log_kvrh"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-scores_6","text":"fold mae rmse mape* max_error fold_0 0.2935 0.3774 0.1877 1.8800 fold_1 0.2875 0.3669 0.1858 1.8809 fold_2 0.2889 0.3634 0.1825 1.8801 fold_3 0.2833 0.3635 0.1926 1.8790 fold_4 0.2953 0.3752 0.1900 1.8822","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-score-stats_6","text":"metric mean max min std mae 0.2897 0.2953 0.2833 0.0043 rmse 0.3693 0.3774 0.3634 0.0059 mape* 0.1877 0.1926 0.1825 0.0035 max_error 1.8804 1.8822 1.8790 0.0011","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-parameters_6","text":"fold params dict fold_0 {'constant_': [[1.8800295900875317]]} fold_1 {'constant_': [[1.880914404358644]]} fold_2 {'constant_': [[1.8800659898099186]]} fold_3 {'constant_': [[1.8789962707394416]]} fold_4 {'constant_': [[1.8822230471663404]]}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_mp_e_form","text":"","title":"matbench_mp_e_form"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-scores_7","text":"fold mae rmse mape* max_error fold_0 1.0063 1.1626 11.6409 3.8987 fold_1 1.0036 1.1597 7.2868 3.8782 fold_2 1.0062 1.1662 8.5651 3.9096 fold_3 1.0024 1.1597 10.9729 3.8934 fold_4 1.0111 1.1675 11.2779 3.9051","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-score-stats_7","text":"metric mean max min std mae 1.0059 1.0111 1.0024 0.0030 rmse 1.1631 1.1675 1.1597 0.0032 mape* 9.9487 11.6409 7.2868 1.7134 max_error 3.8970 3.9096 3.8782 0.0109","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-parameters_7","text":"fold params dict fold_0 {'constant_': [[-1.4071424641223964]]} fold_1 {'constant_': [[-1.4079146341783042]]} fold_2 {'constant_': [[-1.4100821676758766]]} fold_3 {'constant_': [[-1.406498235557698]]} fold_4 {'constant_': [[-1.4079540738106724]]}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_mp_gap","text":"","title":"matbench_mp_gap"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-scores_8","text":"fold mae rmse mape* max_error fold_0 1.3199 1.5863 13.8283 7.1079 fold_1 1.3224 1.5888 12.1282 8.1096 fold_2 1.3252 1.5964 14.5509 7.6322 fold_3 1.3335 1.6113 19.3774 7.4334 fold_4 1.3348 1.6118 18.0392 8.5092","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-score-stats_8","text":"metric mean max min std mae 1.3272 1.3348 1.3199 0.0060 rmse 1.5989 1.6118 1.5863 0.0108 mape* 15.5848 19.3774 12.1282 2.7022 max_error 7.7585 8.5092 7.1079 0.4963","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-parameters_8","text":"fold params dict fold_0 {'constant_': [[1.216204829779715]]} fold_1 {'constant_': [[1.2168485710920014]]} fold_2 {'constant_': [[1.2161007256449523]]} fold_3 {'constant_': [[1.2119634071927532]]} fold_4 {'constant_': [[1.2120157684560202]]}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_mp_is_metal","text":"","title":"matbench_mp_is_metal"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-scores_9","text":"fold accuracy balanced_accuracy f1 rocauc fold_0 0.5158 0.5069 0.4405 0.5069 fold_1 0.5032 0.4944 0.4277 0.4944 fold_2 0.5069 0.4986 0.4342 0.4986 fold_3 0.5119 0.5032 0.4376 0.5032 fold_4 0.5118 0.5030 0.4367 0.5030","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-score-stats_9","text":"metric mean max min std accuracy 0.5099 0.5158 0.5032 0.0044 balanced_accuracy 0.5012 0.5069 0.4944 0.0043 f1 0.4353 0.4405 0.4277 0.0043 rocauc 0.5012 0.5069 0.4944 0.0043","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-parameters_9","text":"fold params dict fold_0 {'class_prior_': [0.5650724466957239, 0.4349275533042761]} fold_1 {'class_prior_': [0.5650724466957239, 0.4349275533042761]} fold_2 {'class_prior_': [0.5650842266462481, 0.4349157733537519]} fold_3 {'class_prior_': [0.5650775700604305, 0.4349224299395696]} fold_4 {'class_prior_': [0.5650775700604305, 0.4349224299395696]}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_perovskites","text":"","title":"matbench_perovskites"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-scores_10","text":"fold mae rmse mape* max_error fold_0 0.5672 0.7361 0.7398 3.4868 fold_1 0.5742 0.7618 0.8046 3.3123 fold_2 0.5660 0.7438 0.7674 3.6873 fold_3 0.5614 0.7342 0.7738 3.3906 fold_4 0.5612 0.7362 0.7058 3.5084","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-score-stats_10","text":"metric mean max min std mae 0.5660 0.5742 0.5612 0.0048 rmse 0.7424 0.7618 0.7342 0.0102 mape* 0.7583 0.8046 0.7058 0.0334 max_error 3.4771 3.6873 3.3123 0.1264","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-parameters_10","text":"fold params dict fold_0 {'constant_': [[1.4731871615374454]]} fold_1 {'constant_': [[1.4677308149517898]]} fold_2 {'constant_': [[1.4726720380398888]]} fold_3 {'constant_': [[1.4694433071386122]]} fold_4 {'constant_': [[1.4716264940896784]]}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_phonons","text":"","title":"matbench_phonons"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-scores_11","text":"fold mae rmse mape* max_error fold_0 337.1003 542.7449 0.8225 3020.7169 fold_1 299.1209 452.2982 0.7977 2702.0312 fold_2 348.2576 545.4772 0.9223 3062.3450 fold_3 325.2402 480.9296 1.0268 3048.7920 fold_4 310.1921 439.3166 0.8936 1970.0884","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-score-stats_11","text":"metric mean max min std mae 323.9822 348.2576 299.1209 17.7269 rmse 492.1533 545.4772 439.3166 44.5176 mape* 0.8926 1.0268 0.7977 0.0810 max_error 2760.7947 3062.3450 1970.0884 417.1581","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-parameters_11","text":"fold params dict fold_0 {'constant_': [[571.8686083004105]]} fold_1 {'constant_': [[583.1997247898747]]} fold_2 {'constant_': [[581.3984519265839]]} fold_3 {'constant_': [[588.7935123141577]]} fold_4 {'constant_': [[581.4972239423439]]}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#matbench_steels","text":"","title":"matbench_steels"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-scores_12","text":"fold mae rmse mape* max_error fold_0 241.4591 293.7245 0.1647 941.0643 fold_1 219.3770 289.2253 0.1550 1064.2831 fold_2 225.7932 291.5410 0.1600 1084.8760 fold_3 241.2035 343.9346 0.1567 1088.0568 fold_4 220.8898 287.6803 0.1576 983.3424","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-score-stats_12","text":"metric mean max min std mae 229.7445 241.4591 219.3770 9.6958 rmse 301.2211 343.9346 287.6803 21.4551 mape* 0.1588 0.1647 0.1550 0.0034 max_error 1032.3245 1088.0568 941.0643 59.3579","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_dummy/#fold-parameters_12","text":"fold params dict fold_0 {'constant_': [[1415.3357429718874]]} fold_1 {'constant_': [[1423.0168674698796]]} fold_2 {'constant_': [[1425.424]]} fold_3 {'constant_': [[1413.0431999999998]]} fold_4 {'constant_': [[1428.1575999999998]]}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/","text":"matbench_v0.1: MODNet (v0.1.10) Algorithm description: MODNet, the Materials Optimal Descriptor Network (v0.1.10). A feed-forward neural network, using all compatible matminer features and a relevance-redundancy based feature selection algorithm. Hyperparameter optimisation is performed with a nested grid search. Benchmark results were loaded from https://github.com/ml-evs/modnet-matbench. None Raw data download and example notebook available on the matbench repo . References (in bibtex format): ('@article{De_Breuck_2021, doi = {10.1088/1361-648x/ac1280}, url = ' '{https://doi.org/10.1088/1361-648x/ac1280}, year = 2021, month = {jul}, ' 'publisher = {{IOP} Publishing}, volume = {33}, number = {40}, pages = ' '{404002}, author = {Pierre-Paul De Breuck and Matthew L Evans and Gian-Marco ' 'Rignanese}, title = {Robust model benchmarking and bias-imbalance in ' 'data-driven materials science: a case study on {MODNet}}, journal = {Journal ' 'of Physics: Condensed Matter}, abstract = {As the number of novel ' 'data-driven approaches to material science continues to grow, it is crucial ' 'to perform consistent quality, reliability and applicability assessments of ' 'model performance. In this paper, we benchmark the Materials Optimal ' 'Descriptor Network (MODNet) method and architecture against the recently ' 'released MatBench v0.1, a curated test suite of materials datasets. MODNet ' 'is shown to outperform current leaders on 6 of the 13 tasks, while closely ' 'matching the current leaders on a further 2 tasks; MODNet performs ' 'particularly well when the number of samples is below 10\\xa0000. Attention ' 'is paid to two topics of concern when benchmarking models. First, we ' 'encourage the reporting of a more diverse set of metrics as it leads to a ' 'more comprehensive and holistic comparison of model performance. Second, an ' 'equally important task is the uncertainty assessment of a model towards a ' 'target domain. Significant variations in validation errors can be observed, ' 'depending on the imbalance and bias in the training set (i.e., similarity ' 'between training and application space). By using an ensemble MODNet model, ' 'confidence intervals can be built and the uncertainty on individual ' 'predictions can be quantified. Imbalance and bias issues are often ' 'overlooked, and yet are important for successful real-world applications of ' 'machine learning in materials science and condensed matter.}}, ' '@article{DeBreuck2021, doi = {10.1038/s41524-021-00552-2}, url = ' '{https://doi.org/10.1038/s41524-021-00552-2}, year = {2021}, month = jun, ' 'publisher = {Springer Science and Business Media {LLC}}, volume = {7}, ' 'number = {1}, author = {Pierre-Paul De Breuck and Geoffroy Hautier and ' 'Gian-Marco Rignanese}, title = {Materials property prediction for limited ' 'datasets enabled by feature selection and joint learning with {MODNet}}, ' 'journal = {npj Computational Materials}}') User metadata: {} Metadata: Tasks recorded: 7 of 13 total Benchmark is complete? False Benchmark is structure complete? False Benchmark is composition complete? False Benchmark is regression complete? False Benchmark is classification complete? False Software Requirements {'python': ['modnet==0.1.10', 'matbench==0.2.0']} Task data: matbench_dielectric Fold scores fold mae rmse mape* max_error fold_0 0.1939 0.7043 0.0657 13.9549 fold_1 0.2669 1.0559 0.0897 19.4132 fold_2 0.4138 2.9360 0.0873 58.9519 fold_3 0.2880 2.2447 0.0593 52.4648 fold_4 0.3223 1.6518 0.1040 28.0662 Fold score stats metric mean max min std mae 0.2970 0.4138 0.1939 0.0720 rmse 1.7185 2.9360 0.7043 0.8039 mape* 0.0812 0.1040 0.0593 0.0164 max_error 34.5702 58.9519 13.9549 17.9539 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_expt_gap Fold scores fold mae rmse mape* max_error fold_0 0.3272 0.7062 0.3510 6.3096 fold_1 0.3594 0.7340 0.3187 6.3544 fold_2 0.3845 0.8563 0.3841 9.8567 fold_3 0.3259 0.6888 0.3231 5.1081 fold_4 0.3382 0.7334 0.4075 6.5141 Fold score stats metric mean max min std mae 0.3470 0.3845 0.3259 0.0222 rmse 0.7437 0.8563 0.6888 0.0588 mape* 0.3569 0.4075 0.3187 0.0345 max_error 6.8286 9.8567 5.1081 1.5952 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_jdft2d Fold scores fold mae rmse mape* max_error fold_0 27.5769 49.7512 21.3632 243.2504 fold_1 27.9722 63.3103 0.2282 364.1909 fold_2 51.3402 142.7963 0.6111 845.7528 fold_3 26.9141 52.8447 0.2724 311.7558 fold_4 38.8806 152.4413 0.4853 1534.9797 Fold score stats metric mean max min std mae 34.5368 51.3402 26.9141 9.4959 rmse 92.2288 152.4413 49.7512 45.5508 mape* 4.5920 21.3632 0.2282 8.3868 max_error 659.9859 1534.9797 243.2504 486.3231 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_log_gvrh Fold scores fold mae rmse mape* max_error fold_0 0.0731 0.1089 0.0576 0.9014 fold_1 0.0738 0.1111 0.0579 1.1745 fold_2 0.0731 0.1101 0.0587 0.9076 fold_3 0.0738 0.1115 0.0567 0.9225 fold_4 0.0718 0.1101 0.0560 0.8007 Fold score stats metric mean max min std mae 0.0731 0.0738 0.0718 0.0007 rmse 0.1103 0.1115 0.1089 0.0009 mape* 0.0574 0.0587 0.0560 0.0009 max_error 0.9413 1.1745 0.8007 0.1243 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_log_kvrh Fold scores fold mae rmse mape* max_error fold_0 0.0536 0.1013 0.0356 1.5366 fold_1 0.0559 0.1079 0.0366 1.2998 fold_2 0.0510 0.0949 0.0340 1.1808 fold_3 0.0585 0.1126 0.0418 1.1355 fold_4 0.0549 0.1046 0.0370 1.3202 Fold score stats metric mean max min std mae 0.0548 0.0585 0.0510 0.0025 rmse 0.1043 0.1126 0.0949 0.0060 mape* 0.0370 0.0418 0.0340 0.0026 max_error 1.2946 1.5366 1.1355 0.1397 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_phonons Fold scores fold mae rmse mape* max_error fold_0 40.2218 99.9366 0.0661 1031.8168 fold_1 41.1190 83.0600 0.0680 721.2376 fold_2 38.8526 70.0409 0.0705 452.0254 fold_3 37.1039 78.3636 0.0710 662.8152 fold_4 36.4648 59.7092 0.0665 342.3226 Fold score stats metric mean max min std mae 38.7524 41.1190 36.4648 1.7732 rmse 78.2220 99.9366 59.7092 13.4507 mape* 0.0684 0.0710 0.0661 0.0020 max_error 642.0435 1031.8168 342.3226 238.5648 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {} matbench_steels Fold scores fold mae rmse mape* max_error fold_0 112.2905 189.8130 0.0707 931.3261 fold_1 81.9908 115.9188 0.0604 404.5644 fold_2 99.3739 139.4921 0.0699 411.7195 fold_3 93.2877 152.1443 0.0672 827.5305 fold_4 94.1265 152.3995 0.0709 672.9292 Fold score stats metric mean max min std mae 96.2139 112.2905 81.9908 9.8352 rmse 149.9535 189.8130 115.9188 23.9473 mape* 0.0678 0.0709 0.0604 0.0039 max_error 649.6139 931.3261 404.5644 213.6365 Fold parameters fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"matbench_v0.1: MODNet (v0.1.10)"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#matbench_v01-modnet-v0110","text":"","title":"matbench_v0.1: MODNet (v0.1.10)"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#algorithm-description","text":"MODNet, the Materials Optimal Descriptor Network (v0.1.10). A feed-forward neural network, using all compatible matminer features and a relevance-redundancy based feature selection algorithm. Hyperparameter optimisation is performed with a nested grid search. Benchmark results were loaded from https://github.com/ml-evs/modnet-matbench. None Raw data download and example notebook available on the matbench repo .","title":"Algorithm description:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#references-in-bibtex-format","text":"('@article{De_Breuck_2021, doi = {10.1088/1361-648x/ac1280}, url = ' '{https://doi.org/10.1088/1361-648x/ac1280}, year = 2021, month = {jul}, ' 'publisher = {{IOP} Publishing}, volume = {33}, number = {40}, pages = ' '{404002}, author = {Pierre-Paul De Breuck and Matthew L Evans and Gian-Marco ' 'Rignanese}, title = {Robust model benchmarking and bias-imbalance in ' 'data-driven materials science: a case study on {MODNet}}, journal = {Journal ' 'of Physics: Condensed Matter}, abstract = {As the number of novel ' 'data-driven approaches to material science continues to grow, it is crucial ' 'to perform consistent quality, reliability and applicability assessments of ' 'model performance. In this paper, we benchmark the Materials Optimal ' 'Descriptor Network (MODNet) method and architecture against the recently ' 'released MatBench v0.1, a curated test suite of materials datasets. MODNet ' 'is shown to outperform current leaders on 6 of the 13 tasks, while closely ' 'matching the current leaders on a further 2 tasks; MODNet performs ' 'particularly well when the number of samples is below 10\\xa0000. Attention ' 'is paid to two topics of concern when benchmarking models. First, we ' 'encourage the reporting of a more diverse set of metrics as it leads to a ' 'more comprehensive and holistic comparison of model performance. Second, an ' 'equally important task is the uncertainty assessment of a model towards a ' 'target domain. Significant variations in validation errors can be observed, ' 'depending on the imbalance and bias in the training set (i.e., similarity ' 'between training and application space). By using an ensemble MODNet model, ' 'confidence intervals can be built and the uncertainty on individual ' 'predictions can be quantified. Imbalance and bias issues are often ' 'overlooked, and yet are important for successful real-world applications of ' 'machine learning in materials science and condensed matter.}}, ' '@article{DeBreuck2021, doi = {10.1038/s41524-021-00552-2}, url = ' '{https://doi.org/10.1038/s41524-021-00552-2}, year = {2021}, month = jun, ' 'publisher = {Springer Science and Business Media {LLC}}, volume = {7}, ' 'number = {1}, author = {Pierre-Paul De Breuck and Geoffroy Hautier and ' 'Gian-Marco Rignanese}, title = {Materials property prediction for limited ' 'datasets enabled by feature selection and joint learning with {MODNet}}, ' 'journal = {npj Computational Materials}}')","title":"References (in bibtex format):"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#user-metadata","text":"{}","title":"User metadata:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#metadata","text":"Tasks recorded: 7 of 13 total Benchmark is complete? False Benchmark is structure complete? False Benchmark is composition complete? False Benchmark is regression complete? False Benchmark is classification complete? False","title":"Metadata:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#software-requirements","text":"{'python': ['modnet==0.1.10', 'matbench==0.2.0']}","title":"Software Requirements"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#task-data","text":"","title":"Task data:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#matbench_dielectric","text":"","title":"matbench_dielectric"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-scores","text":"fold mae rmse mape* max_error fold_0 0.1939 0.7043 0.0657 13.9549 fold_1 0.2669 1.0559 0.0897 19.4132 fold_2 0.4138 2.9360 0.0873 58.9519 fold_3 0.2880 2.2447 0.0593 52.4648 fold_4 0.3223 1.6518 0.1040 28.0662","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-score-stats","text":"metric mean max min std mae 0.2970 0.4138 0.1939 0.0720 rmse 1.7185 2.9360 0.7043 0.8039 mape* 0.0812 0.1040 0.0593 0.0164 max_error 34.5702 58.9519 13.9549 17.9539","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-parameters","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#matbench_expt_gap","text":"","title":"matbench_expt_gap"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-scores_1","text":"fold mae rmse mape* max_error fold_0 0.3272 0.7062 0.3510 6.3096 fold_1 0.3594 0.7340 0.3187 6.3544 fold_2 0.3845 0.8563 0.3841 9.8567 fold_3 0.3259 0.6888 0.3231 5.1081 fold_4 0.3382 0.7334 0.4075 6.5141","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-score-stats_1","text":"metric mean max min std mae 0.3470 0.3845 0.3259 0.0222 rmse 0.7437 0.8563 0.6888 0.0588 mape* 0.3569 0.4075 0.3187 0.0345 max_error 6.8286 9.8567 5.1081 1.5952","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-parameters_1","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#matbench_jdft2d","text":"","title":"matbench_jdft2d"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-scores_2","text":"fold mae rmse mape* max_error fold_0 27.5769 49.7512 21.3632 243.2504 fold_1 27.9722 63.3103 0.2282 364.1909 fold_2 51.3402 142.7963 0.6111 845.7528 fold_3 26.9141 52.8447 0.2724 311.7558 fold_4 38.8806 152.4413 0.4853 1534.9797","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-score-stats_2","text":"metric mean max min std mae 34.5368 51.3402 26.9141 9.4959 rmse 92.2288 152.4413 49.7512 45.5508 mape* 4.5920 21.3632 0.2282 8.3868 max_error 659.9859 1534.9797 243.2504 486.3231","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-parameters_2","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#matbench_log_gvrh","text":"","title":"matbench_log_gvrh"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-scores_3","text":"fold mae rmse mape* max_error fold_0 0.0731 0.1089 0.0576 0.9014 fold_1 0.0738 0.1111 0.0579 1.1745 fold_2 0.0731 0.1101 0.0587 0.9076 fold_3 0.0738 0.1115 0.0567 0.9225 fold_4 0.0718 0.1101 0.0560 0.8007","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-score-stats_3","text":"metric mean max min std mae 0.0731 0.0738 0.0718 0.0007 rmse 0.1103 0.1115 0.1089 0.0009 mape* 0.0574 0.0587 0.0560 0.0009 max_error 0.9413 1.1745 0.8007 0.1243","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-parameters_3","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#matbench_log_kvrh","text":"","title":"matbench_log_kvrh"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-scores_4","text":"fold mae rmse mape* max_error fold_0 0.0536 0.1013 0.0356 1.5366 fold_1 0.0559 0.1079 0.0366 1.2998 fold_2 0.0510 0.0949 0.0340 1.1808 fold_3 0.0585 0.1126 0.0418 1.1355 fold_4 0.0549 0.1046 0.0370 1.3202","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-score-stats_4","text":"metric mean max min std mae 0.0548 0.0585 0.0510 0.0025 rmse 0.1043 0.1126 0.0949 0.0060 mape* 0.0370 0.0418 0.0340 0.0026 max_error 1.2946 1.5366 1.1355 0.1397","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-parameters_4","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#matbench_phonons","text":"","title":"matbench_phonons"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-scores_5","text":"fold mae rmse mape* max_error fold_0 40.2218 99.9366 0.0661 1031.8168 fold_1 41.1190 83.0600 0.0680 721.2376 fold_2 38.8526 70.0409 0.0705 452.0254 fold_3 37.1039 78.3636 0.0710 662.8152 fold_4 36.4648 59.7092 0.0665 342.3226","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-score-stats_5","text":"metric mean max min std mae 38.7524 41.1190 36.4648 1.7732 rmse 78.2220 99.9366 59.7092 13.4507 mape* 0.0684 0.0710 0.0661 0.0020 max_error 642.0435 1031.8168 342.3226 238.5648","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-parameters_5","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#matbench_steels","text":"","title":"matbench_steels"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-scores_6","text":"fold mae rmse mape* max_error fold_0 112.2905 189.8130 0.0707 931.3261 fold_1 81.9908 115.9188 0.0604 404.5644 fold_2 99.3739 139.4921 0.0699 411.7195 fold_3 93.2877 152.1443 0.0672 827.5305 fold_4 94.1265 152.3995 0.0709 672.9292","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-score-stats_6","text":"metric mean max min std mae 96.2139 112.2905 81.9908 9.8352 rmse 149.9535 189.8130 115.9188 23.9473 mape* 0.0678 0.0709 0.0604 0.0039 max_error 649.6139 931.3261 404.5644 213.6365","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_modnet_v0.1.10/#fold-parameters_6","text":"fold params dict fold_0 {} fold_1 {} fold_2 {} fold_3 {} fold_4 {}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/","text":"matbench_v0.1: RF-SCM/Magpie Algorithm description: A random forest using features from the Sine Coulomb Matrix and MagPie featurization algorthims. Sine Coulomb Matrix creates structural features based on Coulombic interactions inside a periodic boundary condition (i.e., for crystalline materials with known structure). MagPie features are weighted elemental features based on elemental data such as electronegativity, melting point, and electron affinity. Algorithms were run inside of the Automatminer v1.0.3.20191111 framework for convenience, though no auto-featurization or AutoML were run. Data cleaning dropped features with more than 1% nan samples, imputing missing samples using the mean of the training data. No feature reduction was performed. Both featurization techniques were applied to structure problems, only MagPie features were applied to problems without structure. Random forest uses 500 estimators. No hyperparameter tuning was performed on the RF, as a large, constant number of trees were used in constructing each fold's model; the entire training+validation set was used as training data for the RF. Raw data download and example notebook available on the matbench repo . References (in bibtex format): ['@article{Dunn2020,\\n' ' doi = {10.1038/s41524-020-00406-3},\\n' ' url = {https://doi.org/10.1038/s41524-020-00406-3},\\n' ' year = {2020},\\n' ' month = sep,\\n' ' publisher = {Springer Science and Business Media {LLC}},\\n' ' volume = {6},\\n' ' number = {1},\\n' ' author = {Alexander Dunn and Qi Wang and Alex Ganose and Daniel Dopp and ' 'Anubhav Jain},\\n' ' title = {Benchmarking materials property prediction methods: the Matbench ' 'test set and Automatminer reference algorithm},\\n' ' journal = {npj Computational Materials}\\n' '}', '@article{Breiman2001,\\n' ' doi = {10.1023/a:1010933404324},\\n' ' url = {https://doi.org/10.1023/a:1010933404324},\\n' ' year = {2001},\\n' ' publisher = {Springer Science and Business Media {LLC}},\\n' ' volume = {45},\\n' ' number = {1},\\n' ' pages = {5--32},\\n' ' author = {Leo Breiman},\\n' ' journal = {Machine Learning}\\n' '}', '@article{Ward2016,\\n' ' doi = {10.1038/npjcompumats.2016.28},\\n' ' url = {https://doi.org/10.1038/npjcompumats.2016.28},\\n' ' year = {2016},\\n' ' month = aug,\\n' ' publisher = {Springer Science and Business Media {LLC}},\\n' ' volume = {2},\\n' ' number = {1},\\n' ' author = {Logan Ward and Ankit Agrawal and Alok Choudhary and Christopher ' 'Wolverton},\\n' ' title = {A general-purpose machine learning framework for predicting ' 'properties of inorganic materials},\\n' ' journal = {npj Computational Materials}\\n' '}', '@article {QUA:QUA24917,author = {Faber, Felix and Lindmaa, Alexander and von ' 'Lilienfeld, O. Anatole and Armiento, Rickard},title = {Crystal structure ' 'representations for machine learning models of formation energies},journal = ' '{International Journal of Quantum Chemistry},volume = {115},number = ' '{16},issn = {1097-461X},url = {http://dx.doi.org/10.1002/qua.24917},doi = ' '{10.1002/qua.24917},pages = {1094--1101},keywords = {machine learning, ' 'formation energies, representations, crystal structure, periodic ' 'systems},year = {2015},}'] User metadata: {'__deepcopy__': {}, '__getstate__': {}, '_ipython_canary_method_should_not_exist_': {'__deepcopy__': {}, '__getstate__': {}}, 'autofeaturizer_kwargs': {'n_jobs': 10, 'preset': 'debug'}, 'best_pipeline': 'RandomForestRegressor(bootstrap=true, criterion=mse, ' 'max_depth=null,\\n' ' max_features=auto, max_leaf_nodes=null,\\n' ' min_impurity_decrease=0.0, ' 'min_impurity_split=null,\\n' ' min_samples_leaf=1, min_samples_split=2,\\n' ' min_weight_fraction_leaf=0.0, n_estimators=500, ' 'n_jobs=null,\\n' ' oob_score=false, random_state=null, verbose=0, ' 'warm_start=false)', 'cleaner_kwargs': {'feature_na_method': 'mean', 'max_na_frac': 0.01, 'na_method_fit': 'drop', 'na_method_transform': 'mean'}, 'features_all': ['MagpieData minimum Number', 'MagpieData maximum Number', 'MagpieData range Number', 'MagpieData mean Number', 'MagpieData avg_dev Number', 'MagpieData mode Number', 'MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData maximum AtomicWeight', 'MagpieData range AtomicWeight', 'MagpieData mean AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData mode AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData minimum Column', 'MagpieData maximum Column', 'MagpieData range Column', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mode Column', 'MagpieData minimum Row', 'MagpieData maximum Row', 'MagpieData range Row', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData mode Row', 'MagpieData minimum CovalentRadius', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData maximum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData minimum NsValence', 'MagpieData maximum NsValence', 'MagpieData range NsValence', 'MagpieData mean NsValence', 'MagpieData avg_dev NsValence', 'MagpieData mode NsValence', 'MagpieData minimum NpValence', 'MagpieData maximum NpValence', 'MagpieData range NpValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mode NpValence', 'MagpieData minimum NdValence', 'MagpieData maximum NdValence', 'MagpieData range NdValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData mode NdValence', 'MagpieData minimum NfValence', 'MagpieData maximum NfValence', 'MagpieData range NfValence', 'MagpieData mean NfValence', 'MagpieData avg_dev NfValence', 'MagpieData mode NfValence', 'MagpieData minimum NValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mode NValence', 'MagpieData minimum NsUnfilled', 'MagpieData maximum NsUnfilled', 'MagpieData range NsUnfilled', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NsUnfilled', 'MagpieData mode NsUnfilled', 'MagpieData minimum NpUnfilled', 'MagpieData maximum NpUnfilled', 'MagpieData range NpUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mode NpUnfilled', 'MagpieData minimum NdUnfilled', 'MagpieData maximum NdUnfilled', 'MagpieData range NdUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mode NdUnfilled', 'MagpieData minimum NfUnfilled', 'MagpieData maximum NfUnfilled', 'MagpieData range NfUnfilled', 'MagpieData mean NfUnfilled', 'MagpieData avg_dev NfUnfilled', 'MagpieData mode NfUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData minimum GSbandgap', 'MagpieData maximum GSbandgap', 'MagpieData range GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mode GSbandgap', 'MagpieData minimum GSmagmom', 'MagpieData maximum GSmagmom', 'MagpieData range GSmagmom', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mode GSmagmom', 'MagpieData minimum SpaceGroupNumber', 'MagpieData maximum SpaceGroupNumber', 'MagpieData range SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MagpieData mode SpaceGroupNumber', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 8', 'sine coulomb matrix eig 9', 'sine coulomb matrix eig 10', 'sine coulomb matrix eig 11', 'sine coulomb matrix eig 12', 'sine coulomb matrix eig 13', 'sine coulomb matrix eig 14', 'sine coulomb matrix eig 15', 'sine coulomb matrix eig 16', 'sine coulomb matrix eig 17', 'sine coulomb matrix eig 18', 'sine coulomb matrix eig 19', 'sine coulomb matrix eig 20', 'sine coulomb matrix eig 21', 'sine coulomb matrix eig 22', 'sine coulomb matrix eig 23', 'sine coulomb matrix eig 24', 'sine coulomb matrix eig 25', 'sine coulomb matrix eig 26', 'sine coulomb matrix eig 27', 'sine coulomb matrix eig 28', 'sine coulomb matrix eig 29', 'sine coulomb matrix eig 30', 'sine coulomb matrix eig 31', 'sine coulomb matrix eig 32', 'sine coulomb matrix eig 33', 'sine coulomb matrix eig 34', 'sine coulomb matrix eig 35', 'sine coulomb matrix eig 36', 'sine coulomb matrix eig 37', 'sine coulomb matrix eig 38', 'sine coulomb matrix eig 39', 'sine coulomb matrix eig 40', 'sine coulomb matrix eig 41', 'sine coulomb matrix eig 42', 'sine coulomb matrix eig 43', 'sine coulomb matrix eig 44', 'sine coulomb matrix eig 45', 'sine coulomb matrix eig 46', 'sine coulomb matrix eig 47', 'sine coulomb matrix eig 48', 'sine coulomb matrix eig 49', 'sine coulomb matrix eig 50', 'sine coulomb matrix eig 51', 'sine coulomb matrix eig 52', 'sine coulomb matrix eig 53', 'sine coulomb matrix eig 54', 'sine coulomb matrix eig 55', 'sine coulomb matrix eig 56', 'sine coulomb matrix eig 57', 'sine coulomb matrix eig 58', 'sine coulomb matrix eig 59', 'sine coulomb matrix eig 60', 'sine coulomb matrix eig 61', 'sine coulomb matrix eig 62', 'sine coulomb matrix eig 63', 'sine coulomb matrix eig 64', 'sine coulomb matrix eig 65', 'sine coulomb matrix eig 66', 'sine coulomb matrix eig 67', 'sine coulomb matrix eig 68', 'sine coulomb matrix eig 69', 'sine coulomb matrix eig 70', 'sine coulomb matrix eig 71', 'sine coulomb matrix eig 72', 'sine coulomb matrix eig 73', 'sine coulomb matrix eig 74', 'sine coulomb matrix eig 75', 'sine coulomb matrix eig 76', 'sine coulomb matrix eig 77', 'sine coulomb matrix eig 78', 'sine coulomb matrix eig 79', 'sine coulomb matrix eig 80', 'sine coulomb matrix eig 81', 'sine coulomb matrix eig 82', 'sine coulomb matrix eig 83', 'sine coulomb matrix eig 84', 'sine coulomb matrix eig 85', 'sine coulomb matrix eig 86', 'sine coulomb matrix eig 87', 'sine coulomb matrix eig 88', 'sine coulomb matrix eig 89', 'sine coulomb matrix eig 90', 'sine coulomb matrix eig 91', 'sine coulomb matrix eig 92', 'sine coulomb matrix eig 93', 'sine coulomb matrix eig 94', 'sine coulomb matrix eig 95', 'sine coulomb matrix eig 96', 'sine coulomb matrix eig 97', 'sine coulomb matrix eig 98', 'sine coulomb matrix eig 99', 'sine coulomb matrix eig 100', 'sine coulomb matrix eig 101', 'sine coulomb matrix eig 102', 'sine coulomb matrix eig 103', 'sine coulomb matrix eig 104', 'sine coulomb matrix eig 105', 'sine coulomb matrix eig 106', 'sine coulomb matrix eig 107', 'sine coulomb matrix eig 108', 'sine coulomb matrix eig 109', 'sine coulomb matrix eig 110', 'sine coulomb matrix eig 111', 'sine coulomb matrix eig 112', 'sine coulomb matrix eig 113', 'sine coulomb matrix eig 114', 'sine coulomb matrix eig 115', 'sine coulomb matrix eig 116', 'sine coulomb matrix eig 117', 'sine coulomb matrix eig 118', 'sine coulomb matrix eig 119', 'sine coulomb matrix eig 120', 'sine coulomb matrix eig 121', 'sine coulomb matrix eig 122', 'sine coulomb matrix eig 123', 'sine coulomb matrix eig 124', 'sine coulomb matrix eig 125', 'sine coulomb matrix eig 126', 'sine coulomb matrix eig 127', 'sine coulomb matrix eig 128', 'sine coulomb matrix eig 129', 'sine coulomb matrix eig 130', 'sine coulomb matrix eig 131', 'sine coulomb matrix eig 132', 'sine coulomb matrix eig 133', 'sine coulomb matrix eig 134', 'sine coulomb matrix eig 135', 'sine coulomb matrix eig 136', 'sine coulomb matrix eig 137', 'sine coulomb matrix eig 138', 'sine coulomb matrix eig 139', 'sine coulomb matrix eig 140', 'sine coulomb matrix eig 141', 'sine coulomb matrix eig 142', 'sine coulomb matrix eig 143', 'sine coulomb matrix eig 144', 'sine coulomb matrix eig 145', 'sine coulomb matrix eig 146', 'sine coulomb matrix eig 147', 'sine coulomb matrix eig 148', 'sine coulomb matrix eig 149', 'sine coulomb matrix eig 150', 'sine coulomb matrix eig 151', 'sine coulomb matrix eig 152', 'sine coulomb matrix eig 153', 'sine coulomb matrix eig 154', 'sine coulomb matrix eig 155', 'sine coulomb matrix eig 156', 'sine coulomb matrix eig 157', 'sine coulomb matrix eig 158', 'sine coulomb matrix eig 159', 'sine coulomb matrix eig 160', 'sine coulomb matrix eig 161', 'sine coulomb matrix eig 162', 'sine coulomb matrix eig 163', 'sine coulomb matrix eig 164', 'sine coulomb matrix eig 165', 'sine coulomb matrix eig 166', 'sine coulomb matrix eig 167', 'sine coulomb matrix eig 168', 'sine coulomb matrix eig 169', 'sine coulomb matrix eig 170', 'sine coulomb matrix eig 171', 'sine coulomb matrix eig 172', 'sine coulomb matrix eig 173', 'sine coulomb matrix eig 174', 'sine coulomb matrix eig 175', 'sine coulomb matrix eig 176', 'sine coulomb matrix eig 177', 'sine coulomb matrix eig 178', 'sine coulomb matrix eig 179', 'sine coulomb matrix eig 180', 'sine coulomb matrix eig 181', 'sine coulomb matrix eig 182', 'sine coulomb matrix eig 183', 'sine coulomb matrix eig 184', 'sine coulomb matrix eig 185', 'sine coulomb matrix eig 186', 'sine coulomb matrix eig 187', 'sine coulomb matrix eig 188', 'sine coulomb matrix eig 189', 'sine coulomb matrix eig 190', 'sine coulomb matrix eig 191', 'sine coulomb matrix eig 192', 'sine coulomb matrix eig 193', 'sine coulomb matrix eig 194', 'sine coulomb matrix eig 195', 'sine coulomb matrix eig 196', 'sine coulomb matrix eig 197', 'sine coulomb matrix eig 198', 'sine coulomb matrix eig 199', 'sine coulomb matrix eig 200', 'sine coulomb matrix eig 201', 'sine coulomb matrix eig 202', 'sine coulomb matrix eig 203', 'sine coulomb matrix eig 204', 'sine coulomb matrix eig 205', 'sine coulomb matrix eig 206', 'sine coulomb matrix eig 207', 'sine coulomb matrix eig 208', 'sine coulomb matrix eig 209', 'sine coulomb matrix eig 210', 'sine coulomb matrix eig 211', 'sine coulomb matrix eig 212', 'sine coulomb matrix eig 213', 'sine coulomb matrix eig 214', 'sine coulomb matrix eig 215', 'sine coulomb matrix eig 216', 'sine coulomb matrix eig 217', 'sine coulomb matrix eig 218', 'sine coulomb matrix eig 219', 'sine coulomb matrix eig 220', 'sine coulomb matrix eig 221', 'sine coulomb matrix eig 222', 'sine coulomb matrix eig 223', 'sine coulomb matrix eig 224', 'sine coulomb matrix eig 225', 'sine coulomb matrix eig 226', 'sine coulomb matrix eig 227', 'sine coulomb matrix eig 228', 'sine coulomb matrix eig 229', 'sine coulomb matrix eig 230', 'sine coulomb matrix eig 231', 'sine coulomb matrix eig 232', 'sine coulomb matrix eig 233', 'sine coulomb matrix eig 234', 'sine coulomb matrix eig 235', 'sine coulomb matrix eig 236', 'sine coulomb matrix eig 237', 'sine coulomb matrix eig 238', 'sine coulomb matrix eig 239', 'sine coulomb matrix eig 240', 'sine coulomb matrix eig 241', 'sine coulomb matrix eig 242', 'sine coulomb matrix eig 243', 'sine coulomb matrix eig 244', 'sine coulomb matrix eig 245', 'sine coulomb matrix eig 246', 'sine coulomb matrix eig 247', 'sine coulomb matrix eig 248', 'sine coulomb matrix eig 249', 'sine coulomb matrix eig 250', 'sine coulomb matrix eig 251', 'sine coulomb matrix eig 252', 'sine coulomb matrix eig 253', 'sine coulomb matrix eig 254', 'sine coulomb matrix eig 255', 'sine coulomb matrix eig 256', 'sine coulomb matrix eig 257', 'sine coulomb matrix eig 258', 'sine coulomb matrix eig 259', 'sine coulomb matrix eig 260', 'sine coulomb matrix eig 261', 'sine coulomb matrix eig 262', 'sine coulomb matrix eig 263', 'sine coulomb matrix eig 264', 'sine coulomb matrix eig 265', 'sine coulomb matrix eig 266', 'sine coulomb matrix eig 267', 'sine coulomb matrix eig 268', 'sine coulomb matrix eig 269', 'sine coulomb matrix eig 270', 'sine coulomb matrix eig 271', 'sine coulomb matrix eig 272', 'sine coulomb matrix eig 273', 'sine coulomb matrix eig 274', 'sine coulomb matrix eig 275', 'sine coulomb matrix eig 276', 'sine coulomb matrix eig 277', 'sine coulomb matrix eig 278', 'sine coulomb matrix eig 279', 'sine coulomb matrix eig 280', 'sine coulomb matrix eig 281', 'sine coulomb matrix eig 282', 'sine coulomb matrix eig 283', 'sine coulomb matrix eig 284', 'sine coulomb matrix eig 285', 'sine coulomb matrix eig 286', 'sine coulomb matrix eig 287'], 'learner_kwargs': {'n_estimators': 500}, 'learner_name': 'rf', 'reducer_kwargs': {'reducers': []}} Metadata: Tasks recorded: 13 of 13 total Benchmark is complete? True Software Requirements {'python': ['scikit-learn==0.24.1', 'numpy==1.20.1', 'matbench==0.1.0', 'automatminer==v1.0.3.20191111']} Task data: matbench_dielectric Fold scores fold mae rmse mape* max_error fold_0 0.3042 0.7850 0.1176 14.5979 fold_1 0.4079 1.2316 0.1509 20.1279 fold_2 0.5220 2.9832 0.1370 59.1201 fold_3 0.3879 2.1680 0.1057 49.4924 fold_4 0.4760 2.1012 0.1886 31.0645 Fold score stats metric mean max min std mae 0.4196 0.5220 0.3042 0.0750 rmse 1.8538 2.9832 0.7850 0.7700 mape* 0.1400 0.1886 0.1057 0.0289 max_error 34.8806 59.1201 14.5979 16.9980 Fold parameters fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'} matbench_expt_gap Fold scores fold mae rmse mape* max_error fold_0 0.4360 0.7985 0.3380 5.1654 fold_1 0.4387 0.7819 0.3044 4.7122 fold_2 0.4812 0.9435 0.4019 9.5428 fold_3 0.4345 0.8059 0.3647 5.2288 fold_4 0.4400 0.7918 0.4385 5.5833 Fold score stats metric mean max min std mae 0.4461 0.4812 0.4345 0.0177 rmse 0.8243 0.9435 0.7819 0.0601 mape* 0.3695 0.4385 0.3044 0.0470 max_error 6.0465 9.5428 4.7122 1.7700 Fold parameters fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'} matbench_expt_is_metal Fold scores fold accuracy balanced_accuracy f1 rocauc fold_0 0.9249 0.9248 0.9236 0.9248 fold_1 0.9167 0.9166 0.9156 0.9166 fold_2 0.9096 0.9095 0.9076 0.9095 fold_3 0.9228 0.9227 0.9221 0.9227 fold_4 0.9096 0.9096 0.9104 0.9096 Fold score stats metric mean max min std accuracy 0.9167 0.9249 0.9096 0.0064 balanced_accuracy 0.9167 0.9248 0.9095 0.0064 f1 0.9159 0.9236 0.9076 0.0063 rocauc 0.9167 0.9248 0.9095 0.0064 Fold parameters fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'} matbench_glass Fold scores fold accuracy balanced_accuracy f1 rocauc fold_0 0.9199 0.8860 0.9449 0.8860 fold_1 0.8856 0.8402 0.9217 0.8402 fold_2 0.8847 0.8495 0.9200 0.8495 fold_3 0.8891 0.8526 0.9233 0.8526 fold_4 0.8979 0.8651 0.9292 0.8651 Fold score stats metric mean max min std accuracy 0.8954 0.9199 0.8847 0.0131 balanced_accuracy 0.8587 0.8860 0.8402 0.0158 f1 0.9278 0.9449 0.9200 0.0091 rocauc 0.8587 0.8860 0.8402 0.0158 Fold parameters fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'} matbench_jdft2d Fold scores fold mae rmse mape* max_error fold_0 42.7473 72.7391 23.7625 295.7437 fold_1 45.7510 94.3771 0.4382 581.4859 fold_2 66.2421 153.0635 0.8747 836.6225 fold_3 44.0340 81.5112 0.4818 337.7693 fold_4 51.4457 159.6390 0.6384 1538.6073 Fold score stats metric mean max min std mae 50.0440 66.2421 42.7473 8.6271 rmse 112.2660 159.6390 72.7391 36.7066 mape* 5.2391 23.7625 0.4382 9.2629 max_error 718.0457 1538.6073 295.7437 453.6473 Fold parameters fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'} matbench_log_gvrh Fold scores fold mae rmse mape* max_error fold_0 0.1046 0.1515 0.0817 1.1754 fold_1 0.1024 0.1557 0.0815 1.6942 fold_2 0.1025 0.1533 0.0798 1.0668 fold_3 0.1037 0.1495 0.0777 0.9041 fold_4 0.1067 0.1601 0.0832 0.9480 Fold score stats metric mean max min std mae 0.1040 0.1067 0.1024 0.0016 rmse 0.1540 0.1601 0.1495 0.0037 mape* 0.0808 0.0832 0.0777 0.0019 max_error 1.1577 1.6942 0.9041 0.2845 Fold parameters fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'} matbench_log_kvrh Fold scores fold mae rmse mape* max_error fold_0 0.0809 0.1415 0.0522 1.4432 fold_1 0.0808 0.1503 0.0532 1.7642 fold_2 0.0783 0.1383 0.0509 1.1189 fold_3 0.0863 0.1478 0.0608 1.1620 fold_4 0.0836 0.1489 0.0558 1.3775 Fold score stats metric mean max min std mae 0.0820 0.0863 0.0783 0.0027 rmse 0.1454 0.1503 0.1383 0.0046 mape* 0.0546 0.0608 0.0509 0.0035 max_error 1.3732 1.7642 1.1189 0.2311 Fold parameters fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'} matbench_mp_e_form Fold scores fold mae rmse mape* max_error fold_0 0.1158 0.2386 0.9331 4.2469 fold_1 0.1160 0.2459 0.5068 5.4382 fold_2 0.1179 0.2443 0.5549 4.0782 fold_3 0.1159 0.2373 0.7206 2.9374 fold_4 0.1166 0.2435 0.6836 3.8910 Fold score stats metric mean max min std mae 0.1165 0.1179 0.1158 0.0008 rmse 0.2419 0.2459 0.2373 0.0034 mape* 0.6798 0.9331 0.5068 0.1492 max_error 4.1183 5.4382 2.9374 0.8008 Fold parameters fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'} matbench_mp_gap Fold scores fold mae rmse mape* max_error fold_0 0.3456 0.6097 5.6881 6.3322 fold_1 0.3417 0.6104 4.3547 7.0601 fold_2 0.3445 0.6047 6.9303 5.9201 fold_3 0.3427 0.6101 11.9090 6.6456 fold_4 0.3512 0.6276 9.2752 6.0212 Fold score stats metric mean max min std mae 0.3452 0.3512 0.3417 0.0033 rmse 0.6125 0.6276 0.6047 0.0079 mape* 7.6315 11.9090 4.3547 2.6835 max_error 6.3958 7.0601 5.9201 0.4182 Fold parameters fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'} matbench_mp_is_metal Fold scores fold accuracy balanced_accuracy f1 rocauc fold_0 0.9080 0.9025 0.8905 0.9025 fold_1 0.9027 0.8968 0.8839 0.8968 fold_2 0.9049 0.8987 0.8862 0.8987 fold_3 0.9051 0.8994 0.8869 0.8994 fold_4 0.9047 0.8984 0.8858 0.8984 Fold score stats metric mean max min std accuracy 0.9051 0.9080 0.9027 0.0017 balanced_accuracy 0.8992 0.9025 0.8968 0.0019 f1 0.8866 0.8905 0.8839 0.0022 rocauc 0.8992 0.9025 0.8968 0.0019 Fold parameters fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'} matbench_perovskites Fold scores fold mae rmse mape* max_error fold_0 0.2357 0.3292 0.2634 2.8870 fold_1 0.2367 0.3394 0.2888 2.2083 fold_2 0.2365 0.3382 0.2631 2.5900 fold_3 0.2395 0.3369 0.2827 2.6112 fold_4 0.2291 0.3293 0.2411 2.4921 Fold score stats metric mean max min std mae 0.2355 0.2395 0.2291 0.0034 rmse 0.3346 0.3394 0.3292 0.0044 mape* 0.2678 0.2888 0.2411 0.0168 max_error 2.5577 2.8870 2.2083 0.2185 Fold parameters fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'} matbench_phonons Fold scores fold mae rmse mape* max_error fold_0 82.3863 171.1524 0.1348 1004.2770 fold_1 72.8871 172.8015 0.1172 2024.7301 fold_2 59.2712 128.7871 0.1040 1206.8703 fold_3 58.6036 122.1566 0.1167 861.9005 fold_4 64.9149 136.4846 0.1197 1255.6664 Fold score stats metric mean max min std mae 67.6126 82.3863 58.6036 8.9900 rmse 146.2764 172.8015 122.1566 21.4752 mape* 0.1185 0.1348 0.1040 0.0098 max_error 1270.6889 2024.7301 861.9005 402.7307 Fold parameters fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'} matbench_steels Fold scores fold mae rmse mape* max_error fold_0 114.6331 196.3586 0.0731 1121.1276 fold_1 85.6694 113.1549 0.0654 362.6630 fold_2 110.0055 150.1283 0.0807 448.9038 fold_3 111.5273 153.4522 0.0801 633.6092 fold_4 95.7271 133.8257 0.0730 408.6042 Fold score stats metric mean max min std mae 103.5125 114.6331 85.6694 11.0368 rmse 149.3839 196.3586 113.1549 27.4893 mape* 0.0745 0.0807 0.0654 0.0056 max_error 594.9816 1121.1276 362.6630 278.7002 Fold parameters fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"matbench_v0.1: RF-SCM/Magpie"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_v01-rf-scmmagpie","text":"","title":"matbench_v0.1: RF-SCM/Magpie"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#algorithm-description","text":"A random forest using features from the Sine Coulomb Matrix and MagPie featurization algorthims. Sine Coulomb Matrix creates structural features based on Coulombic interactions inside a periodic boundary condition (i.e., for crystalline materials with known structure). MagPie features are weighted elemental features based on elemental data such as electronegativity, melting point, and electron affinity. Algorithms were run inside of the Automatminer v1.0.3.20191111 framework for convenience, though no auto-featurization or AutoML were run. Data cleaning dropped features with more than 1% nan samples, imputing missing samples using the mean of the training data. No feature reduction was performed. Both featurization techniques were applied to structure problems, only MagPie features were applied to problems without structure. Random forest uses 500 estimators. No hyperparameter tuning was performed on the RF, as a large, constant number of trees were used in constructing each fold's model; the entire training+validation set was used as training data for the RF. Raw data download and example notebook available on the matbench repo .","title":"Algorithm description:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#references-in-bibtex-format","text":"['@article{Dunn2020,\\n' ' doi = {10.1038/s41524-020-00406-3},\\n' ' url = {https://doi.org/10.1038/s41524-020-00406-3},\\n' ' year = {2020},\\n' ' month = sep,\\n' ' publisher = {Springer Science and Business Media {LLC}},\\n' ' volume = {6},\\n' ' number = {1},\\n' ' author = {Alexander Dunn and Qi Wang and Alex Ganose and Daniel Dopp and ' 'Anubhav Jain},\\n' ' title = {Benchmarking materials property prediction methods: the Matbench ' 'test set and Automatminer reference algorithm},\\n' ' journal = {npj Computational Materials}\\n' '}', '@article{Breiman2001,\\n' ' doi = {10.1023/a:1010933404324},\\n' ' url = {https://doi.org/10.1023/a:1010933404324},\\n' ' year = {2001},\\n' ' publisher = {Springer Science and Business Media {LLC}},\\n' ' volume = {45},\\n' ' number = {1},\\n' ' pages = {5--32},\\n' ' author = {Leo Breiman},\\n' ' journal = {Machine Learning}\\n' '}', '@article{Ward2016,\\n' ' doi = {10.1038/npjcompumats.2016.28},\\n' ' url = {https://doi.org/10.1038/npjcompumats.2016.28},\\n' ' year = {2016},\\n' ' month = aug,\\n' ' publisher = {Springer Science and Business Media {LLC}},\\n' ' volume = {2},\\n' ' number = {1},\\n' ' author = {Logan Ward and Ankit Agrawal and Alok Choudhary and Christopher ' 'Wolverton},\\n' ' title = {A general-purpose machine learning framework for predicting ' 'properties of inorganic materials},\\n' ' journal = {npj Computational Materials}\\n' '}', '@article {QUA:QUA24917,author = {Faber, Felix and Lindmaa, Alexander and von ' 'Lilienfeld, O. Anatole and Armiento, Rickard},title = {Crystal structure ' 'representations for machine learning models of formation energies},journal = ' '{International Journal of Quantum Chemistry},volume = {115},number = ' '{16},issn = {1097-461X},url = {http://dx.doi.org/10.1002/qua.24917},doi = ' '{10.1002/qua.24917},pages = {1094--1101},keywords = {machine learning, ' 'formation energies, representations, crystal structure, periodic ' 'systems},year = {2015},}']","title":"References (in bibtex format):"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#user-metadata","text":"{'__deepcopy__': {}, '__getstate__': {}, '_ipython_canary_method_should_not_exist_': {'__deepcopy__': {}, '__getstate__': {}}, 'autofeaturizer_kwargs': {'n_jobs': 10, 'preset': 'debug'}, 'best_pipeline': 'RandomForestRegressor(bootstrap=true, criterion=mse, ' 'max_depth=null,\\n' ' max_features=auto, max_leaf_nodes=null,\\n' ' min_impurity_decrease=0.0, ' 'min_impurity_split=null,\\n' ' min_samples_leaf=1, min_samples_split=2,\\n' ' min_weight_fraction_leaf=0.0, n_estimators=500, ' 'n_jobs=null,\\n' ' oob_score=false, random_state=null, verbose=0, ' 'warm_start=false)', 'cleaner_kwargs': {'feature_na_method': 'mean', 'max_na_frac': 0.01, 'na_method_fit': 'drop', 'na_method_transform': 'mean'}, 'features_all': ['MagpieData minimum Number', 'MagpieData maximum Number', 'MagpieData range Number', 'MagpieData mean Number', 'MagpieData avg_dev Number', 'MagpieData mode Number', 'MagpieData minimum MendeleevNumber', 'MagpieData maximum MendeleevNumber', 'MagpieData range MendeleevNumber', 'MagpieData mean MendeleevNumber', 'MagpieData avg_dev MendeleevNumber', 'MagpieData mode MendeleevNumber', 'MagpieData minimum AtomicWeight', 'MagpieData maximum AtomicWeight', 'MagpieData range AtomicWeight', 'MagpieData mean AtomicWeight', 'MagpieData avg_dev AtomicWeight', 'MagpieData mode AtomicWeight', 'MagpieData minimum MeltingT', 'MagpieData maximum MeltingT', 'MagpieData range MeltingT', 'MagpieData mean MeltingT', 'MagpieData avg_dev MeltingT', 'MagpieData mode MeltingT', 'MagpieData minimum Column', 'MagpieData maximum Column', 'MagpieData range Column', 'MagpieData mean Column', 'MagpieData avg_dev Column', 'MagpieData mode Column', 'MagpieData minimum Row', 'MagpieData maximum Row', 'MagpieData range Row', 'MagpieData mean Row', 'MagpieData avg_dev Row', 'MagpieData mode Row', 'MagpieData minimum CovalentRadius', 'MagpieData maximum CovalentRadius', 'MagpieData range CovalentRadius', 'MagpieData mean CovalentRadius', 'MagpieData avg_dev CovalentRadius', 'MagpieData mode CovalentRadius', 'MagpieData minimum Electronegativity', 'MagpieData maximum Electronegativity', 'MagpieData range Electronegativity', 'MagpieData mean Electronegativity', 'MagpieData avg_dev Electronegativity', 'MagpieData mode Electronegativity', 'MagpieData minimum NsValence', 'MagpieData maximum NsValence', 'MagpieData range NsValence', 'MagpieData mean NsValence', 'MagpieData avg_dev NsValence', 'MagpieData mode NsValence', 'MagpieData minimum NpValence', 'MagpieData maximum NpValence', 'MagpieData range NpValence', 'MagpieData mean NpValence', 'MagpieData avg_dev NpValence', 'MagpieData mode NpValence', 'MagpieData minimum NdValence', 'MagpieData maximum NdValence', 'MagpieData range NdValence', 'MagpieData mean NdValence', 'MagpieData avg_dev NdValence', 'MagpieData mode NdValence', 'MagpieData minimum NfValence', 'MagpieData maximum NfValence', 'MagpieData range NfValence', 'MagpieData mean NfValence', 'MagpieData avg_dev NfValence', 'MagpieData mode NfValence', 'MagpieData minimum NValence', 'MagpieData maximum NValence', 'MagpieData range NValence', 'MagpieData mean NValence', 'MagpieData avg_dev NValence', 'MagpieData mode NValence', 'MagpieData minimum NsUnfilled', 'MagpieData maximum NsUnfilled', 'MagpieData range NsUnfilled', 'MagpieData mean NsUnfilled', 'MagpieData avg_dev NsUnfilled', 'MagpieData mode NsUnfilled', 'MagpieData minimum NpUnfilled', 'MagpieData maximum NpUnfilled', 'MagpieData range NpUnfilled', 'MagpieData mean NpUnfilled', 'MagpieData avg_dev NpUnfilled', 'MagpieData mode NpUnfilled', 'MagpieData minimum NdUnfilled', 'MagpieData maximum NdUnfilled', 'MagpieData range NdUnfilled', 'MagpieData mean NdUnfilled', 'MagpieData avg_dev NdUnfilled', 'MagpieData mode NdUnfilled', 'MagpieData minimum NfUnfilled', 'MagpieData maximum NfUnfilled', 'MagpieData range NfUnfilled', 'MagpieData mean NfUnfilled', 'MagpieData avg_dev NfUnfilled', 'MagpieData mode NfUnfilled', 'MagpieData minimum NUnfilled', 'MagpieData maximum NUnfilled', 'MagpieData range NUnfilled', 'MagpieData mean NUnfilled', 'MagpieData avg_dev NUnfilled', 'MagpieData mode NUnfilled', 'MagpieData minimum GSvolume_pa', 'MagpieData maximum GSvolume_pa', 'MagpieData range GSvolume_pa', 'MagpieData mean GSvolume_pa', 'MagpieData avg_dev GSvolume_pa', 'MagpieData mode GSvolume_pa', 'MagpieData minimum GSbandgap', 'MagpieData maximum GSbandgap', 'MagpieData range GSbandgap', 'MagpieData mean GSbandgap', 'MagpieData avg_dev GSbandgap', 'MagpieData mode GSbandgap', 'MagpieData minimum GSmagmom', 'MagpieData maximum GSmagmom', 'MagpieData range GSmagmom', 'MagpieData mean GSmagmom', 'MagpieData avg_dev GSmagmom', 'MagpieData mode GSmagmom', 'MagpieData minimum SpaceGroupNumber', 'MagpieData maximum SpaceGroupNumber', 'MagpieData range SpaceGroupNumber', 'MagpieData mean SpaceGroupNumber', 'MagpieData avg_dev SpaceGroupNumber', 'MagpieData mode SpaceGroupNumber', 'sine coulomb matrix eig 0', 'sine coulomb matrix eig 1', 'sine coulomb matrix eig 2', 'sine coulomb matrix eig 3', 'sine coulomb matrix eig 4', 'sine coulomb matrix eig 5', 'sine coulomb matrix eig 6', 'sine coulomb matrix eig 7', 'sine coulomb matrix eig 8', 'sine coulomb matrix eig 9', 'sine coulomb matrix eig 10', 'sine coulomb matrix eig 11', 'sine coulomb matrix eig 12', 'sine coulomb matrix eig 13', 'sine coulomb matrix eig 14', 'sine coulomb matrix eig 15', 'sine coulomb matrix eig 16', 'sine coulomb matrix eig 17', 'sine coulomb matrix eig 18', 'sine coulomb matrix eig 19', 'sine coulomb matrix eig 20', 'sine coulomb matrix eig 21', 'sine coulomb matrix eig 22', 'sine coulomb matrix eig 23', 'sine coulomb matrix eig 24', 'sine coulomb matrix eig 25', 'sine coulomb matrix eig 26', 'sine coulomb matrix eig 27', 'sine coulomb matrix eig 28', 'sine coulomb matrix eig 29', 'sine coulomb matrix eig 30', 'sine coulomb matrix eig 31', 'sine coulomb matrix eig 32', 'sine coulomb matrix eig 33', 'sine coulomb matrix eig 34', 'sine coulomb matrix eig 35', 'sine coulomb matrix eig 36', 'sine coulomb matrix eig 37', 'sine coulomb matrix eig 38', 'sine coulomb matrix eig 39', 'sine coulomb matrix eig 40', 'sine coulomb matrix eig 41', 'sine coulomb matrix eig 42', 'sine coulomb matrix eig 43', 'sine coulomb matrix eig 44', 'sine coulomb matrix eig 45', 'sine coulomb matrix eig 46', 'sine coulomb matrix eig 47', 'sine coulomb matrix eig 48', 'sine coulomb matrix eig 49', 'sine coulomb matrix eig 50', 'sine coulomb matrix eig 51', 'sine coulomb matrix eig 52', 'sine coulomb matrix eig 53', 'sine coulomb matrix eig 54', 'sine coulomb matrix eig 55', 'sine coulomb matrix eig 56', 'sine coulomb matrix eig 57', 'sine coulomb matrix eig 58', 'sine coulomb matrix eig 59', 'sine coulomb matrix eig 60', 'sine coulomb matrix eig 61', 'sine coulomb matrix eig 62', 'sine coulomb matrix eig 63', 'sine coulomb matrix eig 64', 'sine coulomb matrix eig 65', 'sine coulomb matrix eig 66', 'sine coulomb matrix eig 67', 'sine coulomb matrix eig 68', 'sine coulomb matrix eig 69', 'sine coulomb matrix eig 70', 'sine coulomb matrix eig 71', 'sine coulomb matrix eig 72', 'sine coulomb matrix eig 73', 'sine coulomb matrix eig 74', 'sine coulomb matrix eig 75', 'sine coulomb matrix eig 76', 'sine coulomb matrix eig 77', 'sine coulomb matrix eig 78', 'sine coulomb matrix eig 79', 'sine coulomb matrix eig 80', 'sine coulomb matrix eig 81', 'sine coulomb matrix eig 82', 'sine coulomb matrix eig 83', 'sine coulomb matrix eig 84', 'sine coulomb matrix eig 85', 'sine coulomb matrix eig 86', 'sine coulomb matrix eig 87', 'sine coulomb matrix eig 88', 'sine coulomb matrix eig 89', 'sine coulomb matrix eig 90', 'sine coulomb matrix eig 91', 'sine coulomb matrix eig 92', 'sine coulomb matrix eig 93', 'sine coulomb matrix eig 94', 'sine coulomb matrix eig 95', 'sine coulomb matrix eig 96', 'sine coulomb matrix eig 97', 'sine coulomb matrix eig 98', 'sine coulomb matrix eig 99', 'sine coulomb matrix eig 100', 'sine coulomb matrix eig 101', 'sine coulomb matrix eig 102', 'sine coulomb matrix eig 103', 'sine coulomb matrix eig 104', 'sine coulomb matrix eig 105', 'sine coulomb matrix eig 106', 'sine coulomb matrix eig 107', 'sine coulomb matrix eig 108', 'sine coulomb matrix eig 109', 'sine coulomb matrix eig 110', 'sine coulomb matrix eig 111', 'sine coulomb matrix eig 112', 'sine coulomb matrix eig 113', 'sine coulomb matrix eig 114', 'sine coulomb matrix eig 115', 'sine coulomb matrix eig 116', 'sine coulomb matrix eig 117', 'sine coulomb matrix eig 118', 'sine coulomb matrix eig 119', 'sine coulomb matrix eig 120', 'sine coulomb matrix eig 121', 'sine coulomb matrix eig 122', 'sine coulomb matrix eig 123', 'sine coulomb matrix eig 124', 'sine coulomb matrix eig 125', 'sine coulomb matrix eig 126', 'sine coulomb matrix eig 127', 'sine coulomb matrix eig 128', 'sine coulomb matrix eig 129', 'sine coulomb matrix eig 130', 'sine coulomb matrix eig 131', 'sine coulomb matrix eig 132', 'sine coulomb matrix eig 133', 'sine coulomb matrix eig 134', 'sine coulomb matrix eig 135', 'sine coulomb matrix eig 136', 'sine coulomb matrix eig 137', 'sine coulomb matrix eig 138', 'sine coulomb matrix eig 139', 'sine coulomb matrix eig 140', 'sine coulomb matrix eig 141', 'sine coulomb matrix eig 142', 'sine coulomb matrix eig 143', 'sine coulomb matrix eig 144', 'sine coulomb matrix eig 145', 'sine coulomb matrix eig 146', 'sine coulomb matrix eig 147', 'sine coulomb matrix eig 148', 'sine coulomb matrix eig 149', 'sine coulomb matrix eig 150', 'sine coulomb matrix eig 151', 'sine coulomb matrix eig 152', 'sine coulomb matrix eig 153', 'sine coulomb matrix eig 154', 'sine coulomb matrix eig 155', 'sine coulomb matrix eig 156', 'sine coulomb matrix eig 157', 'sine coulomb matrix eig 158', 'sine coulomb matrix eig 159', 'sine coulomb matrix eig 160', 'sine coulomb matrix eig 161', 'sine coulomb matrix eig 162', 'sine coulomb matrix eig 163', 'sine coulomb matrix eig 164', 'sine coulomb matrix eig 165', 'sine coulomb matrix eig 166', 'sine coulomb matrix eig 167', 'sine coulomb matrix eig 168', 'sine coulomb matrix eig 169', 'sine coulomb matrix eig 170', 'sine coulomb matrix eig 171', 'sine coulomb matrix eig 172', 'sine coulomb matrix eig 173', 'sine coulomb matrix eig 174', 'sine coulomb matrix eig 175', 'sine coulomb matrix eig 176', 'sine coulomb matrix eig 177', 'sine coulomb matrix eig 178', 'sine coulomb matrix eig 179', 'sine coulomb matrix eig 180', 'sine coulomb matrix eig 181', 'sine coulomb matrix eig 182', 'sine coulomb matrix eig 183', 'sine coulomb matrix eig 184', 'sine coulomb matrix eig 185', 'sine coulomb matrix eig 186', 'sine coulomb matrix eig 187', 'sine coulomb matrix eig 188', 'sine coulomb matrix eig 189', 'sine coulomb matrix eig 190', 'sine coulomb matrix eig 191', 'sine coulomb matrix eig 192', 'sine coulomb matrix eig 193', 'sine coulomb matrix eig 194', 'sine coulomb matrix eig 195', 'sine coulomb matrix eig 196', 'sine coulomb matrix eig 197', 'sine coulomb matrix eig 198', 'sine coulomb matrix eig 199', 'sine coulomb matrix eig 200', 'sine coulomb matrix eig 201', 'sine coulomb matrix eig 202', 'sine coulomb matrix eig 203', 'sine coulomb matrix eig 204', 'sine coulomb matrix eig 205', 'sine coulomb matrix eig 206', 'sine coulomb matrix eig 207', 'sine coulomb matrix eig 208', 'sine coulomb matrix eig 209', 'sine coulomb matrix eig 210', 'sine coulomb matrix eig 211', 'sine coulomb matrix eig 212', 'sine coulomb matrix eig 213', 'sine coulomb matrix eig 214', 'sine coulomb matrix eig 215', 'sine coulomb matrix eig 216', 'sine coulomb matrix eig 217', 'sine coulomb matrix eig 218', 'sine coulomb matrix eig 219', 'sine coulomb matrix eig 220', 'sine coulomb matrix eig 221', 'sine coulomb matrix eig 222', 'sine coulomb matrix eig 223', 'sine coulomb matrix eig 224', 'sine coulomb matrix eig 225', 'sine coulomb matrix eig 226', 'sine coulomb matrix eig 227', 'sine coulomb matrix eig 228', 'sine coulomb matrix eig 229', 'sine coulomb matrix eig 230', 'sine coulomb matrix eig 231', 'sine coulomb matrix eig 232', 'sine coulomb matrix eig 233', 'sine coulomb matrix eig 234', 'sine coulomb matrix eig 235', 'sine coulomb matrix eig 236', 'sine coulomb matrix eig 237', 'sine coulomb matrix eig 238', 'sine coulomb matrix eig 239', 'sine coulomb matrix eig 240', 'sine coulomb matrix eig 241', 'sine coulomb matrix eig 242', 'sine coulomb matrix eig 243', 'sine coulomb matrix eig 244', 'sine coulomb matrix eig 245', 'sine coulomb matrix eig 246', 'sine coulomb matrix eig 247', 'sine coulomb matrix eig 248', 'sine coulomb matrix eig 249', 'sine coulomb matrix eig 250', 'sine coulomb matrix eig 251', 'sine coulomb matrix eig 252', 'sine coulomb matrix eig 253', 'sine coulomb matrix eig 254', 'sine coulomb matrix eig 255', 'sine coulomb matrix eig 256', 'sine coulomb matrix eig 257', 'sine coulomb matrix eig 258', 'sine coulomb matrix eig 259', 'sine coulomb matrix eig 260', 'sine coulomb matrix eig 261', 'sine coulomb matrix eig 262', 'sine coulomb matrix eig 263', 'sine coulomb matrix eig 264', 'sine coulomb matrix eig 265', 'sine coulomb matrix eig 266', 'sine coulomb matrix eig 267', 'sine coulomb matrix eig 268', 'sine coulomb matrix eig 269', 'sine coulomb matrix eig 270', 'sine coulomb matrix eig 271', 'sine coulomb matrix eig 272', 'sine coulomb matrix eig 273', 'sine coulomb matrix eig 274', 'sine coulomb matrix eig 275', 'sine coulomb matrix eig 276', 'sine coulomb matrix eig 277', 'sine coulomb matrix eig 278', 'sine coulomb matrix eig 279', 'sine coulomb matrix eig 280', 'sine coulomb matrix eig 281', 'sine coulomb matrix eig 282', 'sine coulomb matrix eig 283', 'sine coulomb matrix eig 284', 'sine coulomb matrix eig 285', 'sine coulomb matrix eig 286', 'sine coulomb matrix eig 287'], 'learner_kwargs': {'n_estimators': 500}, 'learner_name': 'rf', 'reducer_kwargs': {'reducers': []}}","title":"User metadata:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#metadata","text":"Tasks recorded: 13 of 13 total Benchmark is complete? True","title":"Metadata:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#software-requirements","text":"{'python': ['scikit-learn==0.24.1', 'numpy==1.20.1', 'matbench==0.1.0', 'automatminer==v1.0.3.20191111']}","title":"Software Requirements"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#task-data","text":"","title":"Task data:"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_dielectric","text":"","title":"matbench_dielectric"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-scores","text":"fold mae rmse mape* max_error fold_0 0.3042 0.7850 0.1176 14.5979 fold_1 0.4079 1.2316 0.1509 20.1279 fold_2 0.5220 2.9832 0.1370 59.1201 fold_3 0.3879 2.1680 0.1057 49.4924 fold_4 0.4760 2.1012 0.1886 31.0645","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-score-stats","text":"metric mean max min std mae 0.4196 0.5220 0.3042 0.0750 rmse 1.8538 2.9832 0.7850 0.7700 mape* 0.1400 0.1886 0.1057 0.0289 max_error 34.8806 59.1201 14.5979 16.9980","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-parameters","text":"fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_expt_gap","text":"","title":"matbench_expt_gap"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-scores_1","text":"fold mae rmse mape* max_error fold_0 0.4360 0.7985 0.3380 5.1654 fold_1 0.4387 0.7819 0.3044 4.7122 fold_2 0.4812 0.9435 0.4019 9.5428 fold_3 0.4345 0.8059 0.3647 5.2288 fold_4 0.4400 0.7918 0.4385 5.5833","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-score-stats_1","text":"metric mean max min std mae 0.4461 0.4812 0.4345 0.0177 rmse 0.8243 0.9435 0.7819 0.0601 mape* 0.3695 0.4385 0.3044 0.0470 max_error 6.0465 9.5428 4.7122 1.7700","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-parameters_1","text":"fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_expt_is_metal","text":"","title":"matbench_expt_is_metal"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-scores_2","text":"fold accuracy balanced_accuracy f1 rocauc fold_0 0.9249 0.9248 0.9236 0.9248 fold_1 0.9167 0.9166 0.9156 0.9166 fold_2 0.9096 0.9095 0.9076 0.9095 fold_3 0.9228 0.9227 0.9221 0.9227 fold_4 0.9096 0.9096 0.9104 0.9096","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-score-stats_2","text":"metric mean max min std accuracy 0.9167 0.9249 0.9096 0.0064 balanced_accuracy 0.9167 0.9248 0.9095 0.0064 f1 0.9159 0.9236 0.9076 0.0063 rocauc 0.9167 0.9248 0.9095 0.0064","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-parameters_2","text":"fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_glass","text":"","title":"matbench_glass"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-scores_3","text":"fold accuracy balanced_accuracy f1 rocauc fold_0 0.9199 0.8860 0.9449 0.8860 fold_1 0.8856 0.8402 0.9217 0.8402 fold_2 0.8847 0.8495 0.9200 0.8495 fold_3 0.8891 0.8526 0.9233 0.8526 fold_4 0.8979 0.8651 0.9292 0.8651","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-score-stats_3","text":"metric mean max min std accuracy 0.8954 0.9199 0.8847 0.0131 balanced_accuracy 0.8587 0.8860 0.8402 0.0158 f1 0.9278 0.9449 0.9200 0.0091 rocauc 0.8587 0.8860 0.8402 0.0158","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-parameters_3","text":"fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_jdft2d","text":"","title":"matbench_jdft2d"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-scores_4","text":"fold mae rmse mape* max_error fold_0 42.7473 72.7391 23.7625 295.7437 fold_1 45.7510 94.3771 0.4382 581.4859 fold_2 66.2421 153.0635 0.8747 836.6225 fold_3 44.0340 81.5112 0.4818 337.7693 fold_4 51.4457 159.6390 0.6384 1538.6073","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-score-stats_4","text":"metric mean max min std mae 50.0440 66.2421 42.7473 8.6271 rmse 112.2660 159.6390 72.7391 36.7066 mape* 5.2391 23.7625 0.4382 9.2629 max_error 718.0457 1538.6073 295.7437 453.6473","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-parameters_4","text":"fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_log_gvrh","text":"","title":"matbench_log_gvrh"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-scores_5","text":"fold mae rmse mape* max_error fold_0 0.1046 0.1515 0.0817 1.1754 fold_1 0.1024 0.1557 0.0815 1.6942 fold_2 0.1025 0.1533 0.0798 1.0668 fold_3 0.1037 0.1495 0.0777 0.9041 fold_4 0.1067 0.1601 0.0832 0.9480","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-score-stats_5","text":"metric mean max min std mae 0.1040 0.1067 0.1024 0.0016 rmse 0.1540 0.1601 0.1495 0.0037 mape* 0.0808 0.0832 0.0777 0.0019 max_error 1.1577 1.6942 0.9041 0.2845","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-parameters_5","text":"fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_log_kvrh","text":"","title":"matbench_log_kvrh"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-scores_6","text":"fold mae rmse mape* max_error fold_0 0.0809 0.1415 0.0522 1.4432 fold_1 0.0808 0.1503 0.0532 1.7642 fold_2 0.0783 0.1383 0.0509 1.1189 fold_3 0.0863 0.1478 0.0608 1.1620 fold_4 0.0836 0.1489 0.0558 1.3775","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-score-stats_6","text":"metric mean max min std mae 0.0820 0.0863 0.0783 0.0027 rmse 0.1454 0.1503 0.1383 0.0046 mape* 0.0546 0.0608 0.0509 0.0035 max_error 1.3732 1.7642 1.1189 0.2311","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-parameters_6","text":"fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_mp_e_form","text":"","title":"matbench_mp_e_form"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-scores_7","text":"fold mae rmse mape* max_error fold_0 0.1158 0.2386 0.9331 4.2469 fold_1 0.1160 0.2459 0.5068 5.4382 fold_2 0.1179 0.2443 0.5549 4.0782 fold_3 0.1159 0.2373 0.7206 2.9374 fold_4 0.1166 0.2435 0.6836 3.8910","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-score-stats_7","text":"metric mean max min std mae 0.1165 0.1179 0.1158 0.0008 rmse 0.2419 0.2459 0.2373 0.0034 mape* 0.6798 0.9331 0.5068 0.1492 max_error 4.1183 5.4382 2.9374 0.8008","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-parameters_7","text":"fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_mp_gap","text":"","title":"matbench_mp_gap"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-scores_8","text":"fold mae rmse mape* max_error fold_0 0.3456 0.6097 5.6881 6.3322 fold_1 0.3417 0.6104 4.3547 7.0601 fold_2 0.3445 0.6047 6.9303 5.9201 fold_3 0.3427 0.6101 11.9090 6.6456 fold_4 0.3512 0.6276 9.2752 6.0212","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-score-stats_8","text":"metric mean max min std mae 0.3452 0.3512 0.3417 0.0033 rmse 0.6125 0.6276 0.6047 0.0079 mape* 7.6315 11.9090 4.3547 2.6835 max_error 6.3958 7.0601 5.9201 0.4182","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-parameters_8","text":"fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_mp_is_metal","text":"","title":"matbench_mp_is_metal"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-scores_9","text":"fold accuracy balanced_accuracy f1 rocauc fold_0 0.9080 0.9025 0.8905 0.9025 fold_1 0.9027 0.8968 0.8839 0.8968 fold_2 0.9049 0.8987 0.8862 0.8987 fold_3 0.9051 0.8994 0.8869 0.8994 fold_4 0.9047 0.8984 0.8858 0.8984","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-score-stats_9","text":"metric mean max min std accuracy 0.9051 0.9080 0.9027 0.0017 balanced_accuracy 0.8992 0.9025 0.8968 0.0019 f1 0.8866 0.8905 0.8839 0.0022 rocauc 0.8992 0.9025 0.8968 0.0019","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-parameters_9","text":"fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_perovskites","text":"","title":"matbench_perovskites"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-scores_10","text":"fold mae rmse mape* max_error fold_0 0.2357 0.3292 0.2634 2.8870 fold_1 0.2367 0.3394 0.2888 2.2083 fold_2 0.2365 0.3382 0.2631 2.5900 fold_3 0.2395 0.3369 0.2827 2.6112 fold_4 0.2291 0.3293 0.2411 2.4921","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-score-stats_10","text":"metric mean max min std mae 0.2355 0.2395 0.2291 0.0034 rmse 0.3346 0.3394 0.3292 0.0044 mape* 0.2678 0.2888 0.2411 0.0168 max_error 2.5577 2.8870 2.2083 0.2185","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-parameters_10","text":"fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_phonons","text":"","title":"matbench_phonons"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-scores_11","text":"fold mae rmse mape* max_error fold_0 82.3863 171.1524 0.1348 1004.2770 fold_1 72.8871 172.8015 0.1172 2024.7301 fold_2 59.2712 128.7871 0.1040 1206.8703 fold_3 58.6036 122.1566 0.1167 861.9005 fold_4 64.9149 136.4846 0.1197 1255.6664","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-score-stats_11","text":"metric mean max min std mae 67.6126 82.3863 58.6036 8.9900 rmse 146.2764 172.8015 122.1566 21.4752 mape* 0.1185 0.1348 0.1040 0.0098 max_error 1270.6889 2024.7301 861.9005 402.7307","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-parameters_11","text":"fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"Fold parameters"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#matbench_steels","text":"","title":"matbench_steels"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-scores_12","text":"fold mae rmse mape* max_error fold_0 114.6331 196.3586 0.0731 1121.1276 fold_1 85.6694 113.1549 0.0654 362.6630 fold_2 110.0055 150.1283 0.0807 448.9038 fold_3 111.5273 153.4522 0.0801 633.6092 fold_4 95.7271 133.8257 0.0730 408.6042","title":"Fold scores"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-score-stats_12","text":"metric mean max min std mae 103.5125 114.6331 85.6694 11.0368 rmse 149.3839 196.3586 113.1549 27.4893 mape* 0.0745 0.0807 0.0654 0.0056 max_error 594.9816 1121.1276 362.6630 278.7002","title":"Fold score stats"},{"location":"Full%20Benchmark%20Data/matbench_v0.1_rf/#fold-parameters_12","text":"fold params dict fold_0 {'note': 'single config; see benchmark user metadata'} fold_1 {'note': 'single config; see benchmark user metadata'} fold_2 {'note': 'single config; see benchmark user metadata'} fold_3 {'note': 'single config; see benchmark user metadata'} fold_4 {'note': 'single config; see benchmark user metadata'}","title":"Fold parameters"},{"location":"How%20To%20Use/1install/","text":"1 - Install matbench Via GitHub Clone the repository with: git clone https://github.com/hackingmaterials/matbench To install for the current user: pip install --user ./matbench For development, install with cd matbench pip install -e . -r requirements.txt Via PyPi Install matbench with: pip install matbench Troubleshooting Matbench is supported on all Unix systems. It does not officially support Windows installations, but may work. Please use our friendly matsci.org help forum to ask for help; we don't bite!","title":"1 - Install matbench"},{"location":"How%20To%20Use/1install/#1-install-matbench","text":"","title":"1 - Install matbench"},{"location":"How%20To%20Use/1install/#via-github","text":"Clone the repository with: git clone https://github.com/hackingmaterials/matbench To install for the current user: pip install --user ./matbench For development, install with cd matbench pip install -e . -r requirements.txt","title":"Via GitHub"},{"location":"How%20To%20Use/1install/#via-pypi","text":"Install matbench with: pip install matbench","title":"Via PyPi"},{"location":"How%20To%20Use/1install/#troubleshooting","text":"Matbench is supported on all Unix systems. It does not officially support Windows installations, but may work. Please use our friendly matsci.org help forum to ask for help; we don't bite!","title":"Troubleshooting"},{"location":"How%20To%20Use/2run/","text":"2 - Run benchmark on algorithm Recording your data You can use the matbench python package to retrieve the training and testing splits as well as record new predictions. Recording and saving your data with matbench should take no more than 10 lines of matbench code. The only things you need are: Your algorithm/model - we'll call it my_model in this example The MatbenchBenchmark class. Here's an example of running an entire benchmark (13 tasks) using matbench. from matbench.bench import MatbenchBenchmark mb = MatbenchBenchmark ( autoload = False ) for task in mb . tasks : task . load () for fold in task . folds : # Inputs are either chemical compositions as strings # or crystal structures as pymatgen.Structure objects. # Outputs are either floats (regression tasks) or bools (classification tasks) train_inputs , train_outputs = task . get_train_and_val_data ( fold ) # train and validate your model my_model . train_and_validate ( train_inputs , train_outputs ) # Get testing data test_inputs = task . get_test_data ( fold , include_target = False ) # Predict on the testing data # Your output should be a pandas series, numpy array, or python iterable # where the array elements are floats or bools predictions = my_model . predict ( test_inputs ) # Record your data! task . record ( fold , predictions ) # Save your results mb . to_file ( \"my_models_benchmark.json.gz\" ) And you're done! Your benchmark has been recorded and saved. The output file, in this case my_models_benchmark.json.gz contains everything predicted by your benchmark. Keep this file, as it is the core result that will be submitted to the leaderboard. Please see the docs for Submitting to leaderboard to learn how to upload your data to the automated leaderboard. Note: Benchmark subsets If you want to benchmark on a subset of Matbench tasks, set the subset argument when creating MatbenchBenchmark and use the same code as above. The repo accepts subsets of matbench tasks as well which will appear on a separate \"task-specific\" leaderboard. Recording hyperparameters and user metadata Hyperparameters for each fold Record parameters ( dict type) for each fold using the parameters argument to MatbenchBenchmark.record : from matbench.bench import MatbenchBenchmark mb = MatbenchBenchmark ( autoload = False ) for task in mb . tasks : task . load () for fold in task . folds : train_inputs , train_outputs = task . get_train_and_val_data ( fold ) my_model . train_and_validate ( train_inputs , train_outputs ) test_inputs = task . get_test_data ( fold , include_target = False ) predictions = my_model . predict ( test_inputs ) # Get your model's parameters # Parameters must be a dictionary of python native types, e.g., lists of strings, dicts, etc. params = my_model . get_parameters_as_dictionary () task . record ( fold , predictions , params = params ) We recommend you record the hyperparameters on each fold - but it is optional. Your parameters can be freeform, though we encourage brevity - only recording the most important parameters, not large arrays or weight matrices. User metadata for benchmark Add arbitrary metadata about your algorthm, in dict format, to the benchmark. This will be included as shown on the benchmark leaderboard on the website. my_metadata = { \"algorithm_version\" : \"v1\" , \"tree_type\" : \"entropy\" , \"configuration\" : { \"some_param\" : 4 , \"other_vector\" : [ 1 , 2 , 3 ] } } mb . add_metadata ( my_metadata )","title":"2 - Run benchmark on algorithm"},{"location":"How%20To%20Use/2run/#2-run-benchmark-on-algorithm","text":"","title":"2 - Run benchmark on algorithm"},{"location":"How%20To%20Use/2run/#recording-your-data","text":"You can use the matbench python package to retrieve the training and testing splits as well as record new predictions. Recording and saving your data with matbench should take no more than 10 lines of matbench code. The only things you need are: Your algorithm/model - we'll call it my_model in this example The MatbenchBenchmark class. Here's an example of running an entire benchmark (13 tasks) using matbench. from matbench.bench import MatbenchBenchmark mb = MatbenchBenchmark ( autoload = False ) for task in mb . tasks : task . load () for fold in task . folds : # Inputs are either chemical compositions as strings # or crystal structures as pymatgen.Structure objects. # Outputs are either floats (regression tasks) or bools (classification tasks) train_inputs , train_outputs = task . get_train_and_val_data ( fold ) # train and validate your model my_model . train_and_validate ( train_inputs , train_outputs ) # Get testing data test_inputs = task . get_test_data ( fold , include_target = False ) # Predict on the testing data # Your output should be a pandas series, numpy array, or python iterable # where the array elements are floats or bools predictions = my_model . predict ( test_inputs ) # Record your data! task . record ( fold , predictions ) # Save your results mb . to_file ( \"my_models_benchmark.json.gz\" ) And you're done! Your benchmark has been recorded and saved. The output file, in this case my_models_benchmark.json.gz contains everything predicted by your benchmark. Keep this file, as it is the core result that will be submitted to the leaderboard. Please see the docs for Submitting to leaderboard to learn how to upload your data to the automated leaderboard.","title":"Recording your data"},{"location":"How%20To%20Use/2run/#note-benchmark-subsets","text":"If you want to benchmark on a subset of Matbench tasks, set the subset argument when creating MatbenchBenchmark and use the same code as above. The repo accepts subsets of matbench tasks as well which will appear on a separate \"task-specific\" leaderboard.","title":"Note: Benchmark subsets"},{"location":"How%20To%20Use/2run/#recording-hyperparameters-and-user-metadata","text":"","title":"Recording hyperparameters and user metadata"},{"location":"How%20To%20Use/2run/#hyperparameters-for-each-fold","text":"Record parameters ( dict type) for each fold using the parameters argument to MatbenchBenchmark.record : from matbench.bench import MatbenchBenchmark mb = MatbenchBenchmark ( autoload = False ) for task in mb . tasks : task . load () for fold in task . folds : train_inputs , train_outputs = task . get_train_and_val_data ( fold ) my_model . train_and_validate ( train_inputs , train_outputs ) test_inputs = task . get_test_data ( fold , include_target = False ) predictions = my_model . predict ( test_inputs ) # Get your model's parameters # Parameters must be a dictionary of python native types, e.g., lists of strings, dicts, etc. params = my_model . get_parameters_as_dictionary () task . record ( fold , predictions , params = params ) We recommend you record the hyperparameters on each fold - but it is optional. Your parameters can be freeform, though we encourage brevity - only recording the most important parameters, not large arrays or weight matrices.","title":"Hyperparameters for each fold"},{"location":"How%20To%20Use/2run/#user-metadata-for-benchmark","text":"Add arbitrary metadata about your algorthm, in dict format, to the benchmark. This will be included as shown on the benchmark leaderboard on the website. my_metadata = { \"algorithm_version\" : \"v1\" , \"tree_type\" : \"entropy\" , \"configuration\" : { \"some_param\" : 4 , \"other_vector\" : [ 1 , 2 , 3 ] } } mb . add_metadata ( my_metadata )","title":"User metadata for benchmark"},{"location":"How%20To%20Use/3submit/","text":"3 - Submit to leaderboard Step 1: Create 3 required files To submit to the leaderboard, you need 3 files: results.json.gz : The file you saved when recording your data . Instructions on how to create this file info.json : A short file of some metadata about your algorithm. Instructions on how to create this file, with template Either (a) an .ipynb notebook detailing your algorithm with code for running it, or (b) one or more .py files with source code for running/benchmarking your algorithm. Instructions here Step 2: Put files in appropriate folder a. If you are using matbench through pypi, clone the source repository in order to make a pull request. Find instrucions for cloning the source repository on the Installation page . b. Locate the matbench/benchmarks directory. c. Create a new directory <benchmark name>_<algorithm name> according to your algorithm and the benchmark you ran (e.g., matbench_v0.1_my_algorithm_namev2 ). d. Put the required files from Step 1 into this directory. The files should look like: \u251c\u2500\u2500 benchmarks \u2502 \u2514\u2500\u2500 matbench_v0.1_<your algorithm name> \u2502 \u251c\u2500\u2500 info.json \u2502 \u251c\u2500\u2500 my_python_file.py \u2502 \u2514\u2500\u2500 results.json.gz Warning: the info.json and results.json.gz must have these names exactly for your PR to go through without problems, automatically. You can include any other small files (no naming scheme required) for running your code in this directory. Step 3: Create a PR to the Matbench repository Commit your new changes to the repo with, and create a pull request (PR) to the Matbench repository. Find instructions for creating a PR here. Label your PR with the \"new_benchmark\" label. And you're done! If the tests pass, your submission will be added to the leaderboard! results.json.gz This file is the MatbenchBenchmark you saved during your benchmark. You can find docs about how to record and save a benchmark on the Running a benchmark page . This file is required for a submission. info.json A metadata file about your algorithm, the authors, and any relevant citations. Please ensure the following keys are included, as they are required by our automated leaderboard: \"authors\" : The author names for this PR \"algorithm\" : The short or abbreviated name for your algorithm, e.g., \"MegNET v1.0\" . Should be 5-15 characters. \"algorithm_long\" : A longer description of your algorithm, to be shown as details for your results. Can be up to 1000 words. \"bibtex_refs\" : A comprehensive list of references for your algorithm, including manuscripts and preprints for the algorithm itself, each formatted as bibtex. \"notes\" : Any other freeform notes you'd like to include as details for your algorithm/submission. Can include things like computing resources used to train/run the algorithm, methodology, alternative configurations, links, etc. \"requirements\" : A dictionary of software requirements for running your algorithm. In particular, installing these should ensure your Source files run without issues. Please include the matbench version in these requirments. Here's an template info.json you can copy+paste and edit to get started: { \"authors\": \"My name\", \"algorithm\": \"COOLNet v14\", \"algorithm_long\": \"A longer description of my super cool algorithm, COOLNet v14.\", \"bibtex_refs\": \"@article{Dunn2020,\\n doi = {10.1038/s41524-020-00406-3},\\n url = {https://doi.org/10.1038/s41524-020-00406-3},\\n year = {2020},\\n month = sep,\\n publisher = {Springer Science and Business Media {LLC}},\\n volume = {6},\\n number = {1},\\n author = {Alexander Dunn and Qi Wang and Alex Ganose and Daniel Dopp and Anubhav Jain},\\n title = {Benchmarking materials property prediction methods: the Matbench test set and Automatminer reference algorithm},\\n journal = {npj Computational Materials}\\n}\", \"notes\": \"Some freeform notes users might be interested in, if they were to run your source code files.\", \"requirements\": {\"python\": [\"scikit-learn==0.24.1\", \"numpy==1.20.1\", \"matbench==0.1.0\"]} } Source files At least one source file (one or more .py files or a Jupyter notebook .ipynb ) must be included with submission. This is to help others run and understand your code and results. General guidelines The source file should contain all the code needed for configuring, training, and running your algorithm on all the benchmark tasks you decide to run. The easiest way to create a source file is just use the source file you used while recording your benchmark results . There are no naming requirements for these source files. You can also include other supporting files, like metadata, features, etc. if they are critical for the algorithm to run and they are small (<10MB). Please include the matbench code (e.g., mb.record(...) ) for obtaining benchmarks/recording/examining results in the source files. Jupyter notebooks The preferred format for source files is a jupyter notebook with some code for running your algorithm on Matbench. You can find an example The notebook should generally follow the format of the example notebook /benchmarks/matbench_v0.1_dummy/notebook.ipynb . Try to include a long form, human readable description of how your algorithm works, any package versions needed to have it run correctly, and most importantly, a link to a publication for your algorithm . Aside from that, what goes in your notebook is pretty freeform; put whatever is needed to allow someone else to train and run your algorithm on the benchmark . You can find an example template for a notebook in the matbench repo under /benchmarks/matbench_v0.1_dummy/notebook.ipynb .py files If you use .py files as source in the submission, please comment your code as much as you can to help others run it!","title":"3 - Submit to leaderboard"},{"location":"How%20To%20Use/3submit/#3-submit-to-leaderboard","text":"","title":"3 - Submit to leaderboard"},{"location":"How%20To%20Use/3submit/#step-1-create-3-required-files","text":"To submit to the leaderboard, you need 3 files: results.json.gz : The file you saved when recording your data . Instructions on how to create this file info.json : A short file of some metadata about your algorithm. Instructions on how to create this file, with template Either (a) an .ipynb notebook detailing your algorithm with code for running it, or (b) one or more .py files with source code for running/benchmarking your algorithm. Instructions here","title":"Step 1: Create 3 required files"},{"location":"How%20To%20Use/3submit/#step-2-put-files-in-appropriate-folder","text":"a. If you are using matbench through pypi, clone the source repository in order to make a pull request. Find instrucions for cloning the source repository on the Installation page . b. Locate the matbench/benchmarks directory. c. Create a new directory <benchmark name>_<algorithm name> according to your algorithm and the benchmark you ran (e.g., matbench_v0.1_my_algorithm_namev2 ). d. Put the required files from Step 1 into this directory. The files should look like: \u251c\u2500\u2500 benchmarks \u2502 \u2514\u2500\u2500 matbench_v0.1_<your algorithm name> \u2502 \u251c\u2500\u2500 info.json \u2502 \u251c\u2500\u2500 my_python_file.py \u2502 \u2514\u2500\u2500 results.json.gz Warning: the info.json and results.json.gz must have these names exactly for your PR to go through without problems, automatically. You can include any other small files (no naming scheme required) for running your code in this directory.","title":"Step 2: Put files in appropriate folder"},{"location":"How%20To%20Use/3submit/#step-3-create-a-pr-to-the-matbench-repository","text":"Commit your new changes to the repo with, and create a pull request (PR) to the Matbench repository. Find instructions for creating a PR here. Label your PR with the \"new_benchmark\" label. And you're done! If the tests pass, your submission will be added to the leaderboard!","title":"Step 3: Create a PR to the Matbench repository"},{"location":"How%20To%20Use/3submit/#resultsjsongz","text":"This file is the MatbenchBenchmark you saved during your benchmark. You can find docs about how to record and save a benchmark on the Running a benchmark page . This file is required for a submission.","title":"results.json.gz"},{"location":"How%20To%20Use/3submit/#infojson","text":"A metadata file about your algorithm, the authors, and any relevant citations. Please ensure the following keys are included, as they are required by our automated leaderboard: \"authors\" : The author names for this PR \"algorithm\" : The short or abbreviated name for your algorithm, e.g., \"MegNET v1.0\" . Should be 5-15 characters. \"algorithm_long\" : A longer description of your algorithm, to be shown as details for your results. Can be up to 1000 words. \"bibtex_refs\" : A comprehensive list of references for your algorithm, including manuscripts and preprints for the algorithm itself, each formatted as bibtex. \"notes\" : Any other freeform notes you'd like to include as details for your algorithm/submission. Can include things like computing resources used to train/run the algorithm, methodology, alternative configurations, links, etc. \"requirements\" : A dictionary of software requirements for running your algorithm. In particular, installing these should ensure your Source files run without issues. Please include the matbench version in these requirments. Here's an template info.json you can copy+paste and edit to get started: { \"authors\": \"My name\", \"algorithm\": \"COOLNet v14\", \"algorithm_long\": \"A longer description of my super cool algorithm, COOLNet v14.\", \"bibtex_refs\": \"@article{Dunn2020,\\n doi = {10.1038/s41524-020-00406-3},\\n url = {https://doi.org/10.1038/s41524-020-00406-3},\\n year = {2020},\\n month = sep,\\n publisher = {Springer Science and Business Media {LLC}},\\n volume = {6},\\n number = {1},\\n author = {Alexander Dunn and Qi Wang and Alex Ganose and Daniel Dopp and Anubhav Jain},\\n title = {Benchmarking materials property prediction methods: the Matbench test set and Automatminer reference algorithm},\\n journal = {npj Computational Materials}\\n}\", \"notes\": \"Some freeform notes users might be interested in, if they were to run your source code files.\", \"requirements\": {\"python\": [\"scikit-learn==0.24.1\", \"numpy==1.20.1\", \"matbench==0.1.0\"]} }","title":"info.json"},{"location":"How%20To%20Use/3submit/#source-files","text":"At least one source file (one or more .py files or a Jupyter notebook .ipynb ) must be included with submission. This is to help others run and understand your code and results.","title":"Source files"},{"location":"How%20To%20Use/3submit/#general-guidelines","text":"The source file should contain all the code needed for configuring, training, and running your algorithm on all the benchmark tasks you decide to run. The easiest way to create a source file is just use the source file you used while recording your benchmark results . There are no naming requirements for these source files. You can also include other supporting files, like metadata, features, etc. if they are critical for the algorithm to run and they are small (<10MB). Please include the matbench code (e.g., mb.record(...) ) for obtaining benchmarks/recording/examining results in the source files.","title":"General guidelines"},{"location":"How%20To%20Use/3submit/#jupyter-notebooks","text":"The preferred format for source files is a jupyter notebook with some code for running your algorithm on Matbench. You can find an example The notebook should generally follow the format of the example notebook /benchmarks/matbench_v0.1_dummy/notebook.ipynb . Try to include a long form, human readable description of how your algorithm works, any package versions needed to have it run correctly, and most importantly, a link to a publication for your algorithm . Aside from that, what goes in your notebook is pretty freeform; put whatever is needed to allow someone else to train and run your algorithm on the benchmark . You can find an example template for a notebook in the matbench repo under /benchmarks/matbench_v0.1_dummy/notebook.ipynb","title":"Jupyter notebooks"},{"location":"How%20To%20Use/3submit/#py-files","text":"If you use .py files as source in the submission, please comment your code as much as you can to help others run it!","title":".py files"},{"location":"How%20To%20Use/advanced/","text":"Advanced usage Once you have recorded some data, you can examine it with the MatbenchBenchmark object. If you are looking to record data, see the Recording data page . Pretty much everything in Matbench - including scoring, saving, loading, recording, inspecting, and more - can be done thru MatbenchBenchmark directly. Loading and saving Load a completed, valid benchmark from disk: mb = MatbenchBechmark . from_file ( \"path/to/my_results.json.gz\" ) >>> mb < MatbenchBenchmark > Save a completed, valid benchmark to disk mb . to_file ( \"path/to/my_results.json.gz\" ) Task data Tasks ( MatbenchTask ) are accessible as MatbenchBenchmark attributes through their names. Let's say we are interested in matbench_dielectric . # Access task thru attribute task = mb . matbench_dielectric # This task is a MatbenchTask object >>> print ( task ) < MatbenchTask > See task metadata See metadata for an individual task. metadata = mb . matbench_dielectric . metadata >>> metadata { 'input_type' : 'structure' , 'mad' : 0.808534704217072 , 'n_samples' : 4764 , 'target' : 'n' , 'task_type' : 'regression' , 'unit' : 'unitless' , 'bibtex_refs' : [ \"@Article{Dunn2020, \\n author={Dunn, Alexander \\n and Wang, Qi \\n and Ganose, Alex \\n and Dopp, Daniel \\n and Jain, Anubhav}, \\n title={Benchmarking materials property prediction methods: the Matbench test set and Automatminer reference algorithm}, \\n journal={npj Computational Materials}, \\n year= {2020} , \\n month= {Sep} , \\n day= {15} , \\n volume= {6} , \\n number= {1} , \\n pages= {138} , \\n abstract={We present a benchmark test suite and an automated machine learning procedure for evaluating supervised machine learning (ML) models for predicting properties of inorganic bulk materials. The test suite, Matbench, is a set of 13{ \\\\ thinspace}ML tasks that range in size from 312 to 132k samples and contain data from 10 density functional theory-derived and experimental sources. Tasks include predicting optical, thermal, electronic, thermodynamic, tensile, and elastic properties given a material's composition and/or crystal structure. The reference algorithm, Automatminer, is a highly-extensible, fully automated ML pipeline for predicting materials properties from materials primitives (such as composition and crystal structure) without user intervention or hyperparameter tuning. We test Automatminer on the Matbench test suite and compare its predictive power with state-of-the-art crystal graph neural networks and a traditional descriptor-based Random Forest model. We find Automatminer achieves the best performance on 8 of 13 tasks in the benchmark. We also show our test suite is capable of exposing predictive advantages of each algorithm---namely, that crystal graph methods appear to outperform traditional machine learning methods given { \\\\ textasciitilde}104 or greater data points. We encourage evaluating materials ML algorithms on the Matbench benchmark and comparing them against the latest version of Automatminer.}, \\n issn={2057-3960}, \\n doi={10.1038/s41524-020-00406-3}, \\n url={https://doi.org/10.1038/s41524-020-00406-3} \\n } \\n \" , '@article{Jain2013, \\n author = {Jain, Anubhav and Ong, Shyue Ping and Hautier, Geoffroy and Chen, Wei and Richards, William Davidson and Dacek, Stephen and Cholia, Shreyas and Gunter, Dan and Skinner, David and Ceder, Gerbrand and Persson, Kristin a.}, \\n doi = {10.1063/1.4812323}, \\n issn = {2166532X} , \\n journal = {APL Materials}, \\n number = {1} , \\n pages = {011002} , \\n title = {{The Materials Project: A materials genome approach to accelerating materials innovation}}, \\n url = {http://link.aip.org/link/AMPADS/v1/i1/p011002/s1 \\\\ &Agg=doi}, \\n volume = {1} , \\n year = {2013} \\n }' , '@article{Petousis2017, \\n author={Petousis, Ioannis and Mrdjenovich, David and Ballouz, Eric \\n and Liu, Miao and Winston, Donald and Chen, Wei and Graf, Tanja \\n and Schladt, Thomas D. and Persson, Kristin A. and Prinz, Fritz B.}, \\n title={High-throughput screening of inorganic compounds for the \\n discovery of novel dielectric and optical materials}, \\n journal={Scientific Data}, \\n year= {2017} , \\n month= {Jan} , \\n day= {31} , \\n publisher={The Author(s)}, \\n volume= {4} , \\n pages= {160134} , \\n note={Data Descriptor}, \\n url={http://dx.doi.org/10.1038/sdata.2016.134} \\n }' ], 'columns' : { 'n' : 'Target variable. Refractive index (unitless).' , 'structure' : 'Pymatgen Structure of the material.' }, 'description' : 'Matbench v0.1 test dataset for predicting refractive index from structure. Adapted from Materials Project database. Removed entries having a formation energy (or energy above the convex hull) more than 150meV and those having refractive indices less than 1 and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details.' , 'file_type' : 'json.gz' , 'num_entries' : 4764 , 'url' : 'https://ml.materialsproject.org/projects/matbench_dielectric.json.gz' , 'hash' : '83befa09bc2ec2f4b6143afc413157827a90e5e2e42c1eb507ccfa01bf26a1d6' , 'reference' : 'Petousis, I., Mrdjenovich, D., Ballouz, E., Liu, M., Winston, D., \\n Chen, W., Graf, T., Schladt, T. D., Persson, K. A. & Prinz, F. B. \\n High-throughput screening of inorganic compounds for the discovery \\n of novel dielectric and optical materials. Sci. Data 4, 160134 (2017).' , } # Metadata is also accessible as attributes >>> metadata . unit \"unitless\" See which folds of this task are recorded recorded_folds = mb . matbench_dielectric . is_recorded # In this example, we only have folds 0 and 1 recorded. >>> recorded_folds { 0 : True , 1 : True , 2 : False , 3 : False , 4 : False } See task score stats among folds All folds must be recorded to see score stats. scores = mb . matbench_dielectric . scores # Show score stats taken over all folds >>> scores { 'mae' : { 'mean' : 0.31502894856879793 , 'max' : 0.42569840085084304 , 'min' : 0.21883030230732342 , 'std' : 0.0672172232063864 }, 'rmse' : { 'mean' : 1.7202043807691947 , 'max' : 2.9472145483123082 , 'min' : 0.6855155532720747 , 'std' : 0.8140297551209411 }, 'mape' : { 'mean' : 0.08510552426501797 , 'max' : 0.09872854141937873 , 'min' : 0.07201546203802894 , 'std' : 0.009760258167856002 }, 'max_error' : { 'mean' : 34.996903717427166 , 'max' : 59.01119325894446 , 'min' : 14.665353016975205 , 'std' : 17.978224948280573 } } # scores are also accessible as attrs >>> scores . mae . max 0.42569840085084304 See outputs, parameters, and scores for individual task folds # Get all of our recorded results results = mb . matbench_dielectric . results >>> results { 'fold_0' : { 'data' : { 'mb-dielectric-0008' : 2.1816278769942685 , 'mb-dielectric-0010' : 2.1449892069940995 , 'mb-dielectric-0019' : 3.9022885489716175 , 'mb-dielectric-0025' : 4.105947591302149 , ... }, 'parameters' : { 'best_pipeline' : '[\"(selectfwe, SelectFwe(alpha=0.006, score_func=<function f_regression at 0x2aaaef1a0840>))...\"' ... }, 'scores' : { 'mae' : 0.21883030230732342 , 'mape' : 0.07602888421332273 , 'max_error' : 14.665353016975205 , 'rmse' : 0.6855155532720747 } }, 'fold_1' : { ... }, ... } # Individual fold data are available thru attrs >>> results . fold_4 . data [ 'mb-dielectric-4751' ] 2.5696947646331614 # Including ML parameters for a specific fold, if made available >>> results . fold_4 . parameters { 'best_pipeline' : [ '(selectfwe, SelectFwe(alpha=0.034, score_func=<function f_regression at 0x2aaaf35a08c8>))' , '(zerocount, ZeroCount())' , '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.85, criterion=friedman_mse, init=null, \\n learning_rate=0.1, loss=huber, max_depth=9, \\n max_features=0.7500000000000001, max_leaf_nodes=null, \\n min_impurity_decrease=0.0, min_impurity_split=null, \\n min_samples_leaf=13, min_samples_split=17, \\n min_weight_fraction_leaf=0.0, n_estimators=100, \\n n_iter_no_change=null, presort=auto, \\n random_state=null, subsample=0.7500000000000001, \\n tol=0.0001, validation_fraction=0.1, verbose=0, \\n warm_start=false))' ], 'features_reduced' : [ 'MagpieData maximum Number' , 'MagpieData maximum MendeleevNumber' , 'MagpieData mean MendeleevNumber' , 'MagpieData avg_dev MendeleevNumber' , 'MagpieData range AtomicWeight' , ... } # Get score metrics on fold 4 >>> results . fold_4 . scores { 'mae' : 0.3264316502622554 , 'mape' : 0.09872854141937873 , 'max_error' : 28.160118784575193 , 'rmse' : 1.6137009708660595 } Validate an individual task's results >>> mb . matbench_dielectric . validate () # If does not throw an error, it's valid! Benchmark data A MatbenchBenchmark is a collection of tasks. Once your benchmark is recorded, you can inspect it. Get information about the state of a benchmark >>> mb . get_info () \"\"\" Matbench package 0.1.0 running benchmark 'matbench_v0.1' is complete: True is recorded: True is valid: True Results: - 'matbench_dielectric' MAE mean: 29.09435441521901 - 'matbench_expt_gap' MAE mean: 5.097990146029299 - 'matbench_expt_is_metal' ROCAUC mean: 0.490515739562644 - 'matbench_glass' ROCAUC mean: 0.4915206231191361 - 'matbench_mp_e_form' MAE mean: 1.9798749618345852 - 'matbench_jdft2d' MAE mean: 624.8594821594436 - 'matbench_log_gvrh' MAE mean: 0.7503117195807093 - 'matbench_log_kvrh' MAE mean: 0.8337265925158915 - 'matbench_mp_gap' MAE mean: 3.9947345263133185 - 'matbench_mp_is_metal' ROCAUC mean: 0.4995330363104962 - 'matbench_perovskites' MAE mean: 1.6494389339807394 - 'matbench_phonons' MAE mean: 1442.1910745917485 - 'matbench_steels' MAE mean: 514.6879431114869 \"\"\" Access a summary of score data, across all tasks Access score data for multiple metrics, including fold statistics, programmatically >>> mb . scores { 'matbench_dielectric' : { 'mae' : { 'mean' : 29.09435441521901 , 'max' : 29.790913986352297 , 'min' : 26.50764023789047 , 'std' : 1.2938287761791334 }, 'rmse' : { 'mean' : 33.654269974352744 , 'max' : 34.44945162692406 , 'min' : 30.707221665034698 , 'std' : 1.4740060199828717 }, 'mape' : { 'mean' : 14.169387576348942 , 'max' : 14.56764274096521 , 'min' : 12.928095832225917 , 'std' : 0.6228030143476618 }, 'max_error' : { 'mean' : 58.85621300050616 , 'max' : 60.1966146990726 , 'min' : 53.98208657241693 , 'std' : 2.4395502402545453 }}, 'matbench_expt_gap' : { 'mae' : { 'mean' : 5.097990146029299 , 'max' : 5.290261095781455 , 'min' : 4.6298670001648965 , 'std' : 0.2397514292575463 }, 'rmse' : { 'mean' : 6.006638705150991 , 'max' : 6.226508032402611 , 'min' : 5.47028276176484 , 'std' : 0.27274122238814 }, 'mape' : { 'mean' : 1.38641021305497e+16 , 'max' : 1.5276180519639252e+16 , 'min' : 1.2259552001352658e+16 , 'std' : 986247659935790.8 }, 'max_error' : { 'mean' : 11.407347551284193 , 'max' : 11.688512264782567 , 'min' : 10.489690494035637 , 'std' : 0.45961704429199657 }}, 'matbench_expt_is_metal' : { 'accuracy' : { 'mean' : 0.4903474887540754 , 'max' : 0.5050813008130082 , 'min' : 0.47459349593495936 , 'std' : 0.013195738662206162 }, 'balanced_accuracy' : { 'mean' : 0.490515739562644 , 'max' : 0.5052590266875981 , 'min' : 0.4747707180038007 , 'std' : 0.013195964150335589 }, 'f1' : { 'mean' : 0.5107296153663292 , 'max' : 0.5248780487804879 , 'min' : 0.49560975609756097 , 'std' : 0.012667909247509207 }, 'rocauc' : { 'mean' : 0.490515739562644 , 'max' : 0.5052590266875981 , 'min' : 0.4747707180038007 , 'std' : 0.013195964150335589 }}, 'matbench_glass' : { 'accuracy' : { 'mean' : 0.5059859154929578 , 'max' : 0.528169014084507 , 'min' : 0.477112676056338 , 'std' : 0.018718357549298598 }, 'balanced_accuracy' : { 'mean' : 0.4915206231191361 , 'max' : 0.518476250739163 , 'min' : 0.4564355205025932 , 'std' : 0.022745473256365906 }, 'f1' : { 'mean' : 0.6019858156028368 , 'max' : 0.6198581560283688 , 'min' : 0.5787234042553191 , 'std' : 0.015080889486527119 }, 'rocauc' : { 'mean' : 0.4915206231191361 , 'max' : 0.518476250739163 , 'min' : 0.4564355205025932 , 'std' : 0.022745473256365906 }}, 'matbench_mp_e_form' : { 'mae' : { 'mean' : 1.9798749618345852 , 'max' : 1.9820103943808465 , 'min' : 1.9764313221160588 , 'std' : 0.0018588951040352502 }, 'rmse' : { 'mean' : 2.376419875235826 , 'max' : 2.3794812432136196 , 'min' : 2.3722602233100063 , 'std' : 0.0023430849418330816 }, 'mape' : { 'mean' : 6989111302031.963 , 'max' : 7492035787402.213 , 'min' : 6236081301418.79 , 'std' : 476980899991.28485 }, 'max_error' : { 'mean' : 6.9650087167699155 , 'max' : 7.057955130739103 , 'min' : 6.878168095265195 , 'std' : 0.06657839974500762 }}, 'matbench_jdft2d' : { 'mae' : { 'mean' : 624.8594821594436 , 'max' : 662.8351790033564 , 'min' : 484.0870035426516 , 'std' : 70.41763851884579 }, 'rmse' : { 'mean' : 754.6594168930902 , 'max' : 802.851398577492 , 'min' : 575.4212296101125 , 'std' : 89.65203353138263 }, 'mape' : { 'mean' : 12.691214729498025 , 'max' : 22.18652735053058 , 'min' : 9.642403294653164 , 'std' : 4.833743597331997 }, 'max_error' : { 'mean' : 1455.537803743586 , 'max' : 1532.911339763068 , 'min' : 1229.7021907932801 , 'std' : 113.62938957056699 }}, 'matbench_log_gvrh' : { 'mae' : { 'mean' : 0.7503117195807093 , 'max' : 0.7567499426463542 , 'min' : 0.7458321525860483 , 'std' : 0.004177000349054263 }, 'rmse' : { 'mean' : 0.8922201073043177 , 'max' : 0.8965161788869266 , 'min' : 0.8860255812982848 , 'std' : 0.0034322474625259137 }, 'mape' : { 'mean' : 15059325260426.266 , 'max' : 26158506009539.293 , 'min' : 4541885118479.488 , 'std' : 6978350942510.934 }, 'max_error' : { 'mean' : 2.4294014472589063 , 'max' : 2.7078341735946374 , 'min' : 2.2460171713812693 , 'std' : 0.17276767393879686 }}, 'matbench_log_kvrh' : { 'mae' : { 'mean' : 0.8337265925158915 , 'max' : 0.84093059152486 , 'min' : 0.8252194857104939 , 'std' : 0.005960109281798535 }, 'rmse' : { 'mean' : 1.0122909056359641 , 'max' : 1.0190702248693488 , 'min' : 1.0038726599443502 , 'std' : 0.005051164726815858 }, 'mape' : { 'mean' : 5205086458416.939 , 'max' : 10062434398435.773 , 'min' : 1547244178802.9026 , 'std' : 3081512230166.448 }, 'max_error' : { 'mean' : 2.5243586576102204 , 'max' : 2.7538971602513187 , 'min' : 2.4510034654636557 , 'std' : 0.11592723389441413 }}, 'matbench_mp_gap' : { 'mae' : { 'mean' : 3.9947345263133185 , 'max' : 4.040261917311839 , 'min' : 3.8419572019120563 , 'std' : 0.07657166015944829 }, 'rmse' : { 'mean' : 4.802562096614456 , 'max' : 4.852934760261583 , 'min' : 4.621350867969822 , 'std' : 0.09070340779972745 }, 'mape' : { 'mean' : 9376100521414580.0 , 'max' : 9530024251770120.0 , 'min' : 9017068673849420.0 , 'std' : 191246529837308.34 }, 'max_error' : { 'mean' : 9.641818242181197 , 'max' : 9.721159283071396 , 'min' : 9.326360936678295 , 'std' : 0.15772886643823172 }}, 'matbench_mp_is_metal' : { 'accuracy' : { 'mean' : 0.49927909555806177 , 'max' : 0.5032513429459994 , 'min' : 0.49498185930358574 , 'std' : 0.002961735738880825 }, 'balanced_accuracy' : { 'mean' : 0.4995330363104962 , 'max' : 0.5035756141508568 , 'min' : 0.4951605437227332 , 'std' : 0.003013293507682773 }, 'f1' : { 'mean' : 0.465575654865608 , 'max' : 0.46982498491249247 , 'min' : 0.46097364715349026 , 'std' : 0.0031704147980028555 }, 'rocauc' : { 'mean' : 0.4995330363104962 , 'max' : 0.5035756141508567 , 'min' : 0.4951605437227331 , 'std' : 0.0030132935076827893 }}, 'matbench_perovskites' : { 'mae' : { 'mean' : 1.6494389339807394 , 'max' : 1.6643604327414814 , 'min' : 1.6083671212370563 , 'std' : 0.02130042981456539 }, 'rmse' : { 'mean' : 1.9895605050492304 , 'max' : 2.0097384860674103 , 'min' : 1.9348806762983708 , 'std' : 0.028069501175258544 }, 'mape' : { 'mean' : 8474366075980.172 , 'max' : 17109693350693.695 , 'min' : 170695202621.18396 , 'std' : 5913986606286.262 }, 'max_error' : { 'mean' : 5.122830203832267 , 'max' : 5.401364835279832 , 'min' : 4.933113748862263 , 'std' : 0.15432057817183506 }}, 'matbench_phonons' : { 'mae' : { 'mean' : 1442.1910745917485 , 'max' : 1460.5342302638428 , 'min' : 1404.6727173726108 , 'std' : 19.87835062913105 }, 'rmse' : { 'mean' : 1739.1638204522908 , 'max' : 1748.4453111626615 , 'min' : 1714.4001958506544 , 'std' : 12.506318415067186 }, 'mape' : { 'mean' : 4.535426963268569 , 'max' : 4.692503460859966 , 'min' : 4.356729242935622 , 'std' : 0.11577855407899913 }, 'max_error' : { 'mean' : 3387.1756802926197 , 'max' : 3490.7322416780676 , 'min' : 3312.8239446861567 , 'std' : 60.586867518772216 }}, 'matbench_steels' : { 'mae' : { 'mean' : 514.6879431114869 , 'max' : 548.5353510044772 , 'min' : 488.97286237333986 , 'std' : 24.98451122832146 }, 'rmse' : { 'mean' : 619.9832706475461 , 'max' : 651.1520235084482 , 'min' : 591.9607445092288 , 'std' : 24.183510586935057 }, 'mape' : { 'mean' : 0.39220921441643364 , 'max' : 0.4201053232886023 , 'min' : 0.368378839458224 , 'std' : 0.02076964611162295 }, 'max_error' : { 'mean' : 1331.6729147023618 , 'max' : 1389.1259692340998 , 'min' : 1272.982373277621 , 'std' : 40.71026078669035 }}} Validate an entire benchmark You can validate an entire benchmark with the validate method of MatbenchBenchmark . >>> mb . is_valid True If your results are valid, it ensures the automated leaderboard can understand your data and that all folds for all tasks are recorded. See if a benchmark is complete A benchmark is complete if it contains all the tasks specified in the benchmark specification. In the case of the benchmark Matbench v0.1, this means all 13 tasks are present in your benchmark (though they may not be recorded yet!). >>> mb . is_complete True","title":"Advanced usage"},{"location":"How%20To%20Use/advanced/#advanced-usage","text":"Once you have recorded some data, you can examine it with the MatbenchBenchmark object. If you are looking to record data, see the Recording data page . Pretty much everything in Matbench - including scoring, saving, loading, recording, inspecting, and more - can be done thru MatbenchBenchmark directly.","title":"Advanced usage"},{"location":"How%20To%20Use/advanced/#loading-and-saving","text":"","title":"Loading and saving"},{"location":"How%20To%20Use/advanced/#load-a-completed-valid-benchmark-from-disk","text":"mb = MatbenchBechmark . from_file ( \"path/to/my_results.json.gz\" ) >>> mb < MatbenchBenchmark >","title":"Load a completed, valid benchmark from disk:"},{"location":"How%20To%20Use/advanced/#save-a-completed-valid-benchmark-to-disk","text":"mb . to_file ( \"path/to/my_results.json.gz\" )","title":"Save a completed, valid benchmark to disk"},{"location":"How%20To%20Use/advanced/#task-data","text":"Tasks ( MatbenchTask ) are accessible as MatbenchBenchmark attributes through their names. Let's say we are interested in matbench_dielectric . # Access task thru attribute task = mb . matbench_dielectric # This task is a MatbenchTask object >>> print ( task ) < MatbenchTask >","title":"Task data"},{"location":"How%20To%20Use/advanced/#see-task-metadata","text":"See metadata for an individual task. metadata = mb . matbench_dielectric . metadata >>> metadata { 'input_type' : 'structure' , 'mad' : 0.808534704217072 , 'n_samples' : 4764 , 'target' : 'n' , 'task_type' : 'regression' , 'unit' : 'unitless' , 'bibtex_refs' : [ \"@Article{Dunn2020, \\n author={Dunn, Alexander \\n and Wang, Qi \\n and Ganose, Alex \\n and Dopp, Daniel \\n and Jain, Anubhav}, \\n title={Benchmarking materials property prediction methods: the Matbench test set and Automatminer reference algorithm}, \\n journal={npj Computational Materials}, \\n year= {2020} , \\n month= {Sep} , \\n day= {15} , \\n volume= {6} , \\n number= {1} , \\n pages= {138} , \\n abstract={We present a benchmark test suite and an automated machine learning procedure for evaluating supervised machine learning (ML) models for predicting properties of inorganic bulk materials. The test suite, Matbench, is a set of 13{ \\\\ thinspace}ML tasks that range in size from 312 to 132k samples and contain data from 10 density functional theory-derived and experimental sources. Tasks include predicting optical, thermal, electronic, thermodynamic, tensile, and elastic properties given a material's composition and/or crystal structure. The reference algorithm, Automatminer, is a highly-extensible, fully automated ML pipeline for predicting materials properties from materials primitives (such as composition and crystal structure) without user intervention or hyperparameter tuning. We test Automatminer on the Matbench test suite and compare its predictive power with state-of-the-art crystal graph neural networks and a traditional descriptor-based Random Forest model. We find Automatminer achieves the best performance on 8 of 13 tasks in the benchmark. We also show our test suite is capable of exposing predictive advantages of each algorithm---namely, that crystal graph methods appear to outperform traditional machine learning methods given { \\\\ textasciitilde}104 or greater data points. We encourage evaluating materials ML algorithms on the Matbench benchmark and comparing them against the latest version of Automatminer.}, \\n issn={2057-3960}, \\n doi={10.1038/s41524-020-00406-3}, \\n url={https://doi.org/10.1038/s41524-020-00406-3} \\n } \\n \" , '@article{Jain2013, \\n author = {Jain, Anubhav and Ong, Shyue Ping and Hautier, Geoffroy and Chen, Wei and Richards, William Davidson and Dacek, Stephen and Cholia, Shreyas and Gunter, Dan and Skinner, David and Ceder, Gerbrand and Persson, Kristin a.}, \\n doi = {10.1063/1.4812323}, \\n issn = {2166532X} , \\n journal = {APL Materials}, \\n number = {1} , \\n pages = {011002} , \\n title = {{The Materials Project: A materials genome approach to accelerating materials innovation}}, \\n url = {http://link.aip.org/link/AMPADS/v1/i1/p011002/s1 \\\\ &Agg=doi}, \\n volume = {1} , \\n year = {2013} \\n }' , '@article{Petousis2017, \\n author={Petousis, Ioannis and Mrdjenovich, David and Ballouz, Eric \\n and Liu, Miao and Winston, Donald and Chen, Wei and Graf, Tanja \\n and Schladt, Thomas D. and Persson, Kristin A. and Prinz, Fritz B.}, \\n title={High-throughput screening of inorganic compounds for the \\n discovery of novel dielectric and optical materials}, \\n journal={Scientific Data}, \\n year= {2017} , \\n month= {Jan} , \\n day= {31} , \\n publisher={The Author(s)}, \\n volume= {4} , \\n pages= {160134} , \\n note={Data Descriptor}, \\n url={http://dx.doi.org/10.1038/sdata.2016.134} \\n }' ], 'columns' : { 'n' : 'Target variable. Refractive index (unitless).' , 'structure' : 'Pymatgen Structure of the material.' }, 'description' : 'Matbench v0.1 test dataset for predicting refractive index from structure. Adapted from Materials Project database. Removed entries having a formation energy (or energy above the convex hull) more than 150meV and those having refractive indices less than 1 and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details.' , 'file_type' : 'json.gz' , 'num_entries' : 4764 , 'url' : 'https://ml.materialsproject.org/projects/matbench_dielectric.json.gz' , 'hash' : '83befa09bc2ec2f4b6143afc413157827a90e5e2e42c1eb507ccfa01bf26a1d6' , 'reference' : 'Petousis, I., Mrdjenovich, D., Ballouz, E., Liu, M., Winston, D., \\n Chen, W., Graf, T., Schladt, T. D., Persson, K. A. & Prinz, F. B. \\n High-throughput screening of inorganic compounds for the discovery \\n of novel dielectric and optical materials. Sci. Data 4, 160134 (2017).' , } # Metadata is also accessible as attributes >>> metadata . unit \"unitless\"","title":"See task metadata"},{"location":"How%20To%20Use/advanced/#see-which-folds-of-this-task-are-recorded","text":"recorded_folds = mb . matbench_dielectric . is_recorded # In this example, we only have folds 0 and 1 recorded. >>> recorded_folds { 0 : True , 1 : True , 2 : False , 3 : False , 4 : False }","title":"See which folds of this task are recorded"},{"location":"How%20To%20Use/advanced/#see-task-score-stats-among-folds","text":"All folds must be recorded to see score stats. scores = mb . matbench_dielectric . scores # Show score stats taken over all folds >>> scores { 'mae' : { 'mean' : 0.31502894856879793 , 'max' : 0.42569840085084304 , 'min' : 0.21883030230732342 , 'std' : 0.0672172232063864 }, 'rmse' : { 'mean' : 1.7202043807691947 , 'max' : 2.9472145483123082 , 'min' : 0.6855155532720747 , 'std' : 0.8140297551209411 }, 'mape' : { 'mean' : 0.08510552426501797 , 'max' : 0.09872854141937873 , 'min' : 0.07201546203802894 , 'std' : 0.009760258167856002 }, 'max_error' : { 'mean' : 34.996903717427166 , 'max' : 59.01119325894446 , 'min' : 14.665353016975205 , 'std' : 17.978224948280573 } } # scores are also accessible as attrs >>> scores . mae . max 0.42569840085084304","title":"See task score stats among folds"},{"location":"How%20To%20Use/advanced/#see-outputs-parameters-and-scores-for-individual-task-folds","text":"# Get all of our recorded results results = mb . matbench_dielectric . results >>> results { 'fold_0' : { 'data' : { 'mb-dielectric-0008' : 2.1816278769942685 , 'mb-dielectric-0010' : 2.1449892069940995 , 'mb-dielectric-0019' : 3.9022885489716175 , 'mb-dielectric-0025' : 4.105947591302149 , ... }, 'parameters' : { 'best_pipeline' : '[\"(selectfwe, SelectFwe(alpha=0.006, score_func=<function f_regression at 0x2aaaef1a0840>))...\"' ... }, 'scores' : { 'mae' : 0.21883030230732342 , 'mape' : 0.07602888421332273 , 'max_error' : 14.665353016975205 , 'rmse' : 0.6855155532720747 } }, 'fold_1' : { ... }, ... } # Individual fold data are available thru attrs >>> results . fold_4 . data [ 'mb-dielectric-4751' ] 2.5696947646331614 # Including ML parameters for a specific fold, if made available >>> results . fold_4 . parameters { 'best_pipeline' : [ '(selectfwe, SelectFwe(alpha=0.034, score_func=<function f_regression at 0x2aaaf35a08c8>))' , '(zerocount, ZeroCount())' , '(gradientboostingregressor, GradientBoostingRegressor(alpha=0.85, criterion=friedman_mse, init=null, \\n learning_rate=0.1, loss=huber, max_depth=9, \\n max_features=0.7500000000000001, max_leaf_nodes=null, \\n min_impurity_decrease=0.0, min_impurity_split=null, \\n min_samples_leaf=13, min_samples_split=17, \\n min_weight_fraction_leaf=0.0, n_estimators=100, \\n n_iter_no_change=null, presort=auto, \\n random_state=null, subsample=0.7500000000000001, \\n tol=0.0001, validation_fraction=0.1, verbose=0, \\n warm_start=false))' ], 'features_reduced' : [ 'MagpieData maximum Number' , 'MagpieData maximum MendeleevNumber' , 'MagpieData mean MendeleevNumber' , 'MagpieData avg_dev MendeleevNumber' , 'MagpieData range AtomicWeight' , ... } # Get score metrics on fold 4 >>> results . fold_4 . scores { 'mae' : 0.3264316502622554 , 'mape' : 0.09872854141937873 , 'max_error' : 28.160118784575193 , 'rmse' : 1.6137009708660595 }","title":"See outputs, parameters, and scores for individual task folds"},{"location":"How%20To%20Use/advanced/#validate-an-individual-tasks-results","text":">>> mb . matbench_dielectric . validate () # If does not throw an error, it's valid!","title":"Validate an individual task's results"},{"location":"How%20To%20Use/advanced/#benchmark-data","text":"A MatbenchBenchmark is a collection of tasks. Once your benchmark is recorded, you can inspect it.","title":"Benchmark data"},{"location":"How%20To%20Use/advanced/#get-information-about-the-state-of-a-benchmark","text":">>> mb . get_info () \"\"\" Matbench package 0.1.0 running benchmark 'matbench_v0.1' is complete: True is recorded: True is valid: True Results: - 'matbench_dielectric' MAE mean: 29.09435441521901 - 'matbench_expt_gap' MAE mean: 5.097990146029299 - 'matbench_expt_is_metal' ROCAUC mean: 0.490515739562644 - 'matbench_glass' ROCAUC mean: 0.4915206231191361 - 'matbench_mp_e_form' MAE mean: 1.9798749618345852 - 'matbench_jdft2d' MAE mean: 624.8594821594436 - 'matbench_log_gvrh' MAE mean: 0.7503117195807093 - 'matbench_log_kvrh' MAE mean: 0.8337265925158915 - 'matbench_mp_gap' MAE mean: 3.9947345263133185 - 'matbench_mp_is_metal' ROCAUC mean: 0.4995330363104962 - 'matbench_perovskites' MAE mean: 1.6494389339807394 - 'matbench_phonons' MAE mean: 1442.1910745917485 - 'matbench_steels' MAE mean: 514.6879431114869 \"\"\"","title":"Get information about the state of a benchmark"},{"location":"How%20To%20Use/advanced/#access-a-summary-of-score-data-across-all-tasks","text":"Access score data for multiple metrics, including fold statistics, programmatically >>> mb . scores { 'matbench_dielectric' : { 'mae' : { 'mean' : 29.09435441521901 , 'max' : 29.790913986352297 , 'min' : 26.50764023789047 , 'std' : 1.2938287761791334 }, 'rmse' : { 'mean' : 33.654269974352744 , 'max' : 34.44945162692406 , 'min' : 30.707221665034698 , 'std' : 1.4740060199828717 }, 'mape' : { 'mean' : 14.169387576348942 , 'max' : 14.56764274096521 , 'min' : 12.928095832225917 , 'std' : 0.6228030143476618 }, 'max_error' : { 'mean' : 58.85621300050616 , 'max' : 60.1966146990726 , 'min' : 53.98208657241693 , 'std' : 2.4395502402545453 }}, 'matbench_expt_gap' : { 'mae' : { 'mean' : 5.097990146029299 , 'max' : 5.290261095781455 , 'min' : 4.6298670001648965 , 'std' : 0.2397514292575463 }, 'rmse' : { 'mean' : 6.006638705150991 , 'max' : 6.226508032402611 , 'min' : 5.47028276176484 , 'std' : 0.27274122238814 }, 'mape' : { 'mean' : 1.38641021305497e+16 , 'max' : 1.5276180519639252e+16 , 'min' : 1.2259552001352658e+16 , 'std' : 986247659935790.8 }, 'max_error' : { 'mean' : 11.407347551284193 , 'max' : 11.688512264782567 , 'min' : 10.489690494035637 , 'std' : 0.45961704429199657 }}, 'matbench_expt_is_metal' : { 'accuracy' : { 'mean' : 0.4903474887540754 , 'max' : 0.5050813008130082 , 'min' : 0.47459349593495936 , 'std' : 0.013195738662206162 }, 'balanced_accuracy' : { 'mean' : 0.490515739562644 , 'max' : 0.5052590266875981 , 'min' : 0.4747707180038007 , 'std' : 0.013195964150335589 }, 'f1' : { 'mean' : 0.5107296153663292 , 'max' : 0.5248780487804879 , 'min' : 0.49560975609756097 , 'std' : 0.012667909247509207 }, 'rocauc' : { 'mean' : 0.490515739562644 , 'max' : 0.5052590266875981 , 'min' : 0.4747707180038007 , 'std' : 0.013195964150335589 }}, 'matbench_glass' : { 'accuracy' : { 'mean' : 0.5059859154929578 , 'max' : 0.528169014084507 , 'min' : 0.477112676056338 , 'std' : 0.018718357549298598 }, 'balanced_accuracy' : { 'mean' : 0.4915206231191361 , 'max' : 0.518476250739163 , 'min' : 0.4564355205025932 , 'std' : 0.022745473256365906 }, 'f1' : { 'mean' : 0.6019858156028368 , 'max' : 0.6198581560283688 , 'min' : 0.5787234042553191 , 'std' : 0.015080889486527119 }, 'rocauc' : { 'mean' : 0.4915206231191361 , 'max' : 0.518476250739163 , 'min' : 0.4564355205025932 , 'std' : 0.022745473256365906 }}, 'matbench_mp_e_form' : { 'mae' : { 'mean' : 1.9798749618345852 , 'max' : 1.9820103943808465 , 'min' : 1.9764313221160588 , 'std' : 0.0018588951040352502 }, 'rmse' : { 'mean' : 2.376419875235826 , 'max' : 2.3794812432136196 , 'min' : 2.3722602233100063 , 'std' : 0.0023430849418330816 }, 'mape' : { 'mean' : 6989111302031.963 , 'max' : 7492035787402.213 , 'min' : 6236081301418.79 , 'std' : 476980899991.28485 }, 'max_error' : { 'mean' : 6.9650087167699155 , 'max' : 7.057955130739103 , 'min' : 6.878168095265195 , 'std' : 0.06657839974500762 }}, 'matbench_jdft2d' : { 'mae' : { 'mean' : 624.8594821594436 , 'max' : 662.8351790033564 , 'min' : 484.0870035426516 , 'std' : 70.41763851884579 }, 'rmse' : { 'mean' : 754.6594168930902 , 'max' : 802.851398577492 , 'min' : 575.4212296101125 , 'std' : 89.65203353138263 }, 'mape' : { 'mean' : 12.691214729498025 , 'max' : 22.18652735053058 , 'min' : 9.642403294653164 , 'std' : 4.833743597331997 }, 'max_error' : { 'mean' : 1455.537803743586 , 'max' : 1532.911339763068 , 'min' : 1229.7021907932801 , 'std' : 113.62938957056699 }}, 'matbench_log_gvrh' : { 'mae' : { 'mean' : 0.7503117195807093 , 'max' : 0.7567499426463542 , 'min' : 0.7458321525860483 , 'std' : 0.004177000349054263 }, 'rmse' : { 'mean' : 0.8922201073043177 , 'max' : 0.8965161788869266 , 'min' : 0.8860255812982848 , 'std' : 0.0034322474625259137 }, 'mape' : { 'mean' : 15059325260426.266 , 'max' : 26158506009539.293 , 'min' : 4541885118479.488 , 'std' : 6978350942510.934 }, 'max_error' : { 'mean' : 2.4294014472589063 , 'max' : 2.7078341735946374 , 'min' : 2.2460171713812693 , 'std' : 0.17276767393879686 }}, 'matbench_log_kvrh' : { 'mae' : { 'mean' : 0.8337265925158915 , 'max' : 0.84093059152486 , 'min' : 0.8252194857104939 , 'std' : 0.005960109281798535 }, 'rmse' : { 'mean' : 1.0122909056359641 , 'max' : 1.0190702248693488 , 'min' : 1.0038726599443502 , 'std' : 0.005051164726815858 }, 'mape' : { 'mean' : 5205086458416.939 , 'max' : 10062434398435.773 , 'min' : 1547244178802.9026 , 'std' : 3081512230166.448 }, 'max_error' : { 'mean' : 2.5243586576102204 , 'max' : 2.7538971602513187 , 'min' : 2.4510034654636557 , 'std' : 0.11592723389441413 }}, 'matbench_mp_gap' : { 'mae' : { 'mean' : 3.9947345263133185 , 'max' : 4.040261917311839 , 'min' : 3.8419572019120563 , 'std' : 0.07657166015944829 }, 'rmse' : { 'mean' : 4.802562096614456 , 'max' : 4.852934760261583 , 'min' : 4.621350867969822 , 'std' : 0.09070340779972745 }, 'mape' : { 'mean' : 9376100521414580.0 , 'max' : 9530024251770120.0 , 'min' : 9017068673849420.0 , 'std' : 191246529837308.34 }, 'max_error' : { 'mean' : 9.641818242181197 , 'max' : 9.721159283071396 , 'min' : 9.326360936678295 , 'std' : 0.15772886643823172 }}, 'matbench_mp_is_metal' : { 'accuracy' : { 'mean' : 0.49927909555806177 , 'max' : 0.5032513429459994 , 'min' : 0.49498185930358574 , 'std' : 0.002961735738880825 }, 'balanced_accuracy' : { 'mean' : 0.4995330363104962 , 'max' : 0.5035756141508568 , 'min' : 0.4951605437227332 , 'std' : 0.003013293507682773 }, 'f1' : { 'mean' : 0.465575654865608 , 'max' : 0.46982498491249247 , 'min' : 0.46097364715349026 , 'std' : 0.0031704147980028555 }, 'rocauc' : { 'mean' : 0.4995330363104962 , 'max' : 0.5035756141508567 , 'min' : 0.4951605437227331 , 'std' : 0.0030132935076827893 }}, 'matbench_perovskites' : { 'mae' : { 'mean' : 1.6494389339807394 , 'max' : 1.6643604327414814 , 'min' : 1.6083671212370563 , 'std' : 0.02130042981456539 }, 'rmse' : { 'mean' : 1.9895605050492304 , 'max' : 2.0097384860674103 , 'min' : 1.9348806762983708 , 'std' : 0.028069501175258544 }, 'mape' : { 'mean' : 8474366075980.172 , 'max' : 17109693350693.695 , 'min' : 170695202621.18396 , 'std' : 5913986606286.262 }, 'max_error' : { 'mean' : 5.122830203832267 , 'max' : 5.401364835279832 , 'min' : 4.933113748862263 , 'std' : 0.15432057817183506 }}, 'matbench_phonons' : { 'mae' : { 'mean' : 1442.1910745917485 , 'max' : 1460.5342302638428 , 'min' : 1404.6727173726108 , 'std' : 19.87835062913105 }, 'rmse' : { 'mean' : 1739.1638204522908 , 'max' : 1748.4453111626615 , 'min' : 1714.4001958506544 , 'std' : 12.506318415067186 }, 'mape' : { 'mean' : 4.535426963268569 , 'max' : 4.692503460859966 , 'min' : 4.356729242935622 , 'std' : 0.11577855407899913 }, 'max_error' : { 'mean' : 3387.1756802926197 , 'max' : 3490.7322416780676 , 'min' : 3312.8239446861567 , 'std' : 60.586867518772216 }}, 'matbench_steels' : { 'mae' : { 'mean' : 514.6879431114869 , 'max' : 548.5353510044772 , 'min' : 488.97286237333986 , 'std' : 24.98451122832146 }, 'rmse' : { 'mean' : 619.9832706475461 , 'max' : 651.1520235084482 , 'min' : 591.9607445092288 , 'std' : 24.183510586935057 }, 'mape' : { 'mean' : 0.39220921441643364 , 'max' : 0.4201053232886023 , 'min' : 0.368378839458224 , 'std' : 0.02076964611162295 }, 'max_error' : { 'mean' : 1331.6729147023618 , 'max' : 1389.1259692340998 , 'min' : 1272.982373277621 , 'std' : 40.71026078669035 }}}","title":"Access a summary of score data, across all tasks"},{"location":"How%20To%20Use/advanced/#validate-an-entire-benchmark","text":"You can validate an entire benchmark with the validate method of MatbenchBenchmark . >>> mb . is_valid True If your results are valid, it ensures the automated leaderboard can understand your data and that all folds for all tasks are recorded.","title":"Validate an entire benchmark"},{"location":"How%20To%20Use/advanced/#see-if-a-benchmark-is-complete","text":"A benchmark is complete if it contains all the tasks specified in the benchmark specification. In the case of the benchmark Matbench v0.1, this means all 13 tasks are present in your benchmark (though they may not be recorded yet!). >>> mb . is_complete True","title":"See if a benchmark is complete"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_dielectric/","text":"matbench_v0.1 matbench_dielectric Individual Task Leaderboard for matbench_dielectric Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark. Leaderboard algorithm mean mae std mae mean rmse max max_error MODNet (v0.1.10) 0.2970 0.0720 1.7185 58.9519 AMMExpress v2020 0.3150 0.0672 1.7202 59.0112 CrabNet 0.3234 0.0714 1.7288 59.1583 RF-SCM/Magpie 0.4196 0.0750 1.8538 59.1201 CGCNN v2019 0.5988 0.0833 1.8976 58.9996 Dummy 0.8088 0.0718 1.9728 59.6653 Dataset info Description Matbench v0.1 test dataset for predicting refractive index from structure. Adapted from Materials Project database. Removed entries having a formation energy (or energy above the convex hull) more than 150meV and those having refractive indices less than 1 and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 4764 Task type: regression Input type: structure Dataset columns n: Target variable. Refractive index (unitless). structure: Pymatgen Structure of the material. Dataset reference Petousis, I., Mrdjenovich, D., Ballouz, E., Liu, M., Winston, D., Chen, W., Graf, T., Schladt, T. D., Persson, K. A. & Prinz, F. B. High-throughput screening of inorganic compounds for the discovery of novel dielectric and optical materials. Sci. Data 4, 160134 (2017). Metadata {'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@article{Jain2013,\\n' 'author = {Jain, Anubhav and Ong, Shyue Ping and Hautier, ' 'Geoffroy and Chen, Wei and Richards, William Davidson and ' 'Dacek, Stephen and Cholia, Shreyas and Gunter, Dan and ' 'Skinner, David and Ceder, Gerbrand and Persson, Kristin ' 'a.},\\n' 'doi = {10.1063/1.4812323},\\n' 'issn = {2166532X},\\n' 'journal = {APL Materials},\\n' 'number = {1},\\n' 'pages = {011002},\\n' 'title = {{The Materials Project: A materials genome approach ' 'to accelerating materials innovation}},\\n' 'url = ' '{http://link.aip.org/link/AMPADS/v1/i1/p011002/s1\\\\&Agg=doi},\\n' 'volume = {1},\\n' 'year = {2013}\\n' '}', '@article{Petousis2017,\\n' 'author={Petousis, Ioannis and Mrdjenovich, David and ' 'Ballouz, Eric\\n' 'and Liu, Miao and Winston, Donald and Chen, Wei and Graf, ' 'Tanja\\n' 'and Schladt, Thomas D. and Persson, Kristin A. and Prinz, ' 'Fritz B.},\\n' 'title={High-throughput screening of inorganic compounds for ' 'the\\n' 'discovery of novel dielectric and optical materials},\\n' 'journal={Scientific Data},\\n' 'year={2017},\\n' 'month={Jan},\\n' 'day={31},\\n' 'publisher={The Author(s)},\\n' 'volume={4},\\n' 'pages={160134},\\n' 'note={Data Descriptor},\\n' 'url={http://dx.doi.org/10.1038/sdata.2016.134}\\n' '}'], 'columns': {'n': 'Target variable. Refractive index (unitless).', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting refractive index ' 'from structure. Adapted from Materials Project database. ' 'Removed entries having a formation energy (or energy above ' 'the convex hull) more than 150meV and those having refractive ' 'indices less than 1 and those containing noble gases. ' 'Retrieved April 2, 2019. For benchmarking w/ nested cross ' 'validation, the order of the dataset must be identical to the ' 'retrieved data; refer to the Automatminer/Matbench ' 'publication for more details.', 'file_type': 'json.gz', 'hash': '83befa09bc2ec2f4b6143afc413157827a90e5e2e42c1eb507ccfa01bf26a1d6', 'input_type': 'structure', 'mad': 0.808534704217072, 'n_samples': 4764, 'num_entries': 4764, 'reference': 'Petousis, I., Mrdjenovich, D., Ballouz, E., Liu, M., Winston, ' 'D.,\\n' 'Chen, W., Graf, T., Schladt, T. D., Persson, K. A. & Prinz, F. ' 'B.\\n' 'High-throughput screening of inorganic compounds for the ' 'discovery\\n' 'of novel dielectric and optical materials. Sci. Data 4, 160134 ' '(2017).', 'target': 'n', 'task_type': 'regression', 'unit': 'unitless', 'url': 'https://ml.materialsproject.org/projects/matbench_dielectric.json.gz'}","title":"matbench_v0.1 matbench_dielectric"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_dielectric/#matbench_v01-matbench_dielectric","text":"","title":"matbench_v0.1 matbench_dielectric"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_dielectric/#individual-task-leaderboard-for-matbench_dielectric","text":"Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark.","title":"Individual Task Leaderboard for matbench_dielectric"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_dielectric/#leaderboard","text":"algorithm mean mae std mae mean rmse max max_error MODNet (v0.1.10) 0.2970 0.0720 1.7185 58.9519 AMMExpress v2020 0.3150 0.0672 1.7202 59.0112 CrabNet 0.3234 0.0714 1.7288 59.1583 RF-SCM/Magpie 0.4196 0.0750 1.8538 59.1201 CGCNN v2019 0.5988 0.0833 1.8976 58.9996 Dummy 0.8088 0.0718 1.9728 59.6653","title":"Leaderboard"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_dielectric/#dataset-info","text":"","title":"Dataset info"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_dielectric/#description","text":"Matbench v0.1 test dataset for predicting refractive index from structure. Adapted from Materials Project database. Removed entries having a formation energy (or energy above the convex hull) more than 150meV and those having refractive indices less than 1 and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 4764 Task type: regression Input type: structure","title":"Description"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_dielectric/#dataset-columns","text":"n: Target variable. Refractive index (unitless). structure: Pymatgen Structure of the material.","title":"Dataset columns"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_dielectric/#dataset-reference","text":"Petousis, I., Mrdjenovich, D., Ballouz, E., Liu, M., Winston, D., Chen, W., Graf, T., Schladt, T. D., Persson, K. A. & Prinz, F. B. High-throughput screening of inorganic compounds for the discovery of novel dielectric and optical materials. Sci. Data 4, 160134 (2017).","title":"Dataset reference"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_dielectric/#metadata","text":"{'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@article{Jain2013,\\n' 'author = {Jain, Anubhav and Ong, Shyue Ping and Hautier, ' 'Geoffroy and Chen, Wei and Richards, William Davidson and ' 'Dacek, Stephen and Cholia, Shreyas and Gunter, Dan and ' 'Skinner, David and Ceder, Gerbrand and Persson, Kristin ' 'a.},\\n' 'doi = {10.1063/1.4812323},\\n' 'issn = {2166532X},\\n' 'journal = {APL Materials},\\n' 'number = {1},\\n' 'pages = {011002},\\n' 'title = {{The Materials Project: A materials genome approach ' 'to accelerating materials innovation}},\\n' 'url = ' '{http://link.aip.org/link/AMPADS/v1/i1/p011002/s1\\\\&Agg=doi},\\n' 'volume = {1},\\n' 'year = {2013}\\n' '}', '@article{Petousis2017,\\n' 'author={Petousis, Ioannis and Mrdjenovich, David and ' 'Ballouz, Eric\\n' 'and Liu, Miao and Winston, Donald and Chen, Wei and Graf, ' 'Tanja\\n' 'and Schladt, Thomas D. and Persson, Kristin A. and Prinz, ' 'Fritz B.},\\n' 'title={High-throughput screening of inorganic compounds for ' 'the\\n' 'discovery of novel dielectric and optical materials},\\n' 'journal={Scientific Data},\\n' 'year={2017},\\n' 'month={Jan},\\n' 'day={31},\\n' 'publisher={The Author(s)},\\n' 'volume={4},\\n' 'pages={160134},\\n' 'note={Data Descriptor},\\n' 'url={http://dx.doi.org/10.1038/sdata.2016.134}\\n' '}'], 'columns': {'n': 'Target variable. Refractive index (unitless).', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting refractive index ' 'from structure. Adapted from Materials Project database. ' 'Removed entries having a formation energy (or energy above ' 'the convex hull) more than 150meV and those having refractive ' 'indices less than 1 and those containing noble gases. ' 'Retrieved April 2, 2019. For benchmarking w/ nested cross ' 'validation, the order of the dataset must be identical to the ' 'retrieved data; refer to the Automatminer/Matbench ' 'publication for more details.', 'file_type': 'json.gz', 'hash': '83befa09bc2ec2f4b6143afc413157827a90e5e2e42c1eb507ccfa01bf26a1d6', 'input_type': 'structure', 'mad': 0.808534704217072, 'n_samples': 4764, 'num_entries': 4764, 'reference': 'Petousis, I., Mrdjenovich, D., Ballouz, E., Liu, M., Winston, ' 'D.,\\n' 'Chen, W., Graf, T., Schladt, T. D., Persson, K. A. & Prinz, F. ' 'B.\\n' 'High-throughput screening of inorganic compounds for the ' 'discovery\\n' 'of novel dielectric and optical materials. Sci. Data 4, 160134 ' '(2017).', 'target': 'n', 'task_type': 'regression', 'unit': 'unitless', 'url': 'https://ml.materialsproject.org/projects/matbench_dielectric.json.gz'}","title":"Metadata"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_gap/","text":"matbench_v0.1 matbench_expt_gap Individual Task Leaderboard for matbench_expt_gap Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark. Leaderboard algorithm mean mae std mae mean rmse max max_error CrabNet 0.3463 0.0088 0.8504 9.8002 MODNet (v0.1.10) 0.3470 0.0222 0.7437 9.8567 AMMExpress v2020 0.4161 0.0194 0.9918 12.7533 RF-SCM/Magpie 0.4461 0.0177 0.8243 9.5428 Dummy 1.1435 0.0310 1.4438 10.7354 Dataset info Description Matbench v0.1 test dataset for predicting experimental band gap from composition alone. Retrieved from Zhuo et al. supplementary information. Deduplicated according to composition, removing compositions with reported band gaps spanning more than a 0.1eV range; remaining compositions were assigned values based on the closest experimental value to the mean experimental value for that composition among all reports. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 4604 Task type: regression Input type: composition Dataset columns composition: Chemical formula. gap expt: Target variable. Experimentally measured gap, in eV. Dataset reference Y. Zhuo, A. Masouri Tehrani, J. Brgoch (2018) Predicting the Band Gaps of Inorganic Solids by Machine Learning J. Phys. Chem. Lett. 2018, 9, 7, 1668-1673 https:doi.org/10.1021/acs.jpclett.8b00124. Metadata {'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@article{doi:10.1021/acs.jpclett.8b00124,\\n' 'author = {Zhuo, Ya and Mansouri Tehrani, Aria and Brgoch, ' 'Jakoah},\\n' 'title = {Predicting the Band Gaps of Inorganic Solids by ' 'Machine Learning},\\n' 'journal = {The Journal of Physical Chemistry Letters},\\n' 'volume = {9},\\n' 'number = {7},\\n' 'pages = {1668-1673},\\n' 'year = {2018},\\n' 'doi = {10.1021/acs.jpclett.8b00124},\\n' 'note ={PMID: 29532658},\\n' 'eprint = {\\n' 'https://doi.org/10.1021/acs.jpclett.8b00124\\n' '\\n' '}}'], 'columns': {'composition': 'Chemical formula.', 'gap expt': 'Target variable. Experimentally measured gap, in ' 'eV.'}, 'description': 'Matbench v0.1 test dataset for predicting experimental band ' 'gap from composition alone. Retrieved from Zhuo et al. ' 'supplementary information. Deduplicated according to ' 'composition, removing compositions with reported band gaps ' 'spanning more than a 0.1eV range; remaining compositions were ' 'assigned values based on the closest experimental value to ' 'the mean experimental value for that composition among all ' 'reports. For benchmarking w/ nested cross validation, the ' 'order of the dataset must be identical to the retrieved data; ' 'refer to the Automatminer/Matbench publication for more ' 'details.', 'file_type': 'json.gz', 'hash': '783e7d1461eb83b00b2f2942da4b95fda5e58a0d1ae26b581c24cf8a82ca75b2', 'input_type': 'composition', 'mad': 1.1432002429044061, 'n_samples': 4604, 'num_entries': 4604, 'reference': 'Y. Zhuo, A. Masouri Tehrani, J. Brgoch (2018) Predicting the ' 'Band Gaps of Inorganic Solids by Machine Learning J. Phys. ' 'Chem. Lett. 2018, 9, 7, 1668-1673 ' 'https:doi.org/10.1021/acs.jpclett.8b00124.', 'target': 'gap expt', 'task_type': 'regression', 'unit': 'eV', 'url': 'https://ml.materialsproject.org/projects/matbench_expt_gap.json.gz'}","title":"matbench_v0.1 matbench_expt_gap"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_gap/#matbench_v01-matbench_expt_gap","text":"","title":"matbench_v0.1 matbench_expt_gap"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_gap/#individual-task-leaderboard-for-matbench_expt_gap","text":"Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark.","title":"Individual Task Leaderboard for matbench_expt_gap"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_gap/#leaderboard","text":"algorithm mean mae std mae mean rmse max max_error CrabNet 0.3463 0.0088 0.8504 9.8002 MODNet (v0.1.10) 0.3470 0.0222 0.7437 9.8567 AMMExpress v2020 0.4161 0.0194 0.9918 12.7533 RF-SCM/Magpie 0.4461 0.0177 0.8243 9.5428 Dummy 1.1435 0.0310 1.4438 10.7354","title":"Leaderboard"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_gap/#dataset-info","text":"","title":"Dataset info"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_gap/#description","text":"Matbench v0.1 test dataset for predicting experimental band gap from composition alone. Retrieved from Zhuo et al. supplementary information. Deduplicated according to composition, removing compositions with reported band gaps spanning more than a 0.1eV range; remaining compositions were assigned values based on the closest experimental value to the mean experimental value for that composition among all reports. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 4604 Task type: regression Input type: composition","title":"Description"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_gap/#dataset-columns","text":"composition: Chemical formula. gap expt: Target variable. Experimentally measured gap, in eV.","title":"Dataset columns"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_gap/#dataset-reference","text":"Y. Zhuo, A. Masouri Tehrani, J. Brgoch (2018) Predicting the Band Gaps of Inorganic Solids by Machine Learning J. Phys. Chem. Lett. 2018, 9, 7, 1668-1673 https:doi.org/10.1021/acs.jpclett.8b00124.","title":"Dataset reference"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_gap/#metadata","text":"{'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@article{doi:10.1021/acs.jpclett.8b00124,\\n' 'author = {Zhuo, Ya and Mansouri Tehrani, Aria and Brgoch, ' 'Jakoah},\\n' 'title = {Predicting the Band Gaps of Inorganic Solids by ' 'Machine Learning},\\n' 'journal = {The Journal of Physical Chemistry Letters},\\n' 'volume = {9},\\n' 'number = {7},\\n' 'pages = {1668-1673},\\n' 'year = {2018},\\n' 'doi = {10.1021/acs.jpclett.8b00124},\\n' 'note ={PMID: 29532658},\\n' 'eprint = {\\n' 'https://doi.org/10.1021/acs.jpclett.8b00124\\n' '\\n' '}}'], 'columns': {'composition': 'Chemical formula.', 'gap expt': 'Target variable. Experimentally measured gap, in ' 'eV.'}, 'description': 'Matbench v0.1 test dataset for predicting experimental band ' 'gap from composition alone. Retrieved from Zhuo et al. ' 'supplementary information. Deduplicated according to ' 'composition, removing compositions with reported band gaps ' 'spanning more than a 0.1eV range; remaining compositions were ' 'assigned values based on the closest experimental value to ' 'the mean experimental value for that composition among all ' 'reports. For benchmarking w/ nested cross validation, the ' 'order of the dataset must be identical to the retrieved data; ' 'refer to the Automatminer/Matbench publication for more ' 'details.', 'file_type': 'json.gz', 'hash': '783e7d1461eb83b00b2f2942da4b95fda5e58a0d1ae26b581c24cf8a82ca75b2', 'input_type': 'composition', 'mad': 1.1432002429044061, 'n_samples': 4604, 'num_entries': 4604, 'reference': 'Y. Zhuo, A. Masouri Tehrani, J. Brgoch (2018) Predicting the ' 'Band Gaps of Inorganic Solids by Machine Learning J. Phys. ' 'Chem. Lett. 2018, 9, 7, 1668-1673 ' 'https:doi.org/10.1021/acs.jpclett.8b00124.', 'target': 'gap expt', 'task_type': 'regression', 'unit': 'eV', 'url': 'https://ml.materialsproject.org/projects/matbench_expt_gap.json.gz'}","title":"Metadata"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_is_metal/","text":"matbench_v0.1 matbench_expt_is_metal Individual Task Leaderboard for matbench_expt_is_metal Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark. Leaderboard algorithm mean rocauc std rocauc mean f1 mean balanced_accuracy AMMExpress v2020 0.9209 0.0028 0.9200 0.9209 RF-SCM/Magpie 0.9167 0.0064 0.9159 0.9167 Dummy 0.4924 0.0128 0.4913 0.4924 Dataset info Description Matbench v0.1 test dataset for classifying metallicity from composition alone. Retrieved from Zhuo et al. supplementary information. Deduplicated according to composition, ensuring no conflicting reports were entered for any compositions (i.e., no reported compositions were both metal and nonmetal). For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 4921 Task type: classification Input type: composition Dataset columns composition: Chemical formula. is_metal: Target variable. 1 if is a metal, 0 if nonmetal. Dataset reference Y. Zhuo, A. Masouri Tehrani, J. Brgoch (2018) Predicting the Band Gaps of Inorganic Solids by Machine Learning J. Phys. Chem. Lett. 2018, 9, 7, 1668-1673 https//:doi.org/10.1021/acs.jpclett.8b00124. Metadata {'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@article{doi:10.1021/acs.jpclett.8b00124,\\n' 'author = {Zhuo, Ya and Mansouri Tehrani, Aria and Brgoch, ' 'Jakoah},\\n' 'title= {Predicting the Band Gaps of Inorganic Solids by ' 'Machine Learning},\\n' 'journal = {The Journal of Physical Chemistry Letters},\\n' 'volume = {9},\\n' 'number = {7},\\n' 'pages = {1668-1673},\\n' 'year = {2018},\\n' 'doi = {10.1021/acs.jpclett.8b00124},\\n' 'note ={PMID: 29532658},\\n' 'eprint = {\\n' 'https://doi.org/10.1021/acs.jpclett.8b00124\\n' '\\n' '}}'], 'columns': {'composition': 'Chemical formula.', 'is_metal': 'Target variable. 1 if is a metal, 0 if nonmetal.'}, 'description': 'Matbench v0.1 test dataset for classifying metallicity from ' 'composition alone. Retrieved from Zhuo et al. supplementary ' 'information. Deduplicated according to composition, ensuring ' 'no conflicting reports were entered for any compositions ' '(i.e., no reported compositions were both metal and ' 'nonmetal). For benchmarking w/ nested cross validation, the ' 'order of the dataset must be identical to the retrieved data; ' 'refer to the Automatminer/Matbench publication for more ' 'details.', 'file_type': 'json.gz', 'frac_true': 0.4980694980694981, 'hash': '8f2a4f9bacdcbc5c2c73615629ee7986f09d39bed40ba7db52b61b2889730887', 'input_type': 'composition', 'n_samples': 4921, 'num_entries': 4921, 'reference': 'Y. Zhuo, A. Masouri Tehrani, J. Brgoch (2018) Predicting the ' 'Band Gaps of Inorganic Solids by Machine Learning J. Phys. ' 'Chem. Lett. 2018, 9, 7, 1668-1673 \\n' ' https//:doi.org/10.1021/acs.jpclett.8b00124.', 'target': 'is_metal', 'task_type': 'classification', 'unit': None, 'url': 'https://ml.materialsproject.org/projects/matbench_expt_is_metal.json.gz'}","title":"matbench_v0.1 matbench_expt_is_metal"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_is_metal/#matbench_v01-matbench_expt_is_metal","text":"","title":"matbench_v0.1 matbench_expt_is_metal"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_is_metal/#individual-task-leaderboard-for-matbench_expt_is_metal","text":"Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark.","title":"Individual Task Leaderboard for matbench_expt_is_metal"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_is_metal/#leaderboard","text":"algorithm mean rocauc std rocauc mean f1 mean balanced_accuracy AMMExpress v2020 0.9209 0.0028 0.9200 0.9209 RF-SCM/Magpie 0.9167 0.0064 0.9159 0.9167 Dummy 0.4924 0.0128 0.4913 0.4924","title":"Leaderboard"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_is_metal/#dataset-info","text":"","title":"Dataset info"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_is_metal/#description","text":"Matbench v0.1 test dataset for classifying metallicity from composition alone. Retrieved from Zhuo et al. supplementary information. Deduplicated according to composition, ensuring no conflicting reports were entered for any compositions (i.e., no reported compositions were both metal and nonmetal). For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 4921 Task type: classification Input type: composition","title":"Description"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_is_metal/#dataset-columns","text":"composition: Chemical formula. is_metal: Target variable. 1 if is a metal, 0 if nonmetal.","title":"Dataset columns"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_is_metal/#dataset-reference","text":"Y. Zhuo, A. Masouri Tehrani, J. Brgoch (2018) Predicting the Band Gaps of Inorganic Solids by Machine Learning J. Phys. Chem. Lett. 2018, 9, 7, 1668-1673 https//:doi.org/10.1021/acs.jpclett.8b00124.","title":"Dataset reference"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_expt_is_metal/#metadata","text":"{'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@article{doi:10.1021/acs.jpclett.8b00124,\\n' 'author = {Zhuo, Ya and Mansouri Tehrani, Aria and Brgoch, ' 'Jakoah},\\n' 'title= {Predicting the Band Gaps of Inorganic Solids by ' 'Machine Learning},\\n' 'journal = {The Journal of Physical Chemistry Letters},\\n' 'volume = {9},\\n' 'number = {7},\\n' 'pages = {1668-1673},\\n' 'year = {2018},\\n' 'doi = {10.1021/acs.jpclett.8b00124},\\n' 'note ={PMID: 29532658},\\n' 'eprint = {\\n' 'https://doi.org/10.1021/acs.jpclett.8b00124\\n' '\\n' '}}'], 'columns': {'composition': 'Chemical formula.', 'is_metal': 'Target variable. 1 if is a metal, 0 if nonmetal.'}, 'description': 'Matbench v0.1 test dataset for classifying metallicity from ' 'composition alone. Retrieved from Zhuo et al. supplementary ' 'information. Deduplicated according to composition, ensuring ' 'no conflicting reports were entered for any compositions ' '(i.e., no reported compositions were both metal and ' 'nonmetal). For benchmarking w/ nested cross validation, the ' 'order of the dataset must be identical to the retrieved data; ' 'refer to the Automatminer/Matbench publication for more ' 'details.', 'file_type': 'json.gz', 'frac_true': 0.4980694980694981, 'hash': '8f2a4f9bacdcbc5c2c73615629ee7986f09d39bed40ba7db52b61b2889730887', 'input_type': 'composition', 'n_samples': 4921, 'num_entries': 4921, 'reference': 'Y. Zhuo, A. Masouri Tehrani, J. Brgoch (2018) Predicting the ' 'Band Gaps of Inorganic Solids by Machine Learning J. Phys. ' 'Chem. Lett. 2018, 9, 7, 1668-1673 \\n' ' https//:doi.org/10.1021/acs.jpclett.8b00124.', 'target': 'is_metal', 'task_type': 'classification', 'unit': None, 'url': 'https://ml.materialsproject.org/projects/matbench_expt_is_metal.json.gz'}","title":"Metadata"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_glass/","text":"matbench_v0.1 matbench_glass Individual Task Leaderboard for matbench_glass Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark. Leaderboard algorithm mean rocauc std rocauc mean f1 mean balanced_accuracy AMMExpress v2020 0.8607 0.0199 0.9043 0.8607 RF-SCM/Magpie 0.8587 0.0158 0.9278 0.8587 Dummy 0.5005 0.0178 0.7127 0.5005 Dataset info Description Matbench v0.1 test dataset for predicting full bulk metallic glass formation ability from chemical formula. Retrieved from \"Nonequilibrium Phase Diagrams of Ternary Amorphous Alloys,\u2019 a volume of the Landolt\u2013 B\u00f6rnstein collection. Deduplicated according to composition, ensuring no compositions were reported as both GFA and not GFA (i.e., all reports agreed on the classification designation). For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 5680 Task type: classification Input type: composition Dataset columns composition: Chemical formula. gfa: Target variable. Glass forming ability: 1 means glass forming and corresponds to amorphous, 0 means non full glass forming. Dataset reference Y. Kawazoe, T. Masumoto, A.-P. Tsai, J.-Z. Yu, T. Aihara Jr. (1997) Y. Kawazoe, J.-Z. Yu, A.-P. Tsai, T. Masumoto (ed.) SpringerMaterials Nonequilibrium Phase Diagrams of Ternary Amorphous Alloys \u00b7 1 Introduction Landolt-B\u00f6rnstein - Group III Condensed Matter 37A (Nonequilibrium Phase Diagrams of Ternary Amorphous Alloys) https://www.springer.com/gp/book/9783540605072 (Springer-Verlag Berlin Heidelberg \u00a9 1997) Accessed: 03-09-2019 Metadata {'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@Misc{LandoltBornstein1997:sm_lbs_978-3-540-47679-5_2,\\n' 'author=\"Kawazoe, Y.\\n' 'and Masumoto, T.\\n' 'and Tsai, A.-P.\\n' 'and Yu, J.-Z.\\n' 'and Aihara Jr., T.\",\\n' 'editor=\"Kawazoe, Y.\\n' 'and Yu, J.-Z.\\n' 'and Tsai, A.-P.\\n' 'and Masumoto, T.\",\\n' 'title=\"Nonequilibrium Phase Diagrams of Ternary Amorphous ' 'Alloys {\\\\textperiodcentered} 1 Introduction: Datasheet from ' 'Landolt-B{\\\\\"o}rnstein - Group III Condensed Matter ' '{\\\\textperiodcentered} Volume 37A: ``Nonequilibrium Phase ' \"Diagrams of Ternary Amorphous Alloys'' in SpringerMaterials \" '(https://dx.doi.org/10.1007/10510374{\\\\_}2)\",\\n' 'publisher=\"Springer-Verlag Berlin Heidelberg\",\\n' 'note=\"Copyright 1997 Springer-Verlag Berlin Heidelberg\",\\n' 'note=\"Part of SpringerMaterials\",\\n' 'note=\"accessed 2018-10-23\",\\n' 'doi=\"10.1007/10510374_2\",\\n' 'url=\"https://materials.springer.com/lb/docs/sm_lbs_978-3-540-47679-5_2\"\\n' '}', '@Article{Ward2016,\\n' 'author={Ward, Logan\\n' 'and Agrawal, Ankit\\n' 'and Choudhary, Alok\\n' 'and Wolverton, Christopher},\\n' 'title={A general-purpose machine learning framework for ' 'predicting properties of inorganic materials},\\n' 'journal={Npj Computational Materials},\\n' 'year={2016},\\n' 'month={Aug},\\n' 'day={26},\\n' 'publisher={The Author(s)},\\n' 'volume={2},\\n' 'pages={16028},\\n' 'note={Article},\\n' 'url={http://dx.doi.org/10.1038/npjcompumats.2016.28}\\n' '}'], 'columns': {'composition': 'Chemical formula.', 'gfa': 'Target variable. Glass forming ability: 1 means glass ' 'forming and corresponds to amorphous, 0 means non full ' 'glass forming.'}, 'description': 'Matbench v0.1 test dataset for predicting full bulk metallic ' 'glass formation ability from chemical formula. Retrieved from ' '\"Nonequilibrium Phase Diagrams of Ternary Amorphous Alloys,\u2019 ' 'a volume of the Landolt\u2013 B\u00f6rnstein collection. Deduplicated ' 'according to composition, ensuring no compositions were ' 'reported as both GFA and not GFA (i.e., all reports agreed on ' 'the classification designation). For benchmarking w/ nested ' 'cross validation, the order of the dataset must be identical ' 'to the retrieved data; refer to the Automatminer/Matbench ' 'publication for more details.', 'file_type': 'json.gz', 'frac_true': 0.710387323943662, 'hash': '36beb654e2a463ee2a6572105bea0ca2961eee7c7b26a25377bff2c3b338e53a', 'input_type': 'composition', 'n_samples': 5680, 'num_entries': 5680, 'reference': 'Y. Kawazoe, T. Masumoto, A.-P. Tsai, J.-Z. Yu, T. Aihara Jr. ' '(1997) Y. Kawazoe, J.-Z. Yu, A.-P. Tsai, T. Masumoto (ed.) ' 'SpringerMaterials\\n' 'Nonequilibrium Phase Diagrams of Ternary Amorphous Alloys \u00b7 1 ' 'Introduction Landolt-B\u00f6rnstein - Group III Condensed Matter 37A ' '(Nonequilibrium Phase Diagrams of Ternary Amorphous Alloys) ' 'https://www.springer.com/gp/book/9783540605072 (Springer-Verlag ' 'Berlin Heidelberg \u00a9 1997) Accessed: 03-09-2019', 'target': 'gfa', 'task_type': 'classification', 'unit': None, 'url': 'https://ml.materialsproject.org/projects/matbench_glass.json.gz'}","title":"matbench_v0.1 matbench_glass"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_glass/#matbench_v01-matbench_glass","text":"","title":"matbench_v0.1 matbench_glass"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_glass/#individual-task-leaderboard-for-matbench_glass","text":"Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark.","title":"Individual Task Leaderboard for matbench_glass"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_glass/#leaderboard","text":"algorithm mean rocauc std rocauc mean f1 mean balanced_accuracy AMMExpress v2020 0.8607 0.0199 0.9043 0.8607 RF-SCM/Magpie 0.8587 0.0158 0.9278 0.8587 Dummy 0.5005 0.0178 0.7127 0.5005","title":"Leaderboard"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_glass/#dataset-info","text":"","title":"Dataset info"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_glass/#description","text":"Matbench v0.1 test dataset for predicting full bulk metallic glass formation ability from chemical formula. Retrieved from \"Nonequilibrium Phase Diagrams of Ternary Amorphous Alloys,\u2019 a volume of the Landolt\u2013 B\u00f6rnstein collection. Deduplicated according to composition, ensuring no compositions were reported as both GFA and not GFA (i.e., all reports agreed on the classification designation). For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 5680 Task type: classification Input type: composition","title":"Description"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_glass/#dataset-columns","text":"composition: Chemical formula. gfa: Target variable. Glass forming ability: 1 means glass forming and corresponds to amorphous, 0 means non full glass forming.","title":"Dataset columns"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_glass/#dataset-reference","text":"Y. Kawazoe, T. Masumoto, A.-P. Tsai, J.-Z. Yu, T. Aihara Jr. (1997) Y. Kawazoe, J.-Z. Yu, A.-P. Tsai, T. Masumoto (ed.) SpringerMaterials Nonequilibrium Phase Diagrams of Ternary Amorphous Alloys \u00b7 1 Introduction Landolt-B\u00f6rnstein - Group III Condensed Matter 37A (Nonequilibrium Phase Diagrams of Ternary Amorphous Alloys) https://www.springer.com/gp/book/9783540605072 (Springer-Verlag Berlin Heidelberg \u00a9 1997) Accessed: 03-09-2019","title":"Dataset reference"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_glass/#metadata","text":"{'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@Misc{LandoltBornstein1997:sm_lbs_978-3-540-47679-5_2,\\n' 'author=\"Kawazoe, Y.\\n' 'and Masumoto, T.\\n' 'and Tsai, A.-P.\\n' 'and Yu, J.-Z.\\n' 'and Aihara Jr., T.\",\\n' 'editor=\"Kawazoe, Y.\\n' 'and Yu, J.-Z.\\n' 'and Tsai, A.-P.\\n' 'and Masumoto, T.\",\\n' 'title=\"Nonequilibrium Phase Diagrams of Ternary Amorphous ' 'Alloys {\\\\textperiodcentered} 1 Introduction: Datasheet from ' 'Landolt-B{\\\\\"o}rnstein - Group III Condensed Matter ' '{\\\\textperiodcentered} Volume 37A: ``Nonequilibrium Phase ' \"Diagrams of Ternary Amorphous Alloys'' in SpringerMaterials \" '(https://dx.doi.org/10.1007/10510374{\\\\_}2)\",\\n' 'publisher=\"Springer-Verlag Berlin Heidelberg\",\\n' 'note=\"Copyright 1997 Springer-Verlag Berlin Heidelberg\",\\n' 'note=\"Part of SpringerMaterials\",\\n' 'note=\"accessed 2018-10-23\",\\n' 'doi=\"10.1007/10510374_2\",\\n' 'url=\"https://materials.springer.com/lb/docs/sm_lbs_978-3-540-47679-5_2\"\\n' '}', '@Article{Ward2016,\\n' 'author={Ward, Logan\\n' 'and Agrawal, Ankit\\n' 'and Choudhary, Alok\\n' 'and Wolverton, Christopher},\\n' 'title={A general-purpose machine learning framework for ' 'predicting properties of inorganic materials},\\n' 'journal={Npj Computational Materials},\\n' 'year={2016},\\n' 'month={Aug},\\n' 'day={26},\\n' 'publisher={The Author(s)},\\n' 'volume={2},\\n' 'pages={16028},\\n' 'note={Article},\\n' 'url={http://dx.doi.org/10.1038/npjcompumats.2016.28}\\n' '}'], 'columns': {'composition': 'Chemical formula.', 'gfa': 'Target variable. Glass forming ability: 1 means glass ' 'forming and corresponds to amorphous, 0 means non full ' 'glass forming.'}, 'description': 'Matbench v0.1 test dataset for predicting full bulk metallic ' 'glass formation ability from chemical formula. Retrieved from ' '\"Nonequilibrium Phase Diagrams of Ternary Amorphous Alloys,\u2019 ' 'a volume of the Landolt\u2013 B\u00f6rnstein collection. Deduplicated ' 'according to composition, ensuring no compositions were ' 'reported as both GFA and not GFA (i.e., all reports agreed on ' 'the classification designation). For benchmarking w/ nested ' 'cross validation, the order of the dataset must be identical ' 'to the retrieved data; refer to the Automatminer/Matbench ' 'publication for more details.', 'file_type': 'json.gz', 'frac_true': 0.710387323943662, 'hash': '36beb654e2a463ee2a6572105bea0ca2961eee7c7b26a25377bff2c3b338e53a', 'input_type': 'composition', 'n_samples': 5680, 'num_entries': 5680, 'reference': 'Y. Kawazoe, T. Masumoto, A.-P. Tsai, J.-Z. Yu, T. Aihara Jr. ' '(1997) Y. Kawazoe, J.-Z. Yu, A.-P. Tsai, T. Masumoto (ed.) ' 'SpringerMaterials\\n' 'Nonequilibrium Phase Diagrams of Ternary Amorphous Alloys \u00b7 1 ' 'Introduction Landolt-B\u00f6rnstein - Group III Condensed Matter 37A ' '(Nonequilibrium Phase Diagrams of Ternary Amorphous Alloys) ' 'https://www.springer.com/gp/book/9783540605072 (Springer-Verlag ' 'Berlin Heidelberg \u00a9 1997) Accessed: 03-09-2019', 'target': 'gfa', 'task_type': 'classification', 'unit': None, 'url': 'https://ml.materialsproject.org/projects/matbench_glass.json.gz'}","title":"Metadata"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_jdft2d/","text":"matbench_v0.1 matbench_jdft2d Individual Task Leaderboard for matbench_jdft2d Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark. Leaderboard algorithm mean mae std mae mean rmse max max_error MODNet (v0.1.10) 34.5368 9.4959 92.2288 1534.9797 AMMExpress v2020 39.8497 9.8835 106.5460 1552.9102 CrabNet 45.6104 12.2491 120.0088 1532.0118 CGCNN v2019 49.2440 11.5865 112.7689 1516.9120 RF-SCM/Magpie 50.0440 8.6271 112.2660 1538.6073 Dummy 67.2851 10.1832 126.8446 1491.7993 Dataset info Description Matbench v0.1 test dataset for predicting exfoliation energies from crystal structure (computed with the OptB88vdW and TBmBJ functionals). Adapted from the JARVIS DFT database. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 636 Task type: regression Input type: structure Dataset columns exfoliation_en: Target variable. Exfoliation energy (meV/atom). structure: Pymatgen Structure of the material. Dataset reference 2D Dataset discussed in: High-throughput Identification and Characterization of Two dimensional Materials using Density functional theory Kamal Choudhary, Irina Kalish, Ryan Beams & Francesca Tavazza Scientific Reports volume 7, Article number: 5179 (2017) Original 2D Data file sourced from: choudhary, kamal; https://orcid.org/0000-0001-9737-8074 (2018): jdft_2d-7-7-2018.json. figshare. Dataset. Metadata {'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@Article{Choudhary2017,\\n' 'author={Choudhary, Kamal\\n' 'and Kalish, Irina\\n' 'and Beams, Ryan\\n' 'and Tavazza, Francesca},\\n' 'title={High-throughput Identification and Characterization ' 'of Two-dimensional Materials using Density functional ' 'theory},\\n' 'journal={Scientific Reports},\\n' 'year={2017},\\n' 'volume={7},\\n' 'number={1},\\n' 'pages={5179},\\n' 'abstract={We introduce a simple criterion to identify ' 'two-dimensional (2D) materials based on the comparison ' 'between experimental lattice constants and lattice constants ' 'mainly obtained from Materials-Project (MP) density ' 'functional theory (DFT) calculation repository. ' 'Specifically, if the relative difference between the two ' 'lattice constants for a specific material is greater than or ' 'equal to 5%, we predict them to be good candidates for 2D ' 'materials. We have predicted at least 1356 such 2D ' 'materials. For all the systems satisfying our criterion, we ' 'manually create single layer systems and calculate their ' 'energetics, structural, electronic, and elastic properties ' 'for both the bulk and the single layer cases. Currently the ' 'database consists of 1012 bulk and 430 single layer ' 'materials, of which 371 systems are common to bulk and ' 'single layer. The rest of calculations are underway. To ' 'validate our criterion, we calculated the exfoliation energy ' 'of the suggested layered materials, and we found that in ' '88.9% of the cases the currently accepted criterion for ' 'exfoliation was satisfied. Also, using molybdenum telluride ' 'as a test case, we performed X-ray diffraction and Raman ' 'scattering experiments to benchmark our calculations and ' 'understand their applicability and limitations. The data is ' 'publicly available at the website ' 'http://www.ctcms.nist.gov/{\\t' 'extasciitilde}knc6/JVASP.html.},\\n' 'issn={2045-2322},\\n' 'doi={10.1038/s41598-017-05402-0},\\n' 'url={https://doi.org/10.1038/s41598-017-05402-0}\\n' '}', '@misc{choudhary__2018, title={jdft_2d-7-7-2018.json}, ' 'url={https://figshare.com/articles/jdft_2d-7-7-2018_json/6815705/1}, ' 'DOI={10.6084/m9.figshare.6815705.v1}, abstractNote={2D ' 'materials}, publisher={figshare}, author={choudhary, kamal ' 'and https://orcid.org/0000-0001-9737-8074}, year={2018}, ' 'month={Jul}}'], 'columns': {'exfoliation_en': 'Target variable. Exfoliation energy ' '(meV/atom).', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting exfoliation ' 'energies from crystal structure (computed with the OptB88vdW ' 'and TBmBJ functionals). Adapted from the JARVIS DFT database. ' 'For benchmarking w/ nested cross validation, the order of the ' 'dataset must be identical to the retrieved data; refer to the ' 'Automatminer/Matbench publication for more details.', 'file_type': 'json.gz', 'hash': '26057dc4524e193e32abffb296ce819b58b6e11d1278cae329a2f97817a4eddf', 'input_type': 'structure', 'mad': 67.20200406491116, 'n_samples': 636, 'num_entries': 636, 'reference': '2D Dataset discussed in:\\n' 'High-throughput Identification and Characterization of Two ' 'dimensional Materials using Density functional theory Kamal ' 'Choudhary, Irina Kalish, Ryan Beams & Francesca Tavazza ' 'Scientific Reports volume 7, Article number: 5179 (2017)\\n' 'Original 2D Data file sourced from:\\n' 'choudhary, kamal; https://orcid.org/0000-0001-9737-8074 (2018): ' 'jdft_2d-7-7-2018.json. figshare. Dataset.', 'target': 'exfoliation_en', 'task_type': 'regression', 'unit': 'meV/atom', 'url': 'https://ml.materialsproject.org/projects/matbench_jdft2d.json.gz'}","title":"matbench_v0.1 matbench_jdft2d"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_jdft2d/#matbench_v01-matbench_jdft2d","text":"","title":"matbench_v0.1 matbench_jdft2d"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_jdft2d/#individual-task-leaderboard-for-matbench_jdft2d","text":"Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark.","title":"Individual Task Leaderboard for matbench_jdft2d"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_jdft2d/#leaderboard","text":"algorithm mean mae std mae mean rmse max max_error MODNet (v0.1.10) 34.5368 9.4959 92.2288 1534.9797 AMMExpress v2020 39.8497 9.8835 106.5460 1552.9102 CrabNet 45.6104 12.2491 120.0088 1532.0118 CGCNN v2019 49.2440 11.5865 112.7689 1516.9120 RF-SCM/Magpie 50.0440 8.6271 112.2660 1538.6073 Dummy 67.2851 10.1832 126.8446 1491.7993","title":"Leaderboard"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_jdft2d/#dataset-info","text":"","title":"Dataset info"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_jdft2d/#description","text":"Matbench v0.1 test dataset for predicting exfoliation energies from crystal structure (computed with the OptB88vdW and TBmBJ functionals). Adapted from the JARVIS DFT database. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 636 Task type: regression Input type: structure","title":"Description"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_jdft2d/#dataset-columns","text":"exfoliation_en: Target variable. Exfoliation energy (meV/atom). structure: Pymatgen Structure of the material.","title":"Dataset columns"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_jdft2d/#dataset-reference","text":"2D Dataset discussed in: High-throughput Identification and Characterization of Two dimensional Materials using Density functional theory Kamal Choudhary, Irina Kalish, Ryan Beams & Francesca Tavazza Scientific Reports volume 7, Article number: 5179 (2017) Original 2D Data file sourced from: choudhary, kamal; https://orcid.org/0000-0001-9737-8074 (2018): jdft_2d-7-7-2018.json. figshare. Dataset.","title":"Dataset reference"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_jdft2d/#metadata","text":"{'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@Article{Choudhary2017,\\n' 'author={Choudhary, Kamal\\n' 'and Kalish, Irina\\n' 'and Beams, Ryan\\n' 'and Tavazza, Francesca},\\n' 'title={High-throughput Identification and Characterization ' 'of Two-dimensional Materials using Density functional ' 'theory},\\n' 'journal={Scientific Reports},\\n' 'year={2017},\\n' 'volume={7},\\n' 'number={1},\\n' 'pages={5179},\\n' 'abstract={We introduce a simple criterion to identify ' 'two-dimensional (2D) materials based on the comparison ' 'between experimental lattice constants and lattice constants ' 'mainly obtained from Materials-Project (MP) density ' 'functional theory (DFT) calculation repository. ' 'Specifically, if the relative difference between the two ' 'lattice constants for a specific material is greater than or ' 'equal to 5%, we predict them to be good candidates for 2D ' 'materials. We have predicted at least 1356 such 2D ' 'materials. For all the systems satisfying our criterion, we ' 'manually create single layer systems and calculate their ' 'energetics, structural, electronic, and elastic properties ' 'for both the bulk and the single layer cases. Currently the ' 'database consists of 1012 bulk and 430 single layer ' 'materials, of which 371 systems are common to bulk and ' 'single layer. The rest of calculations are underway. To ' 'validate our criterion, we calculated the exfoliation energy ' 'of the suggested layered materials, and we found that in ' '88.9% of the cases the currently accepted criterion for ' 'exfoliation was satisfied. Also, using molybdenum telluride ' 'as a test case, we performed X-ray diffraction and Raman ' 'scattering experiments to benchmark our calculations and ' 'understand their applicability and limitations. The data is ' 'publicly available at the website ' 'http://www.ctcms.nist.gov/{\\t' 'extasciitilde}knc6/JVASP.html.},\\n' 'issn={2045-2322},\\n' 'doi={10.1038/s41598-017-05402-0},\\n' 'url={https://doi.org/10.1038/s41598-017-05402-0}\\n' '}', '@misc{choudhary__2018, title={jdft_2d-7-7-2018.json}, ' 'url={https://figshare.com/articles/jdft_2d-7-7-2018_json/6815705/1}, ' 'DOI={10.6084/m9.figshare.6815705.v1}, abstractNote={2D ' 'materials}, publisher={figshare}, author={choudhary, kamal ' 'and https://orcid.org/0000-0001-9737-8074}, year={2018}, ' 'month={Jul}}'], 'columns': {'exfoliation_en': 'Target variable. Exfoliation energy ' '(meV/atom).', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting exfoliation ' 'energies from crystal structure (computed with the OptB88vdW ' 'and TBmBJ functionals). Adapted from the JARVIS DFT database. ' 'For benchmarking w/ nested cross validation, the order of the ' 'dataset must be identical to the retrieved data; refer to the ' 'Automatminer/Matbench publication for more details.', 'file_type': 'json.gz', 'hash': '26057dc4524e193e32abffb296ce819b58b6e11d1278cae329a2f97817a4eddf', 'input_type': 'structure', 'mad': 67.20200406491116, 'n_samples': 636, 'num_entries': 636, 'reference': '2D Dataset discussed in:\\n' 'High-throughput Identification and Characterization of Two ' 'dimensional Materials using Density functional theory Kamal ' 'Choudhary, Irina Kalish, Ryan Beams & Francesca Tavazza ' 'Scientific Reports volume 7, Article number: 5179 (2017)\\n' 'Original 2D Data file sourced from:\\n' 'choudhary, kamal; https://orcid.org/0000-0001-9737-8074 (2018): ' 'jdft_2d-7-7-2018.json. figshare. Dataset.', 'target': 'exfoliation_en', 'task_type': 'regression', 'unit': 'meV/atom', 'url': 'https://ml.materialsproject.org/projects/matbench_jdft2d.json.gz'}","title":"Metadata"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_gvrh/","text":"matbench_v0.1 matbench_log_gvrh Individual Task Leaderboard for matbench_log_gvrh Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark. Leaderboard algorithm mean mae std mae mean rmse max max_error MODNet (v0.1.10) 0.0731 0.0007 0.1103 1.1745 AMMExpress v2020 0.0874 0.0020 0.1277 1.1580 CGCNN v2019 0.0895 0.0016 0.1337 1.4520 CrabNet 0.1014 0.0017 0.1604 2.4220 RF-SCM/Magpie 0.1040 0.0016 0.1540 1.6942 Dummy 0.2931 0.0031 0.3716 1.5552 Dataset info Description Matbench v0.1 test dataset for predicting DFT log10 VRH-average shear modulus from structure. Adapted from Materials Project database. Removed entries having a formation energy (or energy above the convex hull) more than 150meV and those having negative G_Voigt, G_Reuss, G_VRH, K_Voigt, K_Reuss, or K_VRH and those failing G_Reuss <= G_VRH <= G_Voigt or K_Reuss <= K_VRH <= K_Voigt and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 10987 Task type: regression Input type: structure Dataset columns log10(G_VRH): Target variable. Base 10 logarithm of the DFT Voigt-Reuss-Hill average shear moduli in GPa structure: Pymatgen Structure of the material. Dataset reference Jong, M. De, Chen, W., Angsten, T., Jain, A., Notestine, R., Gamst, A., Sluiter, M., Ande, C. K., Zwaag, S. Van Der, Plata, J. J., Toher, C., Curtarolo, S., Ceder, G., Persson, K. and Asta, M., \"Charting the complete elastic properties of inorganic crystalline compounds\", Scientific Data volume 2, Article number: 150009 (2015) Metadata {'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@Article{deJong2015,\\n' 'author={de Jong, Maarten and Chen, Wei and Angsten, Thomas\\n' 'and Jain, Anubhav and Notestine, Randy and Gamst, Anthony\\n' 'and Sluiter, Marcel and Krishna Ande, Chaitanya\\n' 'and van der Zwaag, Sybrand and Plata, Jose J. and Toher, ' 'Cormac\\n' 'and Curtarolo, Stefano and Ceder, Gerbrand and Persson, ' 'Kristin A.\\n' 'and Asta, Mark},\\n' 'title={Charting the complete elastic properties\\n' 'of inorganic crystalline compounds},\\n' 'journal={Scientific Data},\\n' 'year={2015},\\n' 'month={Mar},\\n' 'day={17},\\n' 'publisher={The Author(s)},\\n' 'volume={2},\\n' 'pages={150009},\\n' 'note={Data Descriptor},\\n' 'url={http://dx.doi.org/10.1038/sdata.2015.9}\\n' '}'], 'columns': {'log10(G_VRH)': 'Target variable. Base 10 logarithm of the DFT ' 'Voigt-Reuss-Hill average shear moduli in GPa', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting DFT log10 ' 'VRH-average shear modulus from structure. Adapted from ' 'Materials Project database. Removed entries having a ' 'formation energy (or energy above the convex hull) more than ' '150meV and those having negative G_Voigt, G_Reuss, G_VRH, ' 'K_Voigt, K_Reuss, or K_VRH and those failing G_Reuss <= G_VRH ' '<= G_Voigt or K_Reuss <= K_VRH <= K_Voigt and those ' 'containing noble gases. Retrieved April 2, 2019. For ' 'benchmarking w/ nested cross validation, the order of the ' 'dataset must be identical to the retrieved data; refer to the ' 'Automatminer/Matbench publication for more details.', 'file_type': 'json.gz', 'hash': '098af941f4c663270f1fe21abf20ffad6fb85ecbfcba5786ceac03983ac29da7', 'input_type': 'structure', 'mad': 0.29313828328604646, 'n_samples': 10987, 'num_entries': 10987, 'reference': 'Jong, M. De, Chen, W., Angsten, T., Jain, A., Notestine, R., ' 'Gamst,\\n' 'A., Sluiter, M., Ande, C. K., Zwaag, S. Van Der, Plata, J. J., ' 'Toher,\\n' 'C., Curtarolo, S., Ceder, G., Persson, K. and Asta, M., ' '\"Charting\\n' 'the complete elastic properties of inorganic crystalline ' 'compounds\",\\n' 'Scientific Data volume 2, Article number: 150009 (2015)', 'target': 'log10(G_VRH)', 'task_type': 'regression', 'unit': 'log10(GPa)', 'url': 'https://ml.materialsproject.org/projects/matbench_log_gvrh.json.gz'}","title":"matbench_v0.1 matbench_log_gvrh"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_gvrh/#matbench_v01-matbench_log_gvrh","text":"","title":"matbench_v0.1 matbench_log_gvrh"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_gvrh/#individual-task-leaderboard-for-matbench_log_gvrh","text":"Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark.","title":"Individual Task Leaderboard for matbench_log_gvrh"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_gvrh/#leaderboard","text":"algorithm mean mae std mae mean rmse max max_error MODNet (v0.1.10) 0.0731 0.0007 0.1103 1.1745 AMMExpress v2020 0.0874 0.0020 0.1277 1.1580 CGCNN v2019 0.0895 0.0016 0.1337 1.4520 CrabNet 0.1014 0.0017 0.1604 2.4220 RF-SCM/Magpie 0.1040 0.0016 0.1540 1.6942 Dummy 0.2931 0.0031 0.3716 1.5552","title":"Leaderboard"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_gvrh/#dataset-info","text":"","title":"Dataset info"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_gvrh/#description","text":"Matbench v0.1 test dataset for predicting DFT log10 VRH-average shear modulus from structure. Adapted from Materials Project database. Removed entries having a formation energy (or energy above the convex hull) more than 150meV and those having negative G_Voigt, G_Reuss, G_VRH, K_Voigt, K_Reuss, or K_VRH and those failing G_Reuss <= G_VRH <= G_Voigt or K_Reuss <= K_VRH <= K_Voigt and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 10987 Task type: regression Input type: structure","title":"Description"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_gvrh/#dataset-columns","text":"log10(G_VRH): Target variable. Base 10 logarithm of the DFT Voigt-Reuss-Hill average shear moduli in GPa structure: Pymatgen Structure of the material.","title":"Dataset columns"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_gvrh/#dataset-reference","text":"Jong, M. De, Chen, W., Angsten, T., Jain, A., Notestine, R., Gamst, A., Sluiter, M., Ande, C. K., Zwaag, S. Van Der, Plata, J. J., Toher, C., Curtarolo, S., Ceder, G., Persson, K. and Asta, M., \"Charting the complete elastic properties of inorganic crystalline compounds\", Scientific Data volume 2, Article number: 150009 (2015)","title":"Dataset reference"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_gvrh/#metadata","text":"{'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@Article{deJong2015,\\n' 'author={de Jong, Maarten and Chen, Wei and Angsten, Thomas\\n' 'and Jain, Anubhav and Notestine, Randy and Gamst, Anthony\\n' 'and Sluiter, Marcel and Krishna Ande, Chaitanya\\n' 'and van der Zwaag, Sybrand and Plata, Jose J. and Toher, ' 'Cormac\\n' 'and Curtarolo, Stefano and Ceder, Gerbrand and Persson, ' 'Kristin A.\\n' 'and Asta, Mark},\\n' 'title={Charting the complete elastic properties\\n' 'of inorganic crystalline compounds},\\n' 'journal={Scientific Data},\\n' 'year={2015},\\n' 'month={Mar},\\n' 'day={17},\\n' 'publisher={The Author(s)},\\n' 'volume={2},\\n' 'pages={150009},\\n' 'note={Data Descriptor},\\n' 'url={http://dx.doi.org/10.1038/sdata.2015.9}\\n' '}'], 'columns': {'log10(G_VRH)': 'Target variable. Base 10 logarithm of the DFT ' 'Voigt-Reuss-Hill average shear moduli in GPa', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting DFT log10 ' 'VRH-average shear modulus from structure. Adapted from ' 'Materials Project database. Removed entries having a ' 'formation energy (or energy above the convex hull) more than ' '150meV and those having negative G_Voigt, G_Reuss, G_VRH, ' 'K_Voigt, K_Reuss, or K_VRH and those failing G_Reuss <= G_VRH ' '<= G_Voigt or K_Reuss <= K_VRH <= K_Voigt and those ' 'containing noble gases. Retrieved April 2, 2019. For ' 'benchmarking w/ nested cross validation, the order of the ' 'dataset must be identical to the retrieved data; refer to the ' 'Automatminer/Matbench publication for more details.', 'file_type': 'json.gz', 'hash': '098af941f4c663270f1fe21abf20ffad6fb85ecbfcba5786ceac03983ac29da7', 'input_type': 'structure', 'mad': 0.29313828328604646, 'n_samples': 10987, 'num_entries': 10987, 'reference': 'Jong, M. De, Chen, W., Angsten, T., Jain, A., Notestine, R., ' 'Gamst,\\n' 'A., Sluiter, M., Ande, C. K., Zwaag, S. Van Der, Plata, J. J., ' 'Toher,\\n' 'C., Curtarolo, S., Ceder, G., Persson, K. and Asta, M., ' '\"Charting\\n' 'the complete elastic properties of inorganic crystalline ' 'compounds\",\\n' 'Scientific Data volume 2, Article number: 150009 (2015)', 'target': 'log10(G_VRH)', 'task_type': 'regression', 'unit': 'log10(GPa)', 'url': 'https://ml.materialsproject.org/projects/matbench_log_gvrh.json.gz'}","title":"Metadata"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_kvrh/","text":"matbench_v0.1 matbench_log_kvrh Individual Task Leaderboard for matbench_log_kvrh Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark. Leaderboard algorithm mean mae std mae mean rmse max max_error MODNet (v0.1.10) 0.0548 0.0025 0.1043 1.5366 AMMExpress v2020 0.0647 0.0015 0.1183 1.4823 CGCNN v2019 0.0712 0.0028 0.1301 1.7725 CrabNet 0.0758 0.0034 0.1471 1.8430 RF-SCM/Magpie 0.0820 0.0027 0.1454 1.7642 Dummy 0.2897 0.0043 0.3693 1.8822 Dataset info Description Matbench v0.1 test dataset for predicting DFT log10 VRH-average bulk modulus from structure. Adapted from Materials Project database. Removed entries having a formation energy (or energy above the convex hull) more than 150meV and those having negative G_Voigt, G_Reuss, G_VRH, K_Voigt, K_Reuss, or K_VRH and those failing G_Reuss <= G_VRH <= G_Voigt or K_Reuss <= K_VRH <= K_Voigt and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 10987 Task type: regression Input type: structure Dataset columns log10(K_VRH): Target variable. Base 10 logarithm of the DFT Voigt-Reuss-Hill average bulk moduli in GPa. structure: Pymatgen Structure of the material. Dataset reference Jong, M. De, Chen, W., Angsten, T., Jain, A., Notestine, R., Gamst, A., Sluiter, M., Ande, C. K., Zwaag, S. Van Der, Plata, J. J., Toher, C., Curtarolo, S., Ceder, G., Persson, K. and Asta, M., \"Charting the complete elastic properties of inorganic crystalline compounds\", Scientific Data volume 2, Article number: 150009 (2015) Metadata {'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@Article{deJong2015,\\n' 'author={de Jong, Maarten and Chen, Wei and Angsten, Thomas\\n' 'and Jain, Anubhav and Notestine, Randy and Gamst, Anthony\\n' 'and Sluiter, Marcel and Krishna Ande, Chaitanya\\n' 'and van der Zwaag, Sybrand and Plata, Jose J. and Toher, ' 'Cormac\\n' 'and Curtarolo, Stefano and Ceder, Gerbrand and Persson, ' 'Kristin A.\\n' 'and Asta, Mark},\\n' 'title={Charting the complete elastic properties\\n' 'of inorganic crystalline compounds},\\n' 'journal={Scientific Data},\\n' 'year={2015},\\n' 'month={Mar},\\n' 'day={17},\\n' 'publisher={The Author(s)},\\n' 'volume={2},\\n' 'pages={150009},\\n' 'note={Data Descriptor},\\n' 'url={http://dx.doi.org/10.1038/sdata.2015.9}\\n' '}'], 'columns': {'log10(K_VRH)': 'Target variable. Base 10 logarithm of the DFT ' 'Voigt-Reuss-Hill average bulk moduli in GPa.', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting DFT log10 ' 'VRH-average bulk modulus from structure. Adapted from ' 'Materials Project database. Removed entries having a ' 'formation energy (or energy above the convex hull) more than ' '150meV and those having negative G_Voigt, G_Reuss, G_VRH, ' 'K_Voigt, K_Reuss, or K_VRH and those failing G_Reuss <= G_VRH ' '<= G_Voigt or K_Reuss <= K_VRH <= K_Voigt and those ' 'containing noble gases. Retrieved April 2, 2019. For ' 'benchmarking w/ nested cross validation, the order of the ' 'dataset must be identical to the retrieved data; refer to the ' 'Automatminer/Matbench publication for more details.', 'file_type': 'json.gz', 'hash': '44b113ddb7e23aa18731a62c74afa7e5aa654199e0db5f951c8248a00955c9cd', 'input_type': 'structure', 'mad': 0.2896736342937069, 'n_samples': 10987, 'num_entries': 10987, 'reference': 'Jong, M. De, Chen, W., Angsten, T., Jain, A., Notestine, R., ' 'Gamst,\\n' 'A., Sluiter, M., Ande, C. K., Zwaag, S. Van Der, Plata, J. J., ' 'Toher,\\n' 'C., Curtarolo, S., Ceder, G., Persson, K. and Asta, M., ' '\"Charting\\n' 'the complete elastic properties of inorganic crystalline ' 'compounds\",\\n' 'Scientific Data volume 2, Article number: 150009 (2015)', 'target': 'log10(K_VRH)', 'task_type': 'regression', 'unit': 'log10(GPa)', 'url': 'https://ml.materialsproject.org/projects/matbench_log_kvrh.json.gz'}","title":"matbench_v0.1 matbench_log_kvrh"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_kvrh/#matbench_v01-matbench_log_kvrh","text":"","title":"matbench_v0.1 matbench_log_kvrh"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_kvrh/#individual-task-leaderboard-for-matbench_log_kvrh","text":"Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark.","title":"Individual Task Leaderboard for matbench_log_kvrh"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_kvrh/#leaderboard","text":"algorithm mean mae std mae mean rmse max max_error MODNet (v0.1.10) 0.0548 0.0025 0.1043 1.5366 AMMExpress v2020 0.0647 0.0015 0.1183 1.4823 CGCNN v2019 0.0712 0.0028 0.1301 1.7725 CrabNet 0.0758 0.0034 0.1471 1.8430 RF-SCM/Magpie 0.0820 0.0027 0.1454 1.7642 Dummy 0.2897 0.0043 0.3693 1.8822","title":"Leaderboard"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_kvrh/#dataset-info","text":"","title":"Dataset info"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_kvrh/#description","text":"Matbench v0.1 test dataset for predicting DFT log10 VRH-average bulk modulus from structure. Adapted from Materials Project database. Removed entries having a formation energy (or energy above the convex hull) more than 150meV and those having negative G_Voigt, G_Reuss, G_VRH, K_Voigt, K_Reuss, or K_VRH and those failing G_Reuss <= G_VRH <= G_Voigt or K_Reuss <= K_VRH <= K_Voigt and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 10987 Task type: regression Input type: structure","title":"Description"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_kvrh/#dataset-columns","text":"log10(K_VRH): Target variable. Base 10 logarithm of the DFT Voigt-Reuss-Hill average bulk moduli in GPa. structure: Pymatgen Structure of the material.","title":"Dataset columns"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_kvrh/#dataset-reference","text":"Jong, M. De, Chen, W., Angsten, T., Jain, A., Notestine, R., Gamst, A., Sluiter, M., Ande, C. K., Zwaag, S. Van Der, Plata, J. J., Toher, C., Curtarolo, S., Ceder, G., Persson, K. and Asta, M., \"Charting the complete elastic properties of inorganic crystalline compounds\", Scientific Data volume 2, Article number: 150009 (2015)","title":"Dataset reference"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_log_kvrh/#metadata","text":"{'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@Article{deJong2015,\\n' 'author={de Jong, Maarten and Chen, Wei and Angsten, Thomas\\n' 'and Jain, Anubhav and Notestine, Randy and Gamst, Anthony\\n' 'and Sluiter, Marcel and Krishna Ande, Chaitanya\\n' 'and van der Zwaag, Sybrand and Plata, Jose J. and Toher, ' 'Cormac\\n' 'and Curtarolo, Stefano and Ceder, Gerbrand and Persson, ' 'Kristin A.\\n' 'and Asta, Mark},\\n' 'title={Charting the complete elastic properties\\n' 'of inorganic crystalline compounds},\\n' 'journal={Scientific Data},\\n' 'year={2015},\\n' 'month={Mar},\\n' 'day={17},\\n' 'publisher={The Author(s)},\\n' 'volume={2},\\n' 'pages={150009},\\n' 'note={Data Descriptor},\\n' 'url={http://dx.doi.org/10.1038/sdata.2015.9}\\n' '}'], 'columns': {'log10(K_VRH)': 'Target variable. Base 10 logarithm of the DFT ' 'Voigt-Reuss-Hill average bulk moduli in GPa.', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting DFT log10 ' 'VRH-average bulk modulus from structure. Adapted from ' 'Materials Project database. Removed entries having a ' 'formation energy (or energy above the convex hull) more than ' '150meV and those having negative G_Voigt, G_Reuss, G_VRH, ' 'K_Voigt, K_Reuss, or K_VRH and those failing G_Reuss <= G_VRH ' '<= G_Voigt or K_Reuss <= K_VRH <= K_Voigt and those ' 'containing noble gases. Retrieved April 2, 2019. For ' 'benchmarking w/ nested cross validation, the order of the ' 'dataset must be identical to the retrieved data; refer to the ' 'Automatminer/Matbench publication for more details.', 'file_type': 'json.gz', 'hash': '44b113ddb7e23aa18731a62c74afa7e5aa654199e0db5f951c8248a00955c9cd', 'input_type': 'structure', 'mad': 0.2896736342937069, 'n_samples': 10987, 'num_entries': 10987, 'reference': 'Jong, M. De, Chen, W., Angsten, T., Jain, A., Notestine, R., ' 'Gamst,\\n' 'A., Sluiter, M., Ande, C. K., Zwaag, S. Van Der, Plata, J. J., ' 'Toher,\\n' 'C., Curtarolo, S., Ceder, G., Persson, K. and Asta, M., ' '\"Charting\\n' 'the complete elastic properties of inorganic crystalline ' 'compounds\",\\n' 'Scientific Data volume 2, Article number: 150009 (2015)', 'target': 'log10(K_VRH)', 'task_type': 'regression', 'unit': 'log10(GPa)', 'url': 'https://ml.materialsproject.org/projects/matbench_log_kvrh.json.gz'}","title":"Metadata"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_e_form/","text":"matbench_v0.1 matbench_mp_e_form Individual Task Leaderboard for matbench_mp_e_form Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark. Leaderboard algorithm mean mae std mae mean rmse max max_error CGCNN v2019 0.0337 0.0006 0.0682 7.7205 CrabNet 0.0862 0.0010 0.2544 6.3774 RF-SCM/Magpie 0.1165 0.0008 0.2419 5.4382 AMMExpress v2020 0.1726 0.0270 0.2602 5.8108 Dummy 1.0059 0.0030 1.1631 3.9096 Dataset info Description Matbench v0.1 test dataset for predicting DFT formation energy from structure. Adapted from Materials Project database. Removed entries having formation energy more than 2.5eV and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 132752 Task type: regression Input type: structure Dataset columns e_form: Target variable. Formation energy in eV as calculated by the Materials Project. structure: Pymatgen Structure of the material. Dataset reference A. Jain*, S.P. Ong*, G. Hautier, W. Chen, W.D. Richards, S. Dacek, S. Cholia, D. Gunter, D. Skinner, G. Ceder, K.A. Persson (*=equal contributions) The Materials Project: A materials genome approach to accelerating materials innovation APL Materials, 2013, 1(1), 011002. doi:10.1063/1.4812323 Metadata {'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@article{Jain2013,\\n' 'author = {Jain, Anubhav and Ong, Shyue Ping and Hautier, ' 'Geoffroy and Chen, Wei and Richards, William Davidson and ' 'Dacek, Stephen and Cholia, Shreyas and Gunter, Dan and ' 'Skinner, David and Ceder, Gerbrand and Persson, Kristin ' 'a.},\\n' 'doi = {10.1063/1.4812323},\\n' 'issn = {2166532X},\\n' 'journal = {APL Materials},\\n' 'number = {1},\\n' 'pages = {011002},\\n' 'title = {{The Materials Project: A materials genome approach ' 'to accelerating materials innovation}},\\n' 'url = ' '{http://link.aip.org/link/AMPADS/v1/i1/p011002/s1\\\\&Agg=doi},\\n' 'volume = {1},\\n' 'year = {2013}\\n' '}'], 'columns': {'e_form': 'Target variable. Formation energy in eV as calculated ' 'by the Materials Project.', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting DFT formation ' 'energy from structure. Adapted from Materials Project ' 'database. Removed entries having formation energy more than ' '2.5eV and those containing noble gases. Retrieved April 2, ' '2019. For benchmarking w/ nested cross validation, the order ' 'of the dataset must be identical to the retrieved data; refer ' 'to the Automatminer/Matbench publication for more details.', 'file_type': 'json.gz', 'hash': 'dedcb1d4ba2e3e50dbdd45ba5bc647a00e9c2bcf8f8bf556dc8e92caa39eb21f', 'input_type': 'structure', 'mad': 1.0059220443295362, 'n_samples': 132752, 'num_entries': 132752, 'reference': 'A. Jain*, S.P. Ong*, G. Hautier, W. Chen, W.D. Richards, S. ' 'Dacek, S. Cholia, D. Gunter, D. Skinner, G. Ceder, K.A. Persson ' '(*=equal contributions)\\n' 'The Materials Project: A materials genome approach to ' 'accelerating materials innovation\\n' 'APL Materials, 2013, 1(1), 011002.\\n' 'doi:10.1063/1.4812323', 'target': 'e_form', 'task_type': 'regression', 'unit': 'eV/atom', 'url': 'https://ml.materialsproject.org/projects/matbench_mp_e_form.json.gz'}","title":"matbench_v0.1 matbench_mp_e_form"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_e_form/#matbench_v01-matbench_mp_e_form","text":"","title":"matbench_v0.1 matbench_mp_e_form"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_e_form/#individual-task-leaderboard-for-matbench_mp_e_form","text":"Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark.","title":"Individual Task Leaderboard for matbench_mp_e_form"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_e_form/#leaderboard","text":"algorithm mean mae std mae mean rmse max max_error CGCNN v2019 0.0337 0.0006 0.0682 7.7205 CrabNet 0.0862 0.0010 0.2544 6.3774 RF-SCM/Magpie 0.1165 0.0008 0.2419 5.4382 AMMExpress v2020 0.1726 0.0270 0.2602 5.8108 Dummy 1.0059 0.0030 1.1631 3.9096","title":"Leaderboard"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_e_form/#dataset-info","text":"","title":"Dataset info"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_e_form/#description","text":"Matbench v0.1 test dataset for predicting DFT formation energy from structure. Adapted from Materials Project database. Removed entries having formation energy more than 2.5eV and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 132752 Task type: regression Input type: structure","title":"Description"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_e_form/#dataset-columns","text":"e_form: Target variable. Formation energy in eV as calculated by the Materials Project. structure: Pymatgen Structure of the material.","title":"Dataset columns"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_e_form/#dataset-reference","text":"A. Jain*, S.P. Ong*, G. Hautier, W. Chen, W.D. Richards, S. Dacek, S. Cholia, D. Gunter, D. Skinner, G. Ceder, K.A. Persson (*=equal contributions) The Materials Project: A materials genome approach to accelerating materials innovation APL Materials, 2013, 1(1), 011002. doi:10.1063/1.4812323","title":"Dataset reference"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_e_form/#metadata","text":"{'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@article{Jain2013,\\n' 'author = {Jain, Anubhav and Ong, Shyue Ping and Hautier, ' 'Geoffroy and Chen, Wei and Richards, William Davidson and ' 'Dacek, Stephen and Cholia, Shreyas and Gunter, Dan and ' 'Skinner, David and Ceder, Gerbrand and Persson, Kristin ' 'a.},\\n' 'doi = {10.1063/1.4812323},\\n' 'issn = {2166532X},\\n' 'journal = {APL Materials},\\n' 'number = {1},\\n' 'pages = {011002},\\n' 'title = {{The Materials Project: A materials genome approach ' 'to accelerating materials innovation}},\\n' 'url = ' '{http://link.aip.org/link/AMPADS/v1/i1/p011002/s1\\\\&Agg=doi},\\n' 'volume = {1},\\n' 'year = {2013}\\n' '}'], 'columns': {'e_form': 'Target variable. Formation energy in eV as calculated ' 'by the Materials Project.', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting DFT formation ' 'energy from structure. Adapted from Materials Project ' 'database. Removed entries having formation energy more than ' '2.5eV and those containing noble gases. Retrieved April 2, ' '2019. For benchmarking w/ nested cross validation, the order ' 'of the dataset must be identical to the retrieved data; refer ' 'to the Automatminer/Matbench publication for more details.', 'file_type': 'json.gz', 'hash': 'dedcb1d4ba2e3e50dbdd45ba5bc647a00e9c2bcf8f8bf556dc8e92caa39eb21f', 'input_type': 'structure', 'mad': 1.0059220443295362, 'n_samples': 132752, 'num_entries': 132752, 'reference': 'A. Jain*, S.P. Ong*, G. Hautier, W. Chen, W.D. Richards, S. ' 'Dacek, S. Cholia, D. Gunter, D. Skinner, G. Ceder, K.A. Persson ' '(*=equal contributions)\\n' 'The Materials Project: A materials genome approach to ' 'accelerating materials innovation\\n' 'APL Materials, 2013, 1(1), 011002.\\n' 'doi:10.1063/1.4812323', 'target': 'e_form', 'task_type': 'regression', 'unit': 'eV/atom', 'url': 'https://ml.materialsproject.org/projects/matbench_mp_e_form.json.gz'}","title":"Metadata"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_gap/","text":"matbench_v0.1 matbench_mp_gap Individual Task Leaderboard for matbench_mp_gap Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark. Leaderboard algorithm mean mae std mae mean rmse max max_error CrabNet 0.2655 0.0029 0.5898 7.9829 AMMExpress v2020 0.2824 0.0061 0.5611 6.9105 CGCNN v2019 0.2972 0.0035 0.6771 13.6569 RF-SCM/Magpie 0.3452 0.0033 0.6125 7.0601 Dummy 1.3272 0.0060 1.5989 8.5092 Dataset info Description Matbench v0.1 test dataset for predicting DFT PBE band gap from structure. Adapted from Materials Project database. Removed entries having a formation energy (or energy above the convex hull) more than 150meV and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 106113 Task type: regression Input type: structure Dataset columns gap pbe: Target variable. The band gap as calculated by PBE DFT from the Materials Project, in eV. structure: Pymatgen Structure of the material. Dataset reference A. Jain*, S.P. Ong*, G. Hautier, W. Chen, W.D. Richards, S. Dacek, S. Cholia, D. Gunter, D. Skinner, G. Ceder, K.A. Persson (*=equal contributions) The Materials Project: A materials genome approach to accelerating materials innovation APL Materials, 2013, 1(1), 011002. doi:10.1063/1.4812323 Metadata {'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@article{Jain2013,\\n' 'author = {Jain, Anubhav and Ong, Shyue Ping and Hautier, ' 'Geoffroy and Chen, Wei and Richards, William Davidson and ' 'Dacek, Stephen and Cholia, Shreyas and Gunter, Dan and ' 'Skinner, David and Ceder, Gerbrand and Persson, Kristin ' 'a.},\\n' 'doi = {10.1063/1.4812323},\\n' 'issn = {2166532X},\\n' 'journal = {APL Materials},\\n' 'number = {1},\\n' 'pages = {011002},\\n' 'title = {{The Materials Project: A materials genome approach ' 'to accelerating materials innovation}},\\n' 'url = ' '{http://link.aip.org/link/AMPADS/v1/i1/p011002/s1\\\\&Agg=doi},\\n' 'volume = {1},\\n' 'year = {2013}\\n' '}'], 'columns': {'gap pbe': 'Target variable. The band gap as calculated by PBE ' 'DFT from the Materials Project, in eV.', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting DFT PBE band gap ' 'from structure. Adapted from Materials Project database. ' 'Removed entries having a formation energy (or energy above ' 'the convex hull) more than 150meV and those containing noble ' 'gases. Retrieved April 2, 2019. For benchmarking w/ nested ' 'cross validation, the order of the dataset must be identical ' 'to the retrieved data; refer to the Automatminer/Matbench ' 'publication for more details.', 'file_type': 'json.gz', 'hash': '58b65746bd88329986ed66031a2ac1369c7c522f7bc9f9081528e07097c2c057', 'input_type': 'structure', 'mad': 1.3271449960162496, 'n_samples': 106113, 'num_entries': 106113, 'reference': 'A. Jain*, S.P. Ong*, G. Hautier, W. Chen, W.D. Richards, S. ' 'Dacek, S. Cholia, D. Gunter, D. Skinner, G. Ceder, K.A. Persson ' '(*=equal contributions)\\n' 'The Materials Project: A materials genome approach to ' 'accelerating materials innovation\\n' 'APL Materials, 2013, 1(1), 011002.\\n' 'doi:10.1063/1.4812323', 'target': 'gap pbe', 'task_type': 'regression', 'unit': 'eV', 'url': 'https://ml.materialsproject.org/projects/matbench_mp_gap.json.gz'}","title":"matbench_v0.1 matbench_mp_gap"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_gap/#matbench_v01-matbench_mp_gap","text":"","title":"matbench_v0.1 matbench_mp_gap"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_gap/#individual-task-leaderboard-for-matbench_mp_gap","text":"Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark.","title":"Individual Task Leaderboard for matbench_mp_gap"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_gap/#leaderboard","text":"algorithm mean mae std mae mean rmse max max_error CrabNet 0.2655 0.0029 0.5898 7.9829 AMMExpress v2020 0.2824 0.0061 0.5611 6.9105 CGCNN v2019 0.2972 0.0035 0.6771 13.6569 RF-SCM/Magpie 0.3452 0.0033 0.6125 7.0601 Dummy 1.3272 0.0060 1.5989 8.5092","title":"Leaderboard"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_gap/#dataset-info","text":"","title":"Dataset info"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_gap/#description","text":"Matbench v0.1 test dataset for predicting DFT PBE band gap from structure. Adapted from Materials Project database. Removed entries having a formation energy (or energy above the convex hull) more than 150meV and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 106113 Task type: regression Input type: structure","title":"Description"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_gap/#dataset-columns","text":"gap pbe: Target variable. The band gap as calculated by PBE DFT from the Materials Project, in eV. structure: Pymatgen Structure of the material.","title":"Dataset columns"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_gap/#dataset-reference","text":"A. Jain*, S.P. Ong*, G. Hautier, W. Chen, W.D. Richards, S. Dacek, S. Cholia, D. Gunter, D. Skinner, G. Ceder, K.A. Persson (*=equal contributions) The Materials Project: A materials genome approach to accelerating materials innovation APL Materials, 2013, 1(1), 011002. doi:10.1063/1.4812323","title":"Dataset reference"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_gap/#metadata","text":"{'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@article{Jain2013,\\n' 'author = {Jain, Anubhav and Ong, Shyue Ping and Hautier, ' 'Geoffroy and Chen, Wei and Richards, William Davidson and ' 'Dacek, Stephen and Cholia, Shreyas and Gunter, Dan and ' 'Skinner, David and Ceder, Gerbrand and Persson, Kristin ' 'a.},\\n' 'doi = {10.1063/1.4812323},\\n' 'issn = {2166532X},\\n' 'journal = {APL Materials},\\n' 'number = {1},\\n' 'pages = {011002},\\n' 'title = {{The Materials Project: A materials genome approach ' 'to accelerating materials innovation}},\\n' 'url = ' '{http://link.aip.org/link/AMPADS/v1/i1/p011002/s1\\\\&Agg=doi},\\n' 'volume = {1},\\n' 'year = {2013}\\n' '}'], 'columns': {'gap pbe': 'Target variable. The band gap as calculated by PBE ' 'DFT from the Materials Project, in eV.', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting DFT PBE band gap ' 'from structure. Adapted from Materials Project database. ' 'Removed entries having a formation energy (or energy above ' 'the convex hull) more than 150meV and those containing noble ' 'gases. Retrieved April 2, 2019. For benchmarking w/ nested ' 'cross validation, the order of the dataset must be identical ' 'to the retrieved data; refer to the Automatminer/Matbench ' 'publication for more details.', 'file_type': 'json.gz', 'hash': '58b65746bd88329986ed66031a2ac1369c7c522f7bc9f9081528e07097c2c057', 'input_type': 'structure', 'mad': 1.3271449960162496, 'n_samples': 106113, 'num_entries': 106113, 'reference': 'A. Jain*, S.P. Ong*, G. Hautier, W. Chen, W.D. Richards, S. ' 'Dacek, S. Cholia, D. Gunter, D. Skinner, G. Ceder, K.A. Persson ' '(*=equal contributions)\\n' 'The Materials Project: A materials genome approach to ' 'accelerating materials innovation\\n' 'APL Materials, 2013, 1(1), 011002.\\n' 'doi:10.1063/1.4812323', 'target': 'gap pbe', 'task_type': 'regression', 'unit': 'eV', 'url': 'https://ml.materialsproject.org/projects/matbench_mp_gap.json.gz'}","title":"Metadata"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_is_metal/","text":"matbench_v0.1 matbench_mp_is_metal Individual Task Leaderboard for matbench_mp_is_metal Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark. Leaderboard algorithm mean rocauc std rocauc mean f1 mean balanced_accuracy CGCNN v2019 0.9520 0.0074 0.9462 0.9520 AMMExpress v2020 0.9093 0.0008 0.8981 0.9093 RF-SCM/Magpie 0.8992 0.0019 0.8866 0.8992 Dummy 0.5012 0.0043 0.4353 0.5012 Dataset info Description Matbench v0.1 test dataset for predicting DFT metallicity from structure. Adapted from Materials Project database. Removed entries having a formation energy (or energy above the convex hull) more than 150meV and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 106113 Task type: classification Input type: structure Dataset columns is_metal: Target variable. 1 if the compound is a metal, 0 if the compound is not a metal. Metallicity determined with pymatgen structure: Pymatgen Structure of the material. Dataset reference A. Jain*, S.P. Ong*, G. Hautier, W. Chen, W.D. Richards, S. Dacek, S. Cholia, D. Gunter, D. Skinner, G. Ceder, K.A. Persson (*=equal contributions) The Materials Project: A materials genome approach to accelerating materials innovation APL Materials, 2013, 1(1), 011002. doi:10.1063/1.4812323 Metadata {'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@article{Jain2013,\\n' 'author = {Jain, Anubhav and Ong, Shyue Ping and Hautier, ' 'Geoffroy and Chen, Wei and Richards, William Davidson and ' 'Dacek, Stephen and Cholia, Shreyas and Gunter, Dan and ' 'Skinner, David and Ceder, Gerbrand and Persson, Kristin ' 'a.},\\n' 'doi = {10.1063/1.4812323},\\n' 'issn = {2166532X},\\n' 'journal = {APL Materials},\\n' 'number = {1},\\n' 'pages = {011002},\\n' 'title = {{The Materials Project: A materials genome approach ' 'to accelerating materials innovation}},\\n' 'url = ' '{http://link.aip.org/link/AMPADS/v1/i1/p011002/s1\\\\&Agg=doi},\\n' 'volume = {1},\\n' 'year = {2013}\\n' '}'], 'columns': {'is_metal': 'Target variable. 1 if the compound is a metal, 0 if ' 'the compound is not a metal. Metallicity determined ' 'with pymatgen', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting DFT metallicity ' 'from structure. Adapted from Materials Project database. ' 'Removed entries having a formation energy (or energy above ' 'the convex hull) more than 150meV and those containing noble ' 'gases. Retrieved April 2, 2019. For benchmarking w/ nested ' 'cross validation, the order of the dataset must be identical ' 'to the retrieved data; refer to the Automatminer/Matbench ' 'publication for more details.', 'file_type': 'json.gz', 'frac_true': 0.43492314796490533, 'hash': '9a028ed5750a4c76ca36e9f3c8d48fe0bf3fb21b76ec2289e58ae7048d527919', 'input_type': 'structure', 'n_samples': 106113, 'num_entries': 106113, 'reference': 'A. Jain*, S.P. Ong*, G. Hautier, W. Chen, W.D. Richards, S. ' 'Dacek, S. Cholia, D. Gunter, D. Skinner, G. Ceder, K.A. Persson ' '(*=equal contributions)\\n' 'The Materials Project: A materials genome approach to ' 'accelerating materials innovation\\n' 'APL Materials, 2013, 1(1), 011002.\\n' 'doi:10.1063/1.4812323', 'target': 'is_metal', 'task_type': 'classification', 'unit': None, 'url': 'https://ml.materialsproject.org/projects/matbench_mp_is_metal.json.gz'}","title":"matbench_v0.1 matbench_mp_is_metal"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_is_metal/#matbench_v01-matbench_mp_is_metal","text":"","title":"matbench_v0.1 matbench_mp_is_metal"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_is_metal/#individual-task-leaderboard-for-matbench_mp_is_metal","text":"Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark.","title":"Individual Task Leaderboard for matbench_mp_is_metal"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_is_metal/#leaderboard","text":"algorithm mean rocauc std rocauc mean f1 mean balanced_accuracy CGCNN v2019 0.9520 0.0074 0.9462 0.9520 AMMExpress v2020 0.9093 0.0008 0.8981 0.9093 RF-SCM/Magpie 0.8992 0.0019 0.8866 0.8992 Dummy 0.5012 0.0043 0.4353 0.5012","title":"Leaderboard"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_is_metal/#dataset-info","text":"","title":"Dataset info"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_is_metal/#description","text":"Matbench v0.1 test dataset for predicting DFT metallicity from structure. Adapted from Materials Project database. Removed entries having a formation energy (or energy above the convex hull) more than 150meV and those containing noble gases. Retrieved April 2, 2019. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 106113 Task type: classification Input type: structure","title":"Description"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_is_metal/#dataset-columns","text":"is_metal: Target variable. 1 if the compound is a metal, 0 if the compound is not a metal. Metallicity determined with pymatgen structure: Pymatgen Structure of the material.","title":"Dataset columns"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_is_metal/#dataset-reference","text":"A. Jain*, S.P. Ong*, G. Hautier, W. Chen, W.D. Richards, S. Dacek, S. Cholia, D. Gunter, D. Skinner, G. Ceder, K.A. Persson (*=equal contributions) The Materials Project: A materials genome approach to accelerating materials innovation APL Materials, 2013, 1(1), 011002. doi:10.1063/1.4812323","title":"Dataset reference"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_mp_is_metal/#metadata","text":"{'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@article{Jain2013,\\n' 'author = {Jain, Anubhav and Ong, Shyue Ping and Hautier, ' 'Geoffroy and Chen, Wei and Richards, William Davidson and ' 'Dacek, Stephen and Cholia, Shreyas and Gunter, Dan and ' 'Skinner, David and Ceder, Gerbrand and Persson, Kristin ' 'a.},\\n' 'doi = {10.1063/1.4812323},\\n' 'issn = {2166532X},\\n' 'journal = {APL Materials},\\n' 'number = {1},\\n' 'pages = {011002},\\n' 'title = {{The Materials Project: A materials genome approach ' 'to accelerating materials innovation}},\\n' 'url = ' '{http://link.aip.org/link/AMPADS/v1/i1/p011002/s1\\\\&Agg=doi},\\n' 'volume = {1},\\n' 'year = {2013}\\n' '}'], 'columns': {'is_metal': 'Target variable. 1 if the compound is a metal, 0 if ' 'the compound is not a metal. Metallicity determined ' 'with pymatgen', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting DFT metallicity ' 'from structure. Adapted from Materials Project database. ' 'Removed entries having a formation energy (or energy above ' 'the convex hull) more than 150meV and those containing noble ' 'gases. Retrieved April 2, 2019. For benchmarking w/ nested ' 'cross validation, the order of the dataset must be identical ' 'to the retrieved data; refer to the Automatminer/Matbench ' 'publication for more details.', 'file_type': 'json.gz', 'frac_true': 0.43492314796490533, 'hash': '9a028ed5750a4c76ca36e9f3c8d48fe0bf3fb21b76ec2289e58ae7048d527919', 'input_type': 'structure', 'n_samples': 106113, 'num_entries': 106113, 'reference': 'A. Jain*, S.P. Ong*, G. Hautier, W. Chen, W.D. Richards, S. ' 'Dacek, S. Cholia, D. Gunter, D. Skinner, G. Ceder, K.A. Persson ' '(*=equal contributions)\\n' 'The Materials Project: A materials genome approach to ' 'accelerating materials innovation\\n' 'APL Materials, 2013, 1(1), 011002.\\n' 'doi:10.1063/1.4812323', 'target': 'is_metal', 'task_type': 'classification', 'unit': None, 'url': 'https://ml.materialsproject.org/projects/matbench_mp_is_metal.json.gz'}","title":"Metadata"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_perovskites/","text":"matbench_v0.1 matbench_perovskites Individual Task Leaderboard for matbench_perovskites Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark. Leaderboard algorithm mean mae std mae mean rmse max max_error CGCNN v2019 0.0452 0.0007 0.0722 0.9923 AMMExpress v2020 0.2005 0.0085 0.2954 3.3116 RF-SCM/Magpie 0.2355 0.0034 0.3346 2.8870 CrabNet 0.4065 0.0069 0.5412 2.3726 Dummy 0.5660 0.0048 0.7424 3.6873 Dataset info Description Matbench v0.1 test dataset for predicting formation energy from crystal structure. Adapted from an original dataset generated by Castelli et al. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 18928 Task type: regression Input type: structure Dataset columns e_form: Target variable. Heat of formation of the entire 5-atom perovskite cell, in eV as calculated by RPBE GGA-DFT. Note the reference state for oxygen was computed from oxygen's chemical potential in water vapor, not as oxygen molecules, to reflect the application which these perovskites were studied for. structure: Pymatgen Structure of the material. Dataset reference Ivano E. Castelli, David D. Landis, Kristian S. Thygesen, S\u00f8ren Dahl, Ib Chorkendorff, Thomas F. Jaramillo and Karsten W. Jacobsen (2012) New cubic perovskites for one- and two-photon water splitting using the computational materials repository. Energy Environ. Sci., 2012,5, 9034-9043 https://doi.org/10.1039/C2EE22341D Metadata {'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@Article{C2EE22341D,\\n' 'author =\"Castelli, Ivano E. and Landis, David D. and ' 'Thygesen, Kristian S. and Dahl, S\u00f8ren and Chorkendorff, Ib ' 'and Jaramillo, Thomas F. and Jacobsen, Karsten W.\",\\n' 'title =\"New cubic perovskites for one- and two-photon water ' 'splitting using the computational materials repository\",\\n' 'journal =\"Energy Environ. Sci.\",\\n' 'year =\"2012\",\\n' 'volume =\"5\",\\n' 'issue =\"10\",\\n' 'pages =\"9034-9043\",\\n' 'publisher =\"The Royal Society of Chemistry\",\\n' 'doi =\"10.1039/C2EE22341D\",\\n' 'url =\"http://dx.doi.org/10.1039/C2EE22341D\",\\n' 'abstract =\"A new efficient photoelectrochemical cell (PEC) ' 'is one of the possible solutions to the energy and climate ' 'problems of our time. Such a device requires development of ' 'new semiconducting materials with tailored properties with ' 'respect to stability and light absorption. Here we perform ' 'computational screening of around 19\\u2009000 oxides{,} ' 'oxynitrides{,} oxysulfides{,} oxyfluorides{,} and ' 'oxyfluoronitrides in the cubic perovskite structure with PEC ' 'applications in mind. We address three main applications: ' 'light absorbers for one- and two-photon water splitting and ' 'high-stability transparent shields to protect against ' 'corrosion. We end up with 20{,} 12{,} and 15 different ' 'combinations of oxides{,} oxynitrides and oxyfluorides{,} ' 'respectively{,} inviting further experimental ' 'investigation.\"}'], 'columns': {'e_form': 'Target variable. Heat of formation of the entire ' '5-atom perovskite cell, in eV as calculated by RPBE ' 'GGA-DFT. Note the reference state for oxygen was ' \"computed from oxygen's chemical potential in water \" 'vapor, not as oxygen molecules, to reflect the ' 'application which these perovskites were studied for.', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting formation energy ' 'from crystal structure. Adapted from an original dataset ' 'generated by Castelli et al. For benchmarking w/ nested cross ' 'validation, the order of the dataset must be identical to the ' 'retrieved data; refer to the Automatminer/Matbench ' 'publication for more details.', 'file_type': 'json.gz', 'hash': '4641e2417f8ec8b50096d2230864468dfa08278dc9d257c327f65d0305278483', 'input_type': 'structure', 'mad': 0.5659924184827462, 'n_samples': 18928, 'num_entries': 18928, 'reference': 'Ivano E. Castelli, David D. Landis, Kristian S. Thygesen, S\u00f8ren ' 'Dahl, Ib Chorkendorff, Thomas F. Jaramillo and Karsten W. ' 'Jacobsen (2012) New cubic perovskites for one- and two-photon ' 'water splitting using the computational materials repository. ' 'Energy Environ. Sci., 2012,5, 9034-9043 ' 'https://doi.org/10.1039/C2EE22341D', 'target': 'e_form', 'task_type': 'regression', 'unit': 'eV/unit cell', 'url': 'https://ml.materialsproject.org/projects/matbench_perovskites.json.gz'}","title":"matbench_v0.1 matbench_perovskites"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_perovskites/#matbench_v01-matbench_perovskites","text":"","title":"matbench_v0.1 matbench_perovskites"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_perovskites/#individual-task-leaderboard-for-matbench_perovskites","text":"Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark.","title":"Individual Task Leaderboard for matbench_perovskites"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_perovskites/#leaderboard","text":"algorithm mean mae std mae mean rmse max max_error CGCNN v2019 0.0452 0.0007 0.0722 0.9923 AMMExpress v2020 0.2005 0.0085 0.2954 3.3116 RF-SCM/Magpie 0.2355 0.0034 0.3346 2.8870 CrabNet 0.4065 0.0069 0.5412 2.3726 Dummy 0.5660 0.0048 0.7424 3.6873","title":"Leaderboard"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_perovskites/#dataset-info","text":"","title":"Dataset info"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_perovskites/#description","text":"Matbench v0.1 test dataset for predicting formation energy from crystal structure. Adapted from an original dataset generated by Castelli et al. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 18928 Task type: regression Input type: structure","title":"Description"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_perovskites/#dataset-columns","text":"e_form: Target variable. Heat of formation of the entire 5-atom perovskite cell, in eV as calculated by RPBE GGA-DFT. Note the reference state for oxygen was computed from oxygen's chemical potential in water vapor, not as oxygen molecules, to reflect the application which these perovskites were studied for. structure: Pymatgen Structure of the material.","title":"Dataset columns"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_perovskites/#dataset-reference","text":"Ivano E. Castelli, David D. Landis, Kristian S. Thygesen, S\u00f8ren Dahl, Ib Chorkendorff, Thomas F. Jaramillo and Karsten W. Jacobsen (2012) New cubic perovskites for one- and two-photon water splitting using the computational materials repository. Energy Environ. Sci., 2012,5, 9034-9043 https://doi.org/10.1039/C2EE22341D","title":"Dataset reference"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_perovskites/#metadata","text":"{'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@Article{C2EE22341D,\\n' 'author =\"Castelli, Ivano E. and Landis, David D. and ' 'Thygesen, Kristian S. and Dahl, S\u00f8ren and Chorkendorff, Ib ' 'and Jaramillo, Thomas F. and Jacobsen, Karsten W.\",\\n' 'title =\"New cubic perovskites for one- and two-photon water ' 'splitting using the computational materials repository\",\\n' 'journal =\"Energy Environ. Sci.\",\\n' 'year =\"2012\",\\n' 'volume =\"5\",\\n' 'issue =\"10\",\\n' 'pages =\"9034-9043\",\\n' 'publisher =\"The Royal Society of Chemistry\",\\n' 'doi =\"10.1039/C2EE22341D\",\\n' 'url =\"http://dx.doi.org/10.1039/C2EE22341D\",\\n' 'abstract =\"A new efficient photoelectrochemical cell (PEC) ' 'is one of the possible solutions to the energy and climate ' 'problems of our time. Such a device requires development of ' 'new semiconducting materials with tailored properties with ' 'respect to stability and light absorption. Here we perform ' 'computational screening of around 19\\u2009000 oxides{,} ' 'oxynitrides{,} oxysulfides{,} oxyfluorides{,} and ' 'oxyfluoronitrides in the cubic perovskite structure with PEC ' 'applications in mind. We address three main applications: ' 'light absorbers for one- and two-photon water splitting and ' 'high-stability transparent shields to protect against ' 'corrosion. We end up with 20{,} 12{,} and 15 different ' 'combinations of oxides{,} oxynitrides and oxyfluorides{,} ' 'respectively{,} inviting further experimental ' 'investigation.\"}'], 'columns': {'e_form': 'Target variable. Heat of formation of the entire ' '5-atom perovskite cell, in eV as calculated by RPBE ' 'GGA-DFT. Note the reference state for oxygen was ' \"computed from oxygen's chemical potential in water \" 'vapor, not as oxygen molecules, to reflect the ' 'application which these perovskites were studied for.', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting formation energy ' 'from crystal structure. Adapted from an original dataset ' 'generated by Castelli et al. For benchmarking w/ nested cross ' 'validation, the order of the dataset must be identical to the ' 'retrieved data; refer to the Automatminer/Matbench ' 'publication for more details.', 'file_type': 'json.gz', 'hash': '4641e2417f8ec8b50096d2230864468dfa08278dc9d257c327f65d0305278483', 'input_type': 'structure', 'mad': 0.5659924184827462, 'n_samples': 18928, 'num_entries': 18928, 'reference': 'Ivano E. Castelli, David D. Landis, Kristian S. Thygesen, S\u00f8ren ' 'Dahl, Ib Chorkendorff, Thomas F. Jaramillo and Karsten W. ' 'Jacobsen (2012) New cubic perovskites for one- and two-photon ' 'water splitting using the computational materials repository. ' 'Energy Environ. Sci., 2012,5, 9034-9043 ' 'https://doi.org/10.1039/C2EE22341D', 'target': 'e_form', 'task_type': 'regression', 'unit': 'eV/unit cell', 'url': 'https://ml.materialsproject.org/projects/matbench_perovskites.json.gz'}","title":"Metadata"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_phonons/","text":"matbench_v0.1 matbench_phonons Individual Task Leaderboard for matbench_phonons Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark. Leaderboard algorithm mean mae std mae mean rmse max max_error MODNet (v0.1.10) 38.7524 1.7732 78.2220 1031.8168 CrabNet 55.1114 5.7317 138.3775 1452.7562 AMMExpress v2020 56.1706 6.7981 109.7048 1151.5570 CGCNN v2019 57.7635 12.3109 141.7018 2504.8743 RF-SCM/Magpie 67.6126 8.9900 146.2764 2024.7301 Dummy 323.9822 17.7269 492.1533 3062.3450 Dataset info Description Matbench v0.1 test dataset for predicting vibration properties from crystal structure. Original data retrieved from Petretto et al. Original calculations done via ABINIT in the harmonic approximation based on density functional perturbation theory. Removed entries having a formation energy (or energy above the convex hull) more than 150meV. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 1265 Task type: regression Input type: structure Dataset columns last phdos peak: Target variable. Frequency of the highest frequency optical phonon mode peak, in units of 1/cm; ; may be used as an estimation of dominant longitudinal optical phonon frequency. structure: Pymatgen Structure of the material. Dataset reference Petretto, G. et al. High-throughput density functional perturbation theory phonons for inorganic materials. Sci. Data 5:180065 doi: 10.1038/sdata.2018.65 (2018). Petretto, G. et al. High-throughput density functional perturbation theory phonons for inorganic materials. (2018). figshare. Collection. Metadata {'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@Article{Petretto2018,\\n' 'author={Petretto, Guido\\n' 'and Dwaraknath, Shyam\\n' 'and P.C. Miranda, Henrique\\n' 'and Winston, Donald\\n' 'and Giantomassi, Matteo\\n' 'and van Setten, Michiel J.\\n' 'and Gonze, Xavier\\n' 'and Persson, Kristin A.\\n' 'and Hautier, Geoffroy\\n' 'and Rignanese, Gian-Marco},\\n' 'title={High-throughput density-functional perturbation ' 'theory phonons for inorganic materials},\\n' 'journal={Scientific Data},\\n' 'year={2018},\\n' 'month={May},\\n' 'day={01},\\n' 'publisher={The Author(s)},\\n' 'volume={5},\\n' 'pages={180065},\\n' 'note={Data Descriptor},\\n' 'url={http://dx.doi.org/10.1038/sdata.2018.65}\\n' '}', '@misc{petretto_dwaraknath_miranda_winston_giantomassi_rignanese_van ' 'setten_gonze_persson_hautier_2018, title={High-throughput ' 'Density-Functional Perturbation Theory phonons for inorganic ' 'materials}, ' 'url={https://figshare.com/collections/High-throughput_Density-Functional_Perturbation_Theory_phonons_for_inorganic_materials/3938023/1}, ' 'DOI={10.6084/m9.figshare.c.3938023.v1}, abstractNote={The ' 'knowledge of the vibrational properties of a material is of ' 'key importance to understand physical phenomena such as ' 'thermal conductivity, superconductivity, and ' 'ferroelectricity among others. However, detailed ' 'experimental phonon spectra are available only for a limited ' 'number of materials which hinders the large-scale analysis ' 'of vibrational properties and their derived quantities. In ' 'this work, we perform ab initio calculations of the full ' 'phonon dispersion and vibrational density of states for 1521 ' 'semiconductor compounds in the harmonic approximation based ' 'on density functional perturbation theory. The data is ' 'collected along with derived dielectric and thermodynamic ' 'properties. We present the procedure used to obtain the ' 'results, the details of the provided database and a ' 'validation based on the comparison with experimental data.}, ' 'publisher={figshare}, author={Petretto, Guido and ' 'Dwaraknath, Shyam and Miranda, Henrique P. C. and Winston, ' 'Donald and Giantomassi, Matteo and Rignanese, Gian-Marco and ' 'Van Setten, Michiel J. and Gonze, Xavier and Persson, ' 'Kristin A and Hautier, Geoffroy}, year={2018}, month={Apr}}'], 'columns': {'last phdos peak': 'Target variable. Frequency of the highest ' 'frequency optical phonon mode peak, in units ' 'of 1/cm; ; may be used as an estimation of ' 'dominant longitudinal optical phonon ' 'frequency.', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting vibration ' 'properties from crystal structure. Original data retrieved ' 'from Petretto et al. Original calculations done via ABINIT in ' 'the harmonic approximation based on density functional ' 'perturbation theory. Removed entries having a formation ' 'energy (or energy above the convex hull) more than 150meV. ' 'For benchmarking w/ nested cross validation, the order of the ' 'dataset must be identical to the retrieved data; refer to the ' 'Automatminer/Matbench publication for more details.', 'file_type': 'json.gz', 'hash': '4db551f21ec5f577e6202725f10e34dfc509aa7df3a6bdaac497da7f6dbbb9b3', 'input_type': 'structure', 'mad': 323.78696979348734, 'n_samples': 1265, 'num_entries': 1265, 'reference': 'Petretto, G. et al. High-throughput density functional ' 'perturbation theory phonons for inorganic materials. Sci. Data ' '5:180065 doi: 10.1038/sdata.2018.65 (2018).\\n' 'Petretto, G. et al. High-throughput density functional ' 'perturbation theory phonons for inorganic materials. (2018). ' 'figshare. Collection.', 'target': 'last phdos peak', 'task_type': 'regression', 'unit': 'cm^-1', 'url': 'https://ml.materialsproject.org/projects/matbench_phonons.json.gz'}","title":"matbench_v0.1 matbench_phonons"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_phonons/#matbench_v01-matbench_phonons","text":"","title":"matbench_v0.1 matbench_phonons"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_phonons/#individual-task-leaderboard-for-matbench_phonons","text":"Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark.","title":"Individual Task Leaderboard for matbench_phonons"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_phonons/#leaderboard","text":"algorithm mean mae std mae mean rmse max max_error MODNet (v0.1.10) 38.7524 1.7732 78.2220 1031.8168 CrabNet 55.1114 5.7317 138.3775 1452.7562 AMMExpress v2020 56.1706 6.7981 109.7048 1151.5570 CGCNN v2019 57.7635 12.3109 141.7018 2504.8743 RF-SCM/Magpie 67.6126 8.9900 146.2764 2024.7301 Dummy 323.9822 17.7269 492.1533 3062.3450","title":"Leaderboard"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_phonons/#dataset-info","text":"","title":"Dataset info"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_phonons/#description","text":"Matbench v0.1 test dataset for predicting vibration properties from crystal structure. Original data retrieved from Petretto et al. Original calculations done via ABINIT in the harmonic approximation based on density functional perturbation theory. Removed entries having a formation energy (or energy above the convex hull) more than 150meV. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 1265 Task type: regression Input type: structure","title":"Description"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_phonons/#dataset-columns","text":"last phdos peak: Target variable. Frequency of the highest frequency optical phonon mode peak, in units of 1/cm; ; may be used as an estimation of dominant longitudinal optical phonon frequency. structure: Pymatgen Structure of the material.","title":"Dataset columns"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_phonons/#dataset-reference","text":"Petretto, G. et al. High-throughput density functional perturbation theory phonons for inorganic materials. Sci. Data 5:180065 doi: 10.1038/sdata.2018.65 (2018). Petretto, G. et al. High-throughput density functional perturbation theory phonons for inorganic materials. (2018). figshare. Collection.","title":"Dataset reference"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_phonons/#metadata","text":"{'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@Article{Petretto2018,\\n' 'author={Petretto, Guido\\n' 'and Dwaraknath, Shyam\\n' 'and P.C. Miranda, Henrique\\n' 'and Winston, Donald\\n' 'and Giantomassi, Matteo\\n' 'and van Setten, Michiel J.\\n' 'and Gonze, Xavier\\n' 'and Persson, Kristin A.\\n' 'and Hautier, Geoffroy\\n' 'and Rignanese, Gian-Marco},\\n' 'title={High-throughput density-functional perturbation ' 'theory phonons for inorganic materials},\\n' 'journal={Scientific Data},\\n' 'year={2018},\\n' 'month={May},\\n' 'day={01},\\n' 'publisher={The Author(s)},\\n' 'volume={5},\\n' 'pages={180065},\\n' 'note={Data Descriptor},\\n' 'url={http://dx.doi.org/10.1038/sdata.2018.65}\\n' '}', '@misc{petretto_dwaraknath_miranda_winston_giantomassi_rignanese_van ' 'setten_gonze_persson_hautier_2018, title={High-throughput ' 'Density-Functional Perturbation Theory phonons for inorganic ' 'materials}, ' 'url={https://figshare.com/collections/High-throughput_Density-Functional_Perturbation_Theory_phonons_for_inorganic_materials/3938023/1}, ' 'DOI={10.6084/m9.figshare.c.3938023.v1}, abstractNote={The ' 'knowledge of the vibrational properties of a material is of ' 'key importance to understand physical phenomena such as ' 'thermal conductivity, superconductivity, and ' 'ferroelectricity among others. However, detailed ' 'experimental phonon spectra are available only for a limited ' 'number of materials which hinders the large-scale analysis ' 'of vibrational properties and their derived quantities. In ' 'this work, we perform ab initio calculations of the full ' 'phonon dispersion and vibrational density of states for 1521 ' 'semiconductor compounds in the harmonic approximation based ' 'on density functional perturbation theory. The data is ' 'collected along with derived dielectric and thermodynamic ' 'properties. We present the procedure used to obtain the ' 'results, the details of the provided database and a ' 'validation based on the comparison with experimental data.}, ' 'publisher={figshare}, author={Petretto, Guido and ' 'Dwaraknath, Shyam and Miranda, Henrique P. C. and Winston, ' 'Donald and Giantomassi, Matteo and Rignanese, Gian-Marco and ' 'Van Setten, Michiel J. and Gonze, Xavier and Persson, ' 'Kristin A and Hautier, Geoffroy}, year={2018}, month={Apr}}'], 'columns': {'last phdos peak': 'Target variable. Frequency of the highest ' 'frequency optical phonon mode peak, in units ' 'of 1/cm; ; may be used as an estimation of ' 'dominant longitudinal optical phonon ' 'frequency.', 'structure': 'Pymatgen Structure of the material.'}, 'description': 'Matbench v0.1 test dataset for predicting vibration ' 'properties from crystal structure. Original data retrieved ' 'from Petretto et al. Original calculations done via ABINIT in ' 'the harmonic approximation based on density functional ' 'perturbation theory. Removed entries having a formation ' 'energy (or energy above the convex hull) more than 150meV. ' 'For benchmarking w/ nested cross validation, the order of the ' 'dataset must be identical to the retrieved data; refer to the ' 'Automatminer/Matbench publication for more details.', 'file_type': 'json.gz', 'hash': '4db551f21ec5f577e6202725f10e34dfc509aa7df3a6bdaac497da7f6dbbb9b3', 'input_type': 'structure', 'mad': 323.78696979348734, 'n_samples': 1265, 'num_entries': 1265, 'reference': 'Petretto, G. et al. High-throughput density functional ' 'perturbation theory phonons for inorganic materials. Sci. Data ' '5:180065 doi: 10.1038/sdata.2018.65 (2018).\\n' 'Petretto, G. et al. High-throughput density functional ' 'perturbation theory phonons for inorganic materials. (2018). ' 'figshare. Collection.', 'target': 'last phdos peak', 'task_type': 'regression', 'unit': 'cm^-1', 'url': 'https://ml.materialsproject.org/projects/matbench_phonons.json.gz'}","title":"Metadata"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_steels/","text":"matbench_v0.1 matbench_steels Individual Task Leaderboard for matbench_steels Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark. Leaderboard algorithm mean mae std mae mean rmse max max_error MODNet (v0.1.10) 96.2139 9.8352 149.9535 931.3261 AMMExpress v2020 97.4929 13.7919 154.0161 1142.9223 RF-SCM/Magpie 103.5125 11.0368 149.3839 1121.1276 CrabNet 107.3160 18.9057 153.0041 576.3912 Dummy 229.7445 9.6958 301.2211 1088.0568 Dataset info Description Matbench v0.1 test dataset for predicting steel yield strengths from chemical composition alone. Retrieved from Citrine informatics. Deduplicated. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 312 Task type: regression Input type: composition Dataset columns composition: Chemical formula. yield strength: Target variable. Experimentally measured steel yield strengths, in MPa. Dataset reference https://citrination.com/datasets/153092/ Metadata {'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@misc{Citrine Informatics,\\n' 'title = {Mechanical properties of some steels},\\n' 'howpublished = ' '{\\\\url{https://citrination.com/datasets/153092/},\\n' '}'], 'columns': {'composition': 'Chemical formula.', 'yield strength': 'Target variable. Experimentally measured steel ' 'yield strengths, in MPa.'}, 'description': 'Matbench v0.1 test dataset for predicting steel yield ' 'strengths from chemical composition alone. Retrieved from ' 'Citrine informatics. Deduplicated. For benchmarking w/ nested ' 'cross validation, the order of the dataset must be identical ' 'to the retrieved data; refer to the Automatminer/Matbench ' 'publication for more details.', 'file_type': 'json.gz', 'hash': '473bc4957b2ea5e6465aef84bc29bb48ac34db27d69ea4ec5f508745c6fae252', 'input_type': 'composition', 'mad': 229.37426857330706, 'n_samples': 312, 'num_entries': 312, 'reference': 'https://citrination.com/datasets/153092/', 'target': 'yield strength', 'task_type': 'regression', 'unit': 'MPa', 'url': 'https://ml.materialsproject.org/projects/matbench_steels.json.gz'}","title":"matbench_v0.1 matbench_steels"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_steels/#matbench_v01-matbench_steels","text":"","title":"matbench_v0.1 matbench_steels"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_steels/#individual-task-leaderboard-for-matbench_steels","text":"Leaderboard for an individual task. Algorithms shown here may include both general purpose and specialized algorithms (i.e., algorithms which are only valid for a subset of tasks in the benchmark.","title":"Individual Task Leaderboard for matbench_steels"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_steels/#leaderboard","text":"algorithm mean mae std mae mean rmse max max_error MODNet (v0.1.10) 96.2139 9.8352 149.9535 931.3261 AMMExpress v2020 97.4929 13.7919 154.0161 1142.9223 RF-SCM/Magpie 103.5125 11.0368 149.3839 1121.1276 CrabNet 107.3160 18.9057 153.0041 576.3912 Dummy 229.7445 9.6958 301.2211 1088.0568","title":"Leaderboard"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_steels/#dataset-info","text":"","title":"Dataset info"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_steels/#description","text":"Matbench v0.1 test dataset for predicting steel yield strengths from chemical composition alone. Retrieved from Citrine informatics. Deduplicated. For benchmarking w/ nested cross validation, the order of the dataset must be identical to the retrieved data; refer to the Automatminer/Matbench publication for more details. Number of samples: 312 Task type: regression Input type: composition","title":"Description"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_steels/#dataset-columns","text":"composition: Chemical formula. yield strength: Target variable. Experimentally measured steel yield strengths, in MPa.","title":"Dataset columns"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_steels/#dataset-reference","text":"https://citrination.com/datasets/153092/","title":"Dataset reference"},{"location":"Per-Task%20Leaderboards/matbench_v0.1_matbench_steels/#metadata","text":"{'bibtex_refs': ['@Article{Dunn2020,\\n' 'author={Dunn, Alexander\\n' 'and Wang, Qi\\n' 'and Ganose, Alex\\n' 'and Dopp, Daniel\\n' 'and Jain, Anubhav},\\n' 'title={Benchmarking materials property prediction methods: ' 'the Matbench test set and Automatminer reference ' 'algorithm},\\n' 'journal={npj Computational Materials},\\n' 'year={2020},\\n' 'month={Sep},\\n' 'day={15},\\n' 'volume={6},\\n' 'number={1},\\n' 'pages={138},\\n' 'abstract={We present a benchmark test suite and an automated ' 'machine learning procedure for evaluating supervised machine ' 'learning (ML) models for predicting properties of inorganic ' 'bulk materials. The test suite, Matbench, is a set of ' '13{\\\\thinspace}ML tasks that range in size from 312 to 132k ' 'samples and contain data from 10 density functional ' 'theory-derived and experimental sources. Tasks include ' 'predicting optical, thermal, electronic, thermodynamic, ' \"tensile, and elastic properties given a material's \" 'composition and/or crystal structure. The reference ' 'algorithm, Automatminer, is a highly-extensible, fully ' 'automated ML pipeline for predicting materials properties ' 'from materials primitives (such as composition and crystal ' 'structure) without user intervention or hyperparameter ' 'tuning. We test Automatminer on the Matbench test suite and ' 'compare its predictive power with state-of-the-art crystal ' 'graph neural networks and a traditional descriptor-based ' 'Random Forest model. We find Automatminer achieves the best ' 'performance on 8 of 13 tasks in the benchmark. We also show ' 'our test suite is capable of exposing predictive advantages ' 'of each algorithm---namely, that crystal graph methods ' 'appear to outperform traditional machine learning methods ' 'given {\\\\textasciitilde}104 or greater data points. We ' 'encourage evaluating materials ML algorithms on the Matbench ' 'benchmark and comparing them against the latest version of ' 'Automatminer.},\\n' 'issn={2057-3960},\\n' 'doi={10.1038/s41524-020-00406-3},\\n' 'url={https://doi.org/10.1038/s41524-020-00406-3}\\n' '}\\n', '@misc{Citrine Informatics,\\n' 'title = {Mechanical properties of some steels},\\n' 'howpublished = ' '{\\\\url{https://citrination.com/datasets/153092/},\\n' '}'], 'columns': {'composition': 'Chemical formula.', 'yield strength': 'Target variable. Experimentally measured steel ' 'yield strengths, in MPa.'}, 'description': 'Matbench v0.1 test dataset for predicting steel yield ' 'strengths from chemical composition alone. Retrieved from ' 'Citrine informatics. Deduplicated. For benchmarking w/ nested ' 'cross validation, the order of the dataset must be identical ' 'to the retrieved data; refer to the Automatminer/Matbench ' 'publication for more details.', 'file_type': 'json.gz', 'hash': '473bc4957b2ea5e6465aef84bc29bb48ac34db27d69ea4ec5f508745c6fae252', 'input_type': 'composition', 'mad': 229.37426857330706, 'n_samples': 312, 'num_entries': 312, 'reference': 'https://citrination.com/datasets/153092/', 'target': 'yield strength', 'task_type': 'regression', 'unit': 'MPa', 'url': 'https://ml.materialsproject.org/projects/matbench_steels.json.gz'}","title":"Metadata"}]}